searchState.loadedDescShard("linera_alloy_consensus", 0, "linera-alloy-consensus\nRepresents an Account in the account trie.\nReceipt envelope, as defined in EIP-2718.\nA Blob serialized as 0x-prefixed hex string\nThis represents a set of blobs, and its corresponding …\nA commitment/proof serialized as 0x-prefixed hex string\nAn EIP-6110 deposit request.\nOmmer root of empty list.\nRoot hash of an empty trie.\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nEthereum Block header\nReceipt envelope with no type flag.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nEthereum execution layer requests.\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars. …\nA transaction with a signature and hash seal.\nSimple coder that only uses the last 31 bytes of each …\nReceipt is the result of a transaction execution.\nAn EIP-7002 withdrawal request.\nReturn the inner <code>DepositRequest</code>, or <code>None</code> of this is not a …\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nReturn the inner <code>WithdrawalRequest</code>, or <code>None</code> if this is not …\nThe account’s balance.\nA scalar representing EIP1559 base fee which can move up …\nThe 160-bit address to which all fees collected from the …\nReturns the blob fee for <em>this</em> block according to the …\nThe total amount of blob gas consumed by the transactions …\nThe blob data.\nReturns the bloom filter for the logs in the receipt. This …\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nReturns the bloom filter for the logs in the receipt, if …\nReturns the bloom filter for the logs in the receipt, if …\nCalculates <code>Log</code>’s bloom filter. this is slow operation …\nCode a slice of data into the builder.\nThe hash of the code of the account.\nThe blob commitments.\nEthereum protocol-related constants\nReturns the cumulative gas used in the block after this …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDecode all slices of data from the blobs.\nA scalar value corresponding to the difficulty level of …\nEncodes the inner BlobTransactionSidecar fields as RLP …\nA running total of blob gas consumed in excess of the …\nAn arbitrary byte array containing data relevant to this …\nOutputs the RLP length of the BlobTransactionSidecar …\nFinish the sidecar, and commit to the data. This method …\nNo-op\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder.\nReturns the argument unchanged.\nConsume the structure, returning only the receipt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a new builder with the provided coder and …\nCreate a new builder from a slice of data.\nCreate a new builder from a slice of data by calling …\nA scalar value equal to the current limit of gas …\nA scalar value equal to the total gas used in transactions …\nCalculate the seal hash, this may be slow.\nGeth the hash (alias for <code>Self::seal</code>).\nReturns a reference to the transaction hash.\nHeavy function that will calculate hash of data and will …\nIngest a slice of data into the builder.\nGet the inner item.\nThe receipt envelope.\nGet the length of the inner receipt in the 2718 encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the structure, returning the receipt and the bloom …\nDecompose into parts.\nSplits the transaction into parts.\nWhether this is a <code>DepositRequest</code>.\nChecks if the header is empty - has no transactions and no …\nCheck if the builder is empty.\nReturns whether this is a legacy receipt (type 0)\nReturn true if the transaction was successful.\nReturn true if the transaction was successful.\nWhether this is a <code>WithdrawalRequest</code>.\nCalculate the length of bytes used by field elements in …\nReturns the logs emitted by this transaction.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nLog send from contracts.\nReturn the receipt’s bloom.\nThe Bloom filter composed from indexable information …\nThe bloom filter.\nA 256-bit hash which, combined with the nonce, proves that …\nInstantiate a new builder and new coder instance.\nConstructs a new BlobTransactionSidecar from a set of …\nCreate new ReceiptWithBloom\nInstantiate without performing the hash. This should be …\nInstantiate from a transaction and signature. Does not …\nCalculate base fee for next block according to the …\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nThe account’s nonce.\nA 64-bit value which, combined with the mixhash, proves …\nA scalar value equal to the number of ancestor blocks. The …\nThe Keccak 256-bit hash of the ommers list portion of this …\nCheck if the ommers hash equals to empty hash list.\nThe hash of the parent beacon block’s root is included …\nThe Keccak 256-bit hash of the parent block’s header, in …\nThe blob proofs.\nThe receipt.\nThe Keccak 256-bit hash of the root node of the trie …\nThe Keccak 256-bit hash of the root node of the trie …\nCalculate the number of field elements required to store …\nCalculate the length of the rlp payload of the network …\nCalculate the length of the rlp payload of the network …\nGet the hash.\nSeal the object by calculating the hash. This may be slow.\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nInstantiate an unchecked seal. This should be used with …\nReturns a reference to the signature.\nCalculate the signing hash for the transaction.\nCalculate a heuristic for the in-memory size of the Header.\nCalculates a size heuristic for the in-memory size of the …\nThe Keccak 256-bit hash of the root node of the state …\nReturns true if the transaction was successful.\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nIf transaction is executed successfully.\nThe hash of the storage account data.\nReturns the transaction without signature.\nTake the blobs from the builder, without committing them …\nA scalar value equal to the reasonable output of Unix’s …\nTransaction types.\nCheck if the transaction root equals to empty root.\nThe Keccak 256-bit hash of the root node of the trie …\nCompute  hash as committed to in the MPT trie without …\nReturns a reference to the transaction.\nReturn the <code>TxType</code> of the inner receipt.\nThe transaction type.\nUtilities for working with EIP-4844 field elements and …\nReturns the versioned hash for the blob at the given …\nReturns an iterator over the versioned hashes of the …\nCalculates the bloom filter for the receipt and returns …\nCreate a new builder with a pre-allocated capacity. This …\nThe Keccak 256-bit hash of the withdrawals list portion of …\nTestnet genesis hash.\nOmmer root of empty list.\nTransactions root of empty receipts set.\nRoot hash of an empty trie.\nTransactions root of empty transactions set.\nWithdrawals root of empty withdrawals set.\nMultiplier for converting ether to wei.\nMultiplier for converting finney (milliether) to wei.\nBase goerli genesis hash.\nGoerli genesis hash.\nOptimism goerli genesis hash.\nMultiplier for converting gwei to wei.\nHolesky genesis hash.\nKeccak256 over empty array.\nThe Ethereum mainnet genesis hash.\nMaximum extra data size in a block after genesis\nMultiplier for converting mgas to gas.\nThe first four bytes of the call data for a function call …\nSepolia genesis hash.\nA Blob serialized as 0x-prefixed hex string\nThis represents a set of blobs, and its corresponding …\nA commitment/proof serialized as 0x-prefixed hex string\nEIP-1559 transaction type.\nA <code>TxEip1559</code> tagged with type 2.\nEIP-1559 transaction\nEIP-2930 transaction type.\nA <code>TxEip2930</code> tagged with type 1.\nEIP-2930 transaction\nEIP-4844 transaction type.\nA TxEip4844 tagged with type 3. An EIP-4844 transaction …\nEIP-4844 transaction\nLegacy transaction type.\nAn untagged <code>TxLegacy</code>.\nLegacy transaction\nBuild a <code>BlobTransactionSidecar</code> from an arbitrary amount of …\nA strategy for coding and decoding data into sidecars. …\nA signable transaction.\nSimple coder that only uses the last 31 bytes of each …\nThe EIP-2718 transaction type.\nRepresents a minimal EVM transaction.\nA transaction with a priority fee (EIP-1559).\nTransaction with an <code>AccessList</code> (EIP-2930).\nThe Ethereum EIP-2718 Transaction Envelope.\nLegacy transaction.\nEthereum <code>TransactionType</code> flags as specified in EIPs 2718, …\nThe TypedTransaction enum represents all Ethereum …\nThe accessList specifies a list of addresses and storage …\nThe accessList specifies a list of addresses and storage …\nThe blob data.\nGet <code>chain_id</code>.\nEIP-155: Simple replay attack protection\nAdded as EIP-pub 155: Simple replay attack protection\nAdded as EIP-155: Simple replay attack protection\nCode a slice of data into the builder.\nThe blob commitments.\nDecode all slices of data from the blobs.\nReturns the effective gas price for the given <code>base_fee</code>.\nReturn the inner EIP-1559 transaction if it exists.\nReturn the inner EIP-2930 transaction if it exists.\n[EIP-4844] constants, helpers, and types.\nUtilities for working with EIP-4844 field elements and …\nRLP-encodes the transaction for signing.\nEncodes the transaction from RLP bytes, including the …\nRLP-encodes the transaction for signing it. Used to …\nFinish the sidecar, and commit to the data. This method …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet <code>gas_limit</code>.\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nA scalar value equal to the maximum amount of gas that …\nGet <code>gas_price</code>.\nA scalar value equal to the number of Wei to be paid per …\nA scalar value equal to the number of Wei to be paid per …\nReturn the length of the inner txn, <strong>without a type byte</strong>.\nGet <code>data</code>.\nInput has two uses depending if transaction is Create or …\nInput has two uses depending if transaction is Create or …\nInput has two uses depending if transaction is Create or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a signed transaction by adding a signature and …\nReturn the inner legacy transaction if it exists.\nA scalar value equal to the maximum amount of gas that …\nMax Priority fee that transaction is paying\nGet <code>nonce</code>.\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nA scalar value equal to the number of transactions sent by …\nOutputs the length of the signature RLP encoding for the …\nThe blob proofs.\nCalculate the number of field elements required to store …\nSets <code>chain_id</code>.\nSet <code>chain_id</code> if it is not already set. Checks that the …\nCalculate the signing hash for the transaction.\nCalculate the signing hash for the transaction.\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nGet <code>to</code>.\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient or, …\nThe 160-bit address of the message call’s recipient or, …\nReturn the hash of the inner Signed\nGet transaction type.\nReturn the <code>TxType</code> of the inner txn.\nReturn the <code>TxType</code> of the inner txn.\nTrue if the transaction uses EIP-155 signatures.\nGet <code>value</code>.\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nA scalar value equal to the number of Wei to be …\nThis represents a set of blobs, and its corresponding …\nEIP-4844 Blob Transaction\nA standalone transaction with blob hashes and max blob fee.\nEIP-4844 Blob Transaction\nEIP-4844 Blob Transaction\nA transaction with a sidecar, which contains the blob …\nThe accessList specifies a list of addresses and storage …\nReturns the total gas for all blobs in this transaction.\nIt contains a vector of fixed size hash(32 bytes)\nThe blob data.\nAdded as EIP-pub 155: Simple replay attack protection\nThe blob commitments.\nDecodes the inner TxEip4844Variant fields from RLP bytes.\nReturns the effective gas price for the given <code>base_fee</code>.\nEncodes the EIP-4844 transaction in RLP for signing.\nEncodes the transaction from RLP bytes, including the …\nReturns the argument unchanged.\nConsumes the TxEip4844WithSidecar and returns the inner …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new TxEip4844WithSidecar from a TxEip4844 and …\nA scalar value equal to the maximum amount of gas that …\nInput has two uses depending if transaction is Create or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the TxEip4844WithSidecar and returns the inner …\nConsumes the TxEip4844WithSidecar and returns the inner …\nMax fee per data gas\nA scalar value equal to the maximum amount of gas that …\nMax Priority fee that transaction is paying\nA scalar value equal to the number of transactions sent by …\nOutputs the length of the signature RLP encoding for the …\nThe blob proofs.\nGet access to the inner sidecar BlobTransactionSidecar.\nThe sidecar.\nCalculates a heuristic for the in-memory size of the …\nThe 160-bit address of the message call’s recipient.\nGet access to the inner tx TxEip4844.\nGet access to the inner tx TxEip4844.\nThe actual transaction.\nGet the transaction type.\nGet transaction type\nGet the transaction type.\nA scalar value equal to the number of Wei to be …\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nA wrapper for a slice of bytes that is a whole, valid …\nDetermine whether a slice of bytes can be contained in a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate the number of field elements required to store …\nCalculate the number of field elements required to store …\nInstantiate a new <code>WholeFe</code> from a slice of bytes, if it is …")
searchState.loadedDescShard("linera_rpc", 0, "This module provides network abstractions and the data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWether this messsage is “local” i.e. will be executed …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nObtains the <code>ChainId</code> of the chain targeted by this message, …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe network protocol.\nThe network configuration of a shard.\nThe network configuration for all shards.\nThe network configuration for all shards.\nThe public network configuration for a validator.\nThe public network configuration for a validator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>ShardConfig</code> of the shard assigned to the <code>chain_id</code>.\nStatic shard assignment\nThe host name of the proxy on the internal network (IP or …\nThe host name of the validator (IP or hostname).\nThe host name (e.g an IP address).\nThe host name of the proxy on the internal network (IP or …\nThe host name of the validator (IP or hostname).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe host name of the proxy’s metrics endpoint.\nThe host on which metrics are served.\nThe host name of the proxy’s metrics endpoint.\nThe port of the proxy’s metrics endpoint.\nThe port on which metrics are served.\nThe port of the proxy’s metrics endpoint.\nThe port the proxy listens on on the internal network.\nThe port the validator listens on.\nThe port.\nThe port the proxy listens on on the internal network.\nThe port the validator listens on.\nThe network protocol to use for all shards.\nThe network protocol to use for the validator frontend.\nThe network protocol to use for all shards.\nThe network protocol to use for the validator frontend.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe available shards. Each chain UID is mapped to a unique …\nThe available shards. Each chain UID is mapped to a unique …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nTypes which are proxyable and expose the appropriate …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA blob of binary data.\nA content-addressed blob ID i.e. the hash of the …\nAn authenticated proposal for a new block.\nA certified statement from the committee.\nRequest information on a chain.\nResponse to <code>ChainInfoQuery</code>\nA wrapper around ChainInfoResponse which contains a …\nAcknowledge the height of the highest confirmed blocks …\nInformation about the Linera crate version the validator …\nAn internal request between chains within a validator.\nA certified statement from the committee, together with …\nA certified statement from the committee, without the …\nNotify that a chain has a new certified block or a new …\nA request for client to subscribe to notifications for a …\nCommunicate a number of messages from the sender to the …\nInformation about the version of Linera the validator is …\nRequired blob\nBlobs required by this certificate\nA certified statement from the committee.\nThe chain ID\nThe ID of the chain (used for routing).\nThe ID of the chain the value belongs to.\nThe ID of the chain (used for routing).\nbincode-encoded chain info\nNested message and enum types in <code>ChainInfoResult</code>.\nbincode-encoded content\nNested message and enum types in <code>CrossChainRequest</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe certified value’s hash\nRequired bytecode\nOther certificates containing bytecode required by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nByte-encoded public key\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nQuery the current committees\nRequest a signed vote for fallback mode.\nRequest a signed vote for a leader timeout.\nQuery values from the chain manager, not just votes.\nQuery the balance of a given owner.\nQuery the received messages that are waiting be picked in …\nReturns the value of …\nQuery new certificate removed from the chain.\nReturns the value of …\nQuery a range of certificates hashes sent from the chain.\nThe round in which the value was certified.\nThe round in which the value was certified.\nSignature value\nOptional signature for the response.\nSignatures on the value hash and round\nSignatures on the value hash and round\nOptionally test that the block height is as expected\nReturns the value of <code>validated_block_certificate</code>, or the …\nA lite certificate for a validated block that justifies …\nGenerated client implementations.\nGenerated server implementations.\nGenerated client implementations.\nGenerated server implementations.\nThe certified value\nWait until all outgoing cross-chain messages from this …\nWait until all outgoing cross-chain messages from this …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\na bincode wrapper around <code>NodeError</code>\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA service run by the Proxy which listens for incoming …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotify a client that there has been an update for a <code>ChainId</code>…\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress requests with the given encoding.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nGenerated trait containing gRPC methods that should be …\nA service run by the Proxy which listens for incoming …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNotify a client that there has been an update for a <code>ChainId</code>…\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress responses with the given encoding, if the client …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nHow to communicate with a validator or a local node.\nEnable decompressing responses.\nReturns the hash of the <code>Certificate</code> that last used a blob.\nAttempt to create a new client by connecting to a given …\nDownloads a blob content.\nDownloads a certificate.\nDownloads a certificate value.\nReturns the argument unchanged.\nRequest the genesis configuration hash of the network this …\nRequest the node’s version info.\nPropose a new block.\nProcess a certificate.\nHandle information queries for this chain.\nProcess a certificate without value.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress requests with the given encoding.\nSubscribe to notifications for a set of Chain Ids.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nServer streaming response type for the Subscribe method.\nGenerated trait containing gRPC methods that should be …\nHow to communicate with a validator or a local node.\nEnable decompressing requests with the given encoding.\nReturns the hash of the <code>Certificate</code> that last used a blob.\nDownloads a blob content.\nDownloads a certificate.\nDownloads a certificate value.\nReturns the argument unchanged.\nRequest the genesis configuration hash of the network this …\nRequest the node’s version info.\nPropose a new block.\nProcess a certificate.\nHandle information queries for this chain.\nProcess a certificate without value.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress responses with the given encoding, if the client …\nSubscribe to notifications for a set of Chain Ids.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nInterface provided by each physical shard (aka “worker”…\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nPropose a new block.\nProcess a certificate.\nHandle information queries for this chain.\nHandle a (trusted!) cross-chain request.\nProcess a certificate without value.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress requests with the given encoding.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nGenerated trait containing gRPC methods that should be …\nInterface provided by each physical shard (aka “worker”…\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nPropose a new block.\nProcess a certificate.\nHandle information queries for this chain.\nHandle a (trusted!) cross-chain request.\nProcess a certificate without value.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCompress responses with the given encoding, if the client …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA pool of transport channels to be used by gRPC.\nObtains a channel for the current address. Either clones …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA default batteries included <code>transport</code> channel.\nError’s that originate from the client or server;\nBalance a list of <code>Endpoint</code>’s.\nBalance a list of <code>Endpoint</code>’s.\nBalance a list of <code>Endpoint</code>’s.\nCreate an <code>Endpoint</code> builder that can create <code>Channel</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Endpoint</code> from shared bytes.\nCreate an <code>Endpoint</code> from a static string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA general node provider which delegates node provision to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nAn encoder/decoder of <code>RpcMessage</code>s for the RPC protocol.\nA pool of (outgoing) data streams.\nSuggested buffer size\nErrors that can arise during transmission or reception of …\nThe handler required to create a service.\nThe result of spawning a server is oneshot channel to …\nA client without an address - serves as a client factory.\nServer implementation for TCP.\nA trait alias for a protocol transport.\nServer implementation for UDP.\nCreates a transport for this protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitiates a new block.\nProcesses a certificate.\nHandles information queries for this chain.\nProcesses a hash certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ConnectionPool</code> for this protocol.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the UDP server implementation.\nRuns the TCP server implementation.\nRuns a server for this protocol and the given message …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")
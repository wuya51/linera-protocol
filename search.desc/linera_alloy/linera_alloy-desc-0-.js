searchState.loadedDescShard("linera_alloy", 0, "Alloy\nInterface with an Ethereum blockchain.\nEthereum JSON-RPC client and types.\nEthereum signer abstraction and implementations.\nLow-level Ethereum JSON-RPC transport abstraction and …\nAn error occurred ABI encoding or decoding.\nA builder for sending a transaction via <code>eth_sendTransaction</code>…\nA trait for decoding the output of a contract function.\nA handle to an Ethereum contract at a specific address.\n<code>contractAddress</code> was not found in the deployment …\n<code>CallBuilder</code> using a <code>Function</code> as the call decoder.\nContains the error value\nError when interacting with contracts.\nAn <code>linera_alloy_provider::EthCall</code> with an abi decoder.\nHelper for managing the event filter before querying or …\nAn event poller.\nA smart contract interface.\nCalled <code>deploy</code> with a transaction that is not a deployment …\nContains the success value\n<code>CallBuilder</code> that does not have a call decoder.\nDynamic contract result type.\n<code>CallBuilder</code> using a <code>SolCall</code> type as the call decoder.\nAn error occurred interacting with a contract over RPC.\nUnknown function referenced.\nUnknown function selector referenced.\nReturns a reference to the contract’s ABI.\nReturns a reference to the contract’s ABI.\nSets the <code>access_list</code> in the transaction to the provided …\nReturns a reference to the contract’s address.\nReturns a new contract instance at <code>address</code>.\nSet the block to use for this call.\nSets the <code>block</code> field for sending the tx to the chain\nCalculates the address that will be created by the …\nQueries the blockchain via an <code>eth_call</code> without submitting …\nQueries the blockchain via an <code>eth_call</code> without submitting …\nReturns the underlying transaction’s ABI-encoded data.\nSets the <code>chain_id</code> field in the transaction to the provided …\nClears the decoder, returning a raw call builder.\nClears the decoder, returning a raw call builder.\nCreate a <code>ContractInstance</code> from this ABI for a contract at …\nABI-decodes the given data according to the function’s …\nDecode the provided ABI encoded bytes as the input of the …\nDecode the provided ABI encoded bytes as the output of the …\nDecodes the output of a contract function using the …\nDecode the provided ABI encoded bytes as the output of the …\nBroadcasts the underlying transaction to the network as a …\nReturns the ABI encoded data (including the selector) for …\nReturns the ABI encoded data (including the selector) for …\nReturns the estimated gas cost for the underlying …\nReturns an <code>Event</code> builder with the provided filter.\nThe filter to use for querying or streaming logs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nReturns a transaction builder for the provided function …\nReturns a transaction builder for the provided function …\nSets the <code>gas</code> field in the transaction to the provided value\nSets the <code>gas_price</code> field in the transaction to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the interface, returning the inner ABI.\nStarts the poller and returns a stream that yields the …\nSets the transaction request to the provided tx kind.\nUses a Legacy transaction instead of an EIP-1559 one to …\nApplies a function to the internal transaction request.\nSets the <code>max_fee_per_blob_gas</code> in the transaction to the …\nSets the <code>max_fee_per_gas</code> in the transaction to the provide …\nSets the <code>max_priority_fee_per_gas</code> in the transaction to …\nCreates a new event with the provided provider and filter.\nCreate a new <code>EthCall</code>.\nCreates a new contract interface from the provided ABI.\nCreates a new contract from the provided address, …\nCreate a new <code>EthCall</code>.\nCreates a new call builder with the provided provider and …\nCreates a new call builder with the provided provider and …\nSets the <code>nonce</code> field in the transaction to the provided …\nSet the state overrides for this call.\nThe inner poller.\nReturns a reference to the contract’s provider.\nThe provider to use for querying or streaming logs.\nThe provider.\nThe provider.\nThe provider.\nThe provider.\nQueries the blockchain for the selected filter and returns …\nQueries the blockchain for the selected filter and returns …\nBroadcasts the underlying transaction to the network.\nSets the contract’s address.\nSets the <code>sidecar</code> field in the transaction to the provided …\nSets the state override set.\nSets the <code>to</code> field in the transaction to the provided …\nSets the <code>value</code> field in the transaction to the provided …\nWatches for events that match the filter.\nClones the provider and returns a new event with the …\nClones the provider and returns a new contract instance …\nClones the provider and returns a new builder with the …\nSwap the decoder for this call.\nSets the decoder to the provided <code>SolCall</code>.\nAddress.\nAn address.\nDynamically sized array.\nA dynamically-sized array of values.\nBoolean.\nA boolean.\nDynamic bytes.\nA dynamic-length byte array.\nWhether the ABI-encoded size is dynamic.\nA decoded dynamic ABI error.\nA decoded dynamic ABI event.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nA dynamic-length sequence.\nA dynamic ABI error.\nA dynamic ABI event.\nA dynamic Solidity type.\nA dynamic Solidity value.\nA dynamic token.\nThe statically-known ABI-encoded size of the type.\nEIP-712 domain attributes used in determining the domain …\nLength mismatch during encoding.\nAn ABI encoder.\nContains the error value\nError when parsing EIP-712 <code>encodeType</code> strings\nProvides error encoding and decoding for the <code>Error</code> type.\nProvides event encoding and decoding for the <code>Event</code> type.\nInvalid event signature.\nFixed-sized array.\nA fixed-size array of values.\nFixed-size bytes, up to 32.\nA fixed-length byte array. The second parameter is the …\nA Fixed Sequence.\nFunction.\nA function pointer.\nProvide ABI encoding and decoding for the <code>Function</code> type.\n<code>hex</code> error.\nSigned Integer.\nA signed integer. The second parameter is the number of …\nProvides ABI encoding and decoding functionality.\nContains the success value\nA packed sequence (string or bytes).\nDynamic ABI result type.\nThe corresponding Rust type.\nThe name of this type in Solidity.\nSelector mismatch during function or error decoding.\nA Solidity type.\n<code>linera_alloy_sol_types</code> error.\nTrait for items that can be resolved to <code>DynSol_____</code>, i.e. …\nString.\nA string.\nThe corresponding ABI token type.\nLength mismatch during event topic decoding.\nTuple.\nA tuple of values.\nType mismatch during encoding or coercion.\n<code>linera_alloy_sol_type_parser</code> error.\nUnsigned Integer.\nAn unsigned integer. The second parameter is the number of …\nThe ABI word type.\nA single word.\nEthereum ABI codec implementation.\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nABI-decodes the given data according to this item’s …\nABI-decodes the given data according to this functions’s …\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nEncode this value into a byte array by wrapping it into a …\nTokenizes and ABI-encodes the given value by wrapping it …\nABI-encodes the given values, prefixed by this item’s …\nABI-encodes the given values, without prefixing the data …\nABI-encodes the given values.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nEncodes the packed value and appends it to the end of a …\nNon-standard Packed Mode ABI encoding.\nEncode this value into a byte array suitable for passing …\nTokenizes and ABI-encodes the given value as function …\nIf this value is a fixed sequence, encode it into a byte …\nTokenizes and ABI-encodes the given value as a sequence.\nCalculate the ABI-encoded size of the data, counting both …\nFallible cast to the contents of a variant DynSolValue {.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast into a dynamic sequence.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast into a fixed sequence.\nFallible cast to a fixed-size array. Any of a <code>FixedArray</code>, …\nFallible cast to the contents of a variant.\nFallible cast into a packed sequence.\nFallible cast to a packed sequence. Any of a String, or a …\nFallible cast to the contents of a variant.\nFallible cast into a sequence, dynamic or fixed-size\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nThe Solidity type. This returns the Solidity type …\nFallible cast to the contents of a variant.\nAttempt to cast to a word.\nFallible cast to a single word. Will succeed for any …\nError body types.\nGet the un-indexed types.\nThe decoded error body.\nThe un-indexed values, in order.\nThe EIP-155 chain ID. The user-agent should refuse signing …\nCoerces a string into a <code>DynSolValue</code> via this type.\nInstantiates a new error with a static str.\nDecode the error from the given data.\nDecode the error from the given data.\nDecodes the given log object according to this item’s …\nDecode the event from the given log info.\nDecodes the given log info according to this item’s …\nDecode the event from the given log info.\nDetokenize this type’s value from the given token.\nDynamic detokenization.\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a DynToken from a dynamic sequence of values.\nInstantiate a DynToken from a fixed sequence of values.\nReturns whether this type is contains a custom struct.\nReturns whether this type is contains a custom struct.\nAppend this data to the head of an in-progress blob via …\nGet the indexed types.\nThe indexed values, in order.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if anonymous.\nTrue if the type is dynamic, else false.\nReturns <code>true</code> if the value is an instance of a dynamically …\nReturns true if the value is a sequence type.\nTrust if this value is encoded as a single word. False …\nReturn true if the type is zero-sized, e.g. <code>()</code> or <code>T[0]</code>\nCheck that the given <code>DynSolValue</code> matches this type.\nCheck that this value has the same type as the given …\nCheck that the given <code>DynSolValue</code>s match these types.\nCheck that these values have the same type as the given …\nCalculate the minimum number of ABI words necessary to …\nCalculate the minimum number of words required to encode …\nThe user readable name of signing domain, i.e. the name of …\nCalculate the nesting depth of this type. Simple types …\nCreates a new error from a selector.\nCreates a new event.\nCreates a new error, without length-checking the body. …\nCreates a new event, without length-checking the indexed, …\nA Solidity panic.\nParses a Solidity type name string into a <code>DynSolType</code>.\nResolve the type into a value.\nRepresents a standard Solidity revert. These are thrown by …\nA disambiguating salt for the protocol. This can be used …\nError selector is the first 4 bytes of the keccak256 hash …\nThe Solidity type name. This returns the Solidity type …\nThe Solidity type name. This returns the Solidity type …\nReturns the name of this type in Solidity.\nAppend this data to the tail of an in-progress blob via …\nThe Solidity type name, as a <code>String</code>.\nTokenize this value into a <code>DynToken</code>.\nTokenizes the given value into this type’s token.\nGet the selector for this event, if any.\nReturns an error if the given token cannot be detokenized …\nReturns <code>true</code> if the given token can be detokenized with …\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nThe contents of the dynamic sequence.\nThe actual type.\nThe actual length.\nThe actual length.\nThe actual selector.\nThe actual signature.\nThe expected type.\nThe expected length.\nThe expected length.\nThe expected selector.\nThe expected signature.\nTrue if the token represents a dynamically-sized type.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nThe ABI encoding of an empty byte array (<code>bytes</code> or <code>string</code>).\nAn ABI encoder.\nTrue for tuples only.\nThe decoder recursion limit. This is currently hardcoded, …\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nABI-decodes a token by wrapping it in a single-element …\nDecode a token from a decoder.\nABI-decodes top-level function args.\nDecodes ABI compliant vector of bytes into vector of …\nABI-decode the token sequence from the encoder.\nABI-encodes a single token.\nABI-encodes a tuple as ABI function params, suitable for …\nABI-encodes a token sequence.\nABI-encode the token sequence into the encoder.\nAppend head words to the encoder.\nCalculate the number of head words.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nAppend head words to the encoder.\nCalculate the number of head words.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\n<code>calldata</code>\nContains the error value\nParser error.\nThe regular expression for a Solidity identifier.\n<code>memory</code>\nContains the success value\nRepresents a function parameter.\nRepresents a list of function parameters.\nParser result\nRoot type.\nA root type, with no array suffixes. Corresponds to a …\nStorage specifier.\n<code>storage</code>\nTuple type.\nA tuple specifier, with no array suffixes. Corresponds to …\nRepresents a type-name. Consists of an identifier and …\nA stem of a Solidity array type. It is either a root type, …\nWhether the parameter indexed.\nReturns <code>true</code> if the given character is valid in a Solidity …\nReturns <code>true</code> if the given character is valid at the start …\nReturns <code>true</code> if the given string is a valid Solidity …\nThe name of the parameter.\nThe parameters.\nArray sizes, in innermost-to-outermost order. If the size …\nThe full span of the tuple specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe type stem, which is either a root type or a tuple type.\nThe storage specifier.\nThe type of the parameter.\nThe internal types.\nGeneric <code>winnow</code> parsing utilities.\nParses a Solidity identifier.\nA JSON ABI item.\nAddress payable.\nA JSON ABI constructor function.\nA JSON ABI <code>Constructor</code>.\nContract.\nRepresents a generic contract’s ABI, bytecode and …\nEnum. Possibly of the form <code>contract.enum</code>.\nA JSON ABI error.\nA JSON ABI <code>Error</code>.\nA JSON ABI event.\nA JSON ABI <code>Event</code>.\nA Solidity Event parameter.\nA JSON ABI fallback function.\nA JSON ABI <code>Fallback</code>.\nA JSON ABI function.\nA JSON ABI <code>Function</code>.\nThe contract internal type. This could be a regular …\nAn iterator over items in an ABI.\nAn iterator over immutable references of items in an ABI.\nThe JSON contract ABI, as specified in the Solidity ABI …\nNonpayable functions promise not to receive Ether.\nOther. Possible of the form <code>contract.other</code>.\nJSON specification of a parameter.\nPayable functions make no promises.\nPure functions promise not to read from or modify the …\nA JSON ABI receive function.\nA JSON ABI <code>Receive</code>.\nA JSON ABI function’s state mutability.\nStruct. Possibly of the form <code>contract.struct</code>.\nConfiguration for <code>JsonAbi::to_sol</code>.\nView functions promise not to modify the state.\nThe contract ABI.\nWhether the event is anonymous. Anonymous events do not …\nFallible conversion to a variant.\nFallible conversion to a variant.\nReturns the string representation of the state mutability …\nFallible conversion to a variant.\nReturns the string representation of the state mutability.\nFallible conversion to a variant.\nThe contract bytecode.\nIf the paramaeter is a compound type (a struct or tuple), …\nIf the paramaeter is a compound type (a struct or tuple), …\nReturns an immutable reference to the constructor.\nThe constructor function.\nReturns a mutable reference to the constructor.\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nReturn a <code>TypeSpecifier</code> describing the contract if this …\nReturns the debug name of the item.\nDeduplicates all functions, errors, and events which have …\nThe contract deployed bytecode.\nThe enum specifier is a <code>TypeSpecifier</code> containing the enum …\nThe enum specifier is a <code>TypeSpecifier</code> containing the enum …\nReturn a <code>TypeSpecifier</code> describing the enum if this type is …\nReturns an immutable reference to the list of all the …\nReturns a mutable reference to the list of all the errors …\nReturns an iterator over immutable references to the …\nThe errors, indexed by the error name.\nReturns an iterator over mutable references to the errors.\nReturns an immutable reference to the list of all the …\nReturns an immutable reference to the event inputs of the …\nReturns a mutable reference to the event inputs of the …\nReturns a mutable reference to the list of all the events …\nReturns an iterator over immutable references to the …\nThe events, indexed by the event name.\nReturns an iterator over mutable references to the events.\nThe fallback function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFormats the canonical type of this parameter into the …\nFormats the canonical type of this parameter into the …\nReturns this function’s full signature including names …\nReturns this event’s full signature …\nReturns an immutable reference to the list of all the …\nReturns a mutable reference to the list of all the …\nReturns an iterator over immutable references to the …\nThe functions, indexed by the function name.\nReturns an iterator over mutable references to the …\nWhether the parameter is indexed. Indexed parameters have …\nReturns an immutable reference to the inputs of the item.\nThe input types of the constructor. May be empty.\nThe input types of the function. May be empty.\nA list of the event’s inputs, in order.\nA list of the error’s components, in order.\nReturns a mutable reference to the inputs of the item.\nThe internal type of the parameter.\nThe internal type of the parameter.\nThe internal type of the parameter. This type represents …\nThe internal type of the parameter. This type represents …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all of the items in the ABI.\nTrue if the instance is a <code>address payable</code> variant.\nTrue if the type is complex (tuple or struct)\nTrue if the type is complex (tuple or struct)\nTrue if the parameter is a contract.\nTrue if the parameter is a contract.\nTrue if the instance is a <code>contract</code> variant.\nReturns true if the ABI contains no items.\nTrue if the parameter is an enum.\nTrue if the parameter is an enum.\nTrue if the instance is a <code>enum</code> variant.\nTrue if the instance is a <code>other</code> variant.\nTrue if the type is simple\nTrue if the type is simple\nTrue if the parameter is a struct.\nTrue if the parameter is a struct.\nTrue if the instance is a <code>struct</code> variant.\nTrue if the parameter is a UDT (user-defined type).\nTrue if the parameter is a UDT (user-defined type).\nReturns an iterator over all of the items in the ABI.\nReturns the total number of items (of any type).\nReturns an immutable reference to the name of the item.\nThe name of the function.\nThe name of the event.\nThe name of the error.\nReturns a mutable reference to the name of the item.\nCreates an empty ABI object.\nValidate and create new instance of Param.\nValidate and create new instance of EventParam\nCreates a new configuration with default settings.\nComputes the number of this event’s indexed topics.\nReturn a <code>TypeSpecifier</code> describing the other if this type …\nReturns an immutable reference to the outputs of the item.\nThe output types of the function. May be empty.\nReturns an immutable reference to the outputs of the item.\nParse a Human-Readable ABI string into a JSON object.\nParses a Solidity constructor string: …\nParses a Solidity function signature string: …\nParses a Solidity event signature string: …\nParses a Solidity error signature string: …\nParses a single Human-Readable ABI string into an ABI item.\nParse a parameter from a Solidity parameter string.\nParse an event parameter from a Solidity parameter string.\nParse a string into an instance, taking ownership of data\nSets whether to print constructors. Default: <code>false</code>.\nThe receive function.\nComputes this error’s selector: …\nComputes this event’s selector: …\nComputes this error’s selector: …\nReturns the canonical type of this parameter.\nReturns the canonical type of this parameter.\nFormats the canonical type of this parameter into the …\nFormats the canonical type of this parameter into the …\n<code>serde</code> implementation for <code>StateMutability</code> for backwards …\nReturns this function’s signature: <code>$name($($inputs),*)</code>.\nReturns this event’s signature: <code>$name($($inputs),*)</code>.\nComputes this error’s signature: <code>$name($($inputs),*)</code>.\nReturns this function’s full signature: …\nReturns the state mutability of the item.\nThe state mutability of the constructor.\nThe state mutability of the fallback function.\nThe state mutability of the receive function.\nThe state mutability of the function.\nReturns a mutable reference to the state mutability of the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nReturn a <code>TypeSpecifier</code> describing the struct if this type …\nFormats this JSON ABI as a Solidity interface.\nFormats this JSON ABI as a Solidity interface into the …\nThe UDT specifier is a <code>TypeSpecifier</code> containing the UDT …\nThe UDT specifier is a <code>TypeSpecifier</code> containing the UDT …\nContract qualifier, if any\nContract qualifier, if any\nContract qualifier, if any\nEnum name\nStruct name\nStruct name\n<code>calldata</code>\nContains the error value\nParser error.\nThe regular expression for a Solidity identifier.\n<code>memory</code>\nContains the success value\nRepresents a function parameter.\nRepresents a list of function parameters.\nParser result\nRoot type.\nA root type, with no array suffixes. Corresponds to a …\nStorage specifier.\n<code>storage</code>\nTuple type.\nA tuple specifier, with no array suffixes. Corresponds to …\nRepresents a type-name. Consists of an identifier and …\nA stem of a Solidity array type. It is either a root type, …\nFallible conversion to a root type\nReturns a string representation of the storage specifier.\nFallible conversion to a tuple type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the parameter indexed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate an invalid identifier string error. Invalid …\nInstantiate an invalid size error. Invalid size errors are …\nInstantiate an invalid type string error. Invalid type …\nReturns true if this type is an array.\nReturns <code>true</code> if the given character is valid in a Solidity …\nReturns <code>true</code> if the given character is valid at the start …\nReturns <code>true</code> if the given string is a valid Solidity …\nThe name of the parameter.\nInstantiate a new error.\nCreate a new root type from a string without checking if it…\nThe parameters.\nParse a root type from a string.\nParse a type stem from a string.\nParse a tuple specifier from a string.\nParse a type specifier from a string.\nParse a parameter from a string.\nParse a parameter list from a string.\nParse a string storage specifier.\nInstantiate a new parser error.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\nArray sizes, in innermost-to-outermost order. If the size …\nThe string underlying this type. The type name.\nReturns the type stem as a string.\nReturns the tuple specifier as a string.\nReturns the type stem as a string.\nThe full span of the tuple specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nReturns the type stem.\nThe type stem, which is either a root type or a tuple type.\nThe storage specifier.\nReturns <code>Ok(())</code> if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nThe type of the parameter.\nThe internal types.\nGeneric <code>winnow</code> parsing utilities.\nParses a Solidity identifier.\nDeserializes a <code>StateMutability</code>, compatible with older JSON …\nSerializes a <code>StateMutability</code> as a single-field struct (…\nTypes for a catch-all network.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA signer capable of signing any transaction for the …\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA signer capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nA receipt response.\nThe JSON body of a transaction receipt.\nSigner error.\nA Transaction builder for a network.\nError type for transaction builders.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGets the EIP-4844 blob sidecar of the transaction.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nInstantiate a custom error.\nGet the default signer.\nGet the default signer address. This address should be used\nEIP-2718 traits.\nGet the sender for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGet the legacy gas price for the transaction.\nReturn true if the signer contains a credential for the …\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nGet the max priority fee per gas for the transaction.\nCreate a new signer with the given signer as the default …\nGet the nonce for the transaction.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nSets the EIP-2930 access list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the signer for the given address.\nGet the recipient for the transaction.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nEncoding trait for EIP-2718 envelopes. These envelopes …\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nDecode an EIP-2718 transaction into a concrete instance\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format.\nReturn the network encoding. For non-legacy items, this is …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nBuilder for launching <code>anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nThe default max priority fee per gas, used in case the …\nThe number of blocks from the past for which the fee …\nThe threshold for base fee below which we use the default …\nThe default percentile of gas premiums that are fetched …\nThe threshold max change/difference (in %) at which we …\nBuilder for launching <code>geth</code>.\nA geth instance. Will close the instance when dropped.\n1 Ether = 1e18 Wei == 0x0de0b6b3a7640000 Wei\nReturns the addresses used to instantiate this instance\nUtilities for launching an Anvil instance.\nAdds an argument to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nCreates an Anvil builder which will execute <code>anvil</code> at the …\nCreates a Geth builder which will execute <code>geth</code> at the …\nSets the port for authenticated RPC connections.\nSets the block-time in seconds which will be used when the …\nSets the block-time which will be used when the <code>geth-cli</code> …\nSets the block-time in sub-seconds which will be used when …\nReturns the chain of the anvil instance\nSets the chain_id the <code>anvil</code> instance will use.\nSets the chain id for the geth instance.\nReturns a reference to the child process.\nReturns a mutable reference to the child process.\nCalculates the address of the Clique consensus address.\nReturns the private key used to configure clique on this …\nReturns the path to this instances’ data directory\nSets the data directory for geth.\nDisable discovery for the geth instance.\nEnable IPC for the geth instance.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint url of this instance\nReturns the HTTP endpoint url of this instance\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the geth instance.\nUtilities for launching a go-ethereum dev-mode instance.\nAllow geth to unlock accounts when rpc apis are open.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IPC endpoint of this instance\nSets the IPC path for the socket.\nReturns whether the node is launched in Clique consensus …\nReturns the private keys used to instantiate this instance\nSets the mnemonic which will be used when the <code>anvil</code> …\nCreates an empty Anvil builder. The default port is 8545. …\nCreates an empty Geth builder.\nReturns the p2p port of this instance\nSets the port which will be used for incoming p2p …\nSets the <code>path</code> to the <code>anvil</code> cli\nSets the <code>path</code> to the <code>geth</code> executable\nReturns the port of this instance\nSets the port which will be used when the <code>anvil</code> instance …\nReturns the port of this instance\nSets the port which will be used when the <code>geth-cli</code> …\nSets the Clique Private Key to the <code>geth</code> executable, which …\nConsumes the builder and spawns <code>anvil</code>.\nConsumes the builder and spawns <code>geth</code>.\nTakes the stderr contained in the child process.\nSets the timeout which will be used when the <code>anvil</code> …\nConsumes the builder and spawns <code>anvil</code>. If spawning fails, …\nConsumes the builder and spawns <code>geth</code>. If spawning fails, …\nBlocks until geth adds the specified peer, using 20s as …\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint url of this instance\nReturns the Websocket endpoint url of this instance\nBuilder for launching <code>anvil</code>.\nErrors that can occur when working with the <code>Anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nAn error occurred while deserializing a private key.\nAn error occurred while parsing a hex string.\nThe child anvil process’s stderr was not captured.\nThe private key could not be parsed.\nA line could not be read from the geth stderr.\nSpawning the anvil process failed.\nTimed out waiting for a message from anvil’s stderr.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe chain id was not set.\nClique private key error\nCould not create the data directory.\nOptions that can be set in dev mode\nConfiguration options that can be set in dev mode.\nEncountered a fatal error.\nGenesis error\nBuilder for launching <code>geth</code>.\nErrors that can occur when working with the <code>Geth</code>.\nA geth instance. Will close the instance when dropped.\nErrors that can occur when working with the <code>GethInstance</code>.\nWhether or not geth is in <code>dev</code> mode and configuration …\nGeth init error\nThe child geth process’s stderr was not captured.\nNo stderr was captured from the child process.\nOptions that cannot be set in dev mode\nConfiguration options that cannot be set in dev mode.\nA line could not be read from the geth stderr.\nA line could not be read from the geth stderr.\nSpawn geth error\nTimed out waiting for a message from geth’s stderr.\nTimed out waiting for geth to start.\nWait error\nThe interval at which the dev chain will mine new blocks.\nWhether or not peer discovery is enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe p2p port to use.\nAn Ethereum address, 20 bytes in length.\nStack-allocated buffer for efficiently computing address …\nError type for address checksum validation.\n16-byte fixed byte-array type.\n20-byte fixed byte-array type.\n32-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\nThe size of this integer type in bits.\nNumber of bits.\nNumber of bits to set per input in Ethereum bloom filter.\nSize of the bloom filter in bits\nSize of the bloom filter in bytes.\nThe size of this integer type in bytes. Note that some …\nThe size of this integer type in bytes. Note that some …\nThe error type that is returned when conversion to or from …\nA block hash.\nA block number.\nEthereum 256 byte bloom filter.\nInput to the <code>Bloom::accrue</code> method.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nChain identifier type (introduced in EIP-155).\nA transaction that creates a contract.\nExplicit V value. May be EIP-155 modified.\nA byte array of fixed length (<code>[u8; N]</code>).\nError converting from bytes.\nError converting hex to bytes.\nAn Ethereum ABI function pointer, 24 bytes in length.\nAlready hashed input.\nError while decoding hex.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nError that occurs when the number is too large or too …\nInvalid ERC-55 checksum.\nInvalid parity.\nk256 error\nSimple <code>Keccak-256</code> hasher.\nThe size of this integer type in 64-bit limbs.\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nBit mask for the last limb.\nThe largest value that can be represented by this integer …\nThe maximum value.\nThe smallest value that can be represented by this integer …\nThe minimum value.\nMinus one (multiplicative inverse) of this type.\nLess than zero.\nNon-EIP155. 27 or 28.\nOne (multiplicative identity) of this type.\nThe parity of the signature, stored as either a V value …\nParity flag. True for odd.\nThe error type that is returned when parsing a signed …\nGreater than or equal to zero.\nRaw input to be hashed.\nError that occurs when an invalid digit is encountered …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nSolidity contract functions are addressed using the first …\nEnum to represent the sign of a 256-bit signed integer.\nAn ECDSA Signature, consisting of V, R, and S.\nErrors in signature parsing or verification.\nSigned integer wrapping a <code>ruint::Uint</code>.\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe <code>to</code> field of a transaction. Either a target address, or …\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\nArray of Zero bytes.\nArray of Zero bytes.\nArray of Zero bytes.\nThe value zero. This is the only value that exists in all …\nArray of Zero bytes.\nZero (additive identity) of this type.\nComputes the absolute value of <code>self</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nAccrues the input into the bloom filter.\nAccrues the input into the bloom filter.\nIngests a log into the bloom filter.\nIngests a raw log into the bloom filter.\nCompute $\\mod{\\mathtt{self} + \\mathtt{rhs}}_…\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nType aliases for common primitive types.\nDouble precision logarithm.\nDouble precision decimal logarithm.\nDouble precision binary logarithm.\nConstruct from double precision binary logarithm.\nArithmetic shift right by <code>rhs</code> bits.\nReturns references to the address and selector of the …\nReturns the sign character.\nConversion to i16 with overflow checking.\nConversion to i32 with overflow checking.\nConversion to i64 with overflow checking.\nConversion to i8 with overflow checking.\nConversion to isize with overflow checking.\nAccess the underlying store as a little-endian bytes.\nAccess the underlying store as a little-endian bytes with …\nAccess the underlying store as a little-endian slice of …\nAccess the underlying store as a mutable little-endian …\nView the array of limbs.\nView the array of limbs.\nAccess the array of limbs.\nReturns a mutable slice containing the entire array. …\nReturns the checksum of a formatted address.\nReturns a slice containing the entire array. Equivalent to …\nReturns the checksum of a formatted address.\nConversion to u16 with overflow checking.\nConversion to u32 with overflow checking.\nConversion to u64 with overflow checking.\nConversion to u8 with overflow checking.\nConversion to usize with overflow checking.\nArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, …\nArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nReturns whether a specific bit is set.\nReturns whether a specific bit is set.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nLength of the number in bits ignoring leading zeros.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nReturn the least number of bits needed to represent the …\nConverts a sequence of string literals containing …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nLength of the number in bytes ignoring leading zeros.\nConverts a sequence of string literals containing …\nGet the chain_id of the V value, if any.\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nComputes <code>self + rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nConstruct a new integer from little-endian a slice of …\nCreates a <code>Signed</code> from an absolute value and a negative …\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nComputes <code>self * rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nCalculates the smallest value greater than or equal to <code>self</code>…\nReturns the smallest power of two greater than or equal to …\nRaises self to the power of <code>exp</code>.\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nComputes <code>self % rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked left shift by <code>rhs</code> bits.\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked right shift by <code>rhs</code> bits.\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nComputes <code>self - rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nConcatenate two <code>FixedBytes</code>.\nCompile-time version of <code>contains</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nEquality at compile-time.\nReturns <code>true</code> if no bits are set.\nReturns true if this bloom filter is a possible superset …\nReturns true if this bloom filter is a possible superset …\nTrue if the bloom filter contains a log with given address …\nTrue if the bloom filter contains a log with given address …\nCreates a new <code>Bytes</code> instance from a slice by copying it.\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nComputes the <code>create</code> address for this address and nonce:\nComputes the <code>CREATE2</code> address of a smart contract as …\nComputes the <code>CREATE2</code> address of a smart contract as …\nReturns a reference to the underlying data.\nThe plain data.\nThe log data.\nReturns a mutable reference to the underlying data.\nComputes <code>self / rhs</code> rounding up.\nCalculates the quotient of Euclidean division of <code>self</code> by …\nComputes <code>self / rhs</code> and <code>self % rhs</code>.\nHash a message according to EIP-191 (version <code>0x01</code>).\nCreates a new empty log.\nCreates a new empty log.\nCreate <code>10**n</code> as this type.\nPad and squeeze the state.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nConverts a sequence of string literals containing …\nCalculates the checksum of an address into the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nReturns the argument unchanged.\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nConstruct a new <code>Uint</code> from the value.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>TxKind::Call</code> with the given address.\nCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Ethereum function from an address and selector.\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConstructs the <code>Signed</code> from digits in the base <code>base</code> in …\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConverts a big-endian byte array of size exactly …\nConverts a big-endian byte array of size exactly …\nCreates a new integer from a big endian slice of bytes.\nConvert from a decimal string.\nConvert from a hex string.\nConverts a little-endian byte array of size exactly …\nConvert from an array in LE format\nCreates a new integer from a little endian slice of bytes.\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a slice of …\nConverts an ECDSA signing key to its corresponding …\nConverts an ECDSA verifying key to its corresponding …\nCoerces an unsigned integer into a signed one. If the …\nInstantiate by hashing public key bytes.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreates a new <code>Bytes</code> from a static slice.\nParse a string into a <code>Uint</code>.\nCreates an Ethereum address from an EVM word’s upper 20 …\nCreates an Ethereum function from an EVM word’s lower 24 …\nCompute the greatest common divisor of two <code>Uint</code>s.\n⚠️ Compute the greatest common divisor and the Bézout …\nCalculate the seal hash, this may be slow.\nMacro for converting sequence of string literals …\nGet the inner item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nConsume the input, converting it to the hash.\nReturns the backing buffer.\nUnseal the inner item, discarding the hash.\nConvert to a array of limbs.\nConvert to a array of limbs.\nDecompose into parts.\nReturns the signed integer as a unsigned integer. If the …\nSplits a Signed into its absolute value and negative flag.\nLeft-pads the address to 32 bytes (EVM word size).\nRight-pads the function to 32 bytes (EVM word size).\nCompute $\\mod{\\mathtt{self}^{-1}}_{\\mathtt{modulus}}$.\nComputes the inverse modulo $2^{\\mathtt{BITS}}$ of <code>self</code>, …\nInverts the parity.\nReturns true if the transaction is a contract call.\nReturns true if the transaction is a contract creation.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns whether the sign is negative.\nDetermines if the integer is odd.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns whether the sign is positive.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nTrue if valid, false otherwise.\nReturns <code>true</code> if no bits are set.\nReturns true if the value is zero.\nReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is …\nSimple interface to the <code>Keccak-256</code> hash function.\nCompute the least common multiple of two <code>Uint</code>s or <code>None</code> if …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nReturns the size of this array in bytes.\nReturns the size of this array in bytes.\nReturns the size of this byte array (<code>N</code>).\nReturns the size of this array in bytes.\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nSpecialised Bloom filter that sets three bits out of 2048, …\n<code>m3_2048</code> but with a pre-hashed input.\nReturns the most significant 64 bits of the number and the …\nCompute $\\mod{\\mathtt{self} ⋅ \\mathtt{rhs}}_…\nMontgomery multiplication.\nWraps the given byte array in this type.\nCreates a new buffer.\nWraps the given byte array in this type.\nWraps the given byte array in <code>FixedBytes</code>.\nWraps the given byte array in this type.\nCreates a new empty <code>Bytes</code>.\nCreates a new log.\nCreates a new log.\nCreates a new <code>Keccak256</code> hasher.\nCreates a new log from an deserialized event.\nCreates a new log.\nCreates a new log, without length-checking. This allows …\nCreates a new log.\nInstantiate without performing the hash. This should be …\nCalculates the smallest value greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nComputes the absolute value of <code>self</code>.\nCalculates $\\mod{\\mathtt{self} + \\mathtt{rhs}}_{2^{BITS}}$.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> / <code>rhs</code>\nCalculates the quotient of Euclidean division …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nCreates a <code>Signed</code> from a sign and an absolute value. …\nCalculates the multiplication of self and rhs.\nCalculates <code>self</code> * <code>rhs</code>\nCalculates $\\mod{-\\mathtt{self}}_{2^{BITS}}$.\nNegates self, overflowing if this is equal to the minimum …\nRaises self to the power of <code>exp</code> and if the result would …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates <code>self</code> % <code>rhs</code>\nOverflowing Euclidean remainder. Calculates …\nLeft shift by <code>rhs</code> bits with overflow detection.\nShifts self left by <code>rhs</code> bits.\nRight shift by <code>rhs</code> bits with underflow detection.\nShifts self right by <code>rhs</code> bits.\nCalculates $\\mod{\\mathtt{self} - \\mathtt{rhs}}_{2^{BITS}}$.\nCalculates <code>self</code> - <code>rhs</code>\nParse an Ethereum address, verifying its EIP-55 checksum.\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCompute $\\mod{\\mathtt{self}^{\\mathtt{rhs}}}_…\nDetermines the recovery ID.\n⚠️ Compute $\\mod{\\mathtt{self}}_{\\mathtt{modulus}}$.\nCalculates the least nonnegative remainder of …\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new <code>FixedBytes</code> where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nReserialize the data.\nReverses the order of bits in the integer. The least …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nComputes the floor of the <code>degree</code>-th root of the number.\nShifts the bits to the left by a specified amount, <code>rhs</code>, …\nShifts the bits to the right by a specified amount, <code>rhs</code>, …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nComputes <code>self + rhs</code>, saturating at the numeric bounds …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, saturating at the numeric bounds …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nRaises self to the power of <code>exp</code>, saturating on overflow.\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating left shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, saturating at the numeric bounds …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nExamples\nGet the hash.\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nSets a specific bit to a value.\nSet the topic list, truncating to 4 topics.\nSet the topic list, without length-checking. This allows …\nReturns the sign of self.\nCalculates a heuristic for the in-memory size of this …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nConsumes the log data, returning the topic list and the …\nDecompose into parts. Alias for <code>Self::into_parts</code>.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nConverts an EIP-155 V value to a non-EIP-155 V value.\nPanics\nReturns the address of the contract that will be called or …\nReturns the address and selector of the function.\nReturns an iterator over the base <code>base</code> digits of the …\nReturns an iterator over the base <code>base</code> digits of the …\nConverts the <code>Uint</code> to a big-endian byte array of size …\nConverts <code>self</code> to a big-endian byte array of size exactly …\nConverts the <code>Uint</code> to a big-endian byte vector with leading …\nConverts the <code>Uint</code> to a big-endian byte vector of size …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into …\nConvert to a decimal string.\nApplies EIP-155.\nConvert to a hex string.\nConverts the <code>Uint</code> to a little-endian byte array of size …\nConverts <code>self</code> to a little-endian byte array of size exactly\nConverts the <code>Uint</code> to a little-endian byte vector with …\nConverts the <code>Uint</code> to a little-endian byte vector of size …\nConvert to a parity bool, dropping any V information.\nReturns the checksum of a formatted address.\nReturn the corresponding u64 V value.\nGet the topic list.\nGet the topic list, mutably. This gives access to the …\nGet a mutable reference to the topic list. This allows …\nReturns the number of trailing ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of leading zeros in the binary …\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nTries to create a <code>Vec</code> of <code>n</code> elements, each initialized to …\nCompute the two’s complement of this number.\nShortcut for <code>val.try_into().unwrap()</code>.\nShortcut for <code>self.try_into().unwrap()</code>.\nUnseal the inner item, discarding the hash. Alias for …\nComputes the absolute value of <code>self</code> without any wrapping …\nAbsorbs additional input. Can be called multiple times.\nCommon Ethereum utilities.\nCalculates the complete product <code>self * rhs</code> without the …\nApplies EIP-155 with the given chain ID.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nWrap a fixed-size byte array in a newtype, delegating all …\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nComputes <code>self + rhs</code>, wrapping around at the boundary of …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nComputes <code>self / rhs</code> rounding down.\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, wrapping around at the boundary of …\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, wrapping around at the boundary of the …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nComputes <code>self % rhs</code>.\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nLeft shift by <code>rhs</code> bits.\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nRight shift by <code>rhs</code> bits.\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nComputes <code>self - rhs</code>, wrapping around at the boundary of …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nExamples\nReturn the y-parity as a boolean.\nReturn the y-parity as 0 or 1\nReturn the y-parity byte as 27 or 28, in the case of a …\n128-byte fixed byte-array type.\n16-byte fixed byte-array type.\n2-byte fixed byte-array type.\n24-byte fixed byte-array type.\n256-byte fixed byte-array type.\n28-byte fixed byte-array type.\n32-byte fixed byte-array type.\n4-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\n1-byte fixed byte-array type.\n12-byte fixed byte-array type.\nA block hash.\nA block number.\nChain identifier type (introduced in EIP-155).\nThe 0-bit signed integer type, capable of representing 0.\nThe 1-bit signed integer type, capable of representing 0 …\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n192-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n512-bit signed integer type, consisting of 8, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nSolidity contract functions are addressed using the first …\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nA correctly sized stack allocation for the formatted bytes …\nThe associated error which can be returned from parsing.\nTypes that can be decoded from a hex string.\nThe error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …\nThe table of lowercase characters used for hex encoding.\nThe table of uppercase characters used for hex encoding.\nThe lookup table of hex byte to value, used for hex …\nAn invalid character was found. Valid ones are: <code>0...9</code>, …\nIf the hex string is decoded into a fixed sized container, …\nThe length of the buffer in bytes.\nRepresents an invalid value in the <code>HEX_DECODE_LUT</code> table.\nA hex string’s length needs to be even, as two digits …\nEncoding values as hex string.\nEncoding values as hex string.\nReturns a reference the underlying stack-allocated byte …\nReturns a reference to the underlying bytes.\nReturns a mutable reference the underlying stack-allocated …\nReturns a mutable reference to the underlying bytes.\nReturns an unsafe mutable pointer to the slice’s buffer.\nReturns a mutable reference to the underlying bytes casted …\nReturns a raw pointer to the buffer.\nReturns a reference to the underlying bytes casted to a …\nReturns a mutable reference to the underlying buffer, …\nReturns <code>true</code> if the input is a valid hex string and can be …\nReturns <code>true</code> if the input is a valid hex string.\nReturns <code>true</code> if the input is a valid hex string and can be …\nReturns <code>true</code> if the input is a valid hex string.\nDecode a hex string into a fixed-length byte-array.\nEncodes <code>input</code> as a hex string into a <code>Buffer</code>.\nPrint an array of bytes into this buffer.\nPrint an array of bytes into this buffer.\nDecodes a hex string into raw bytes.\nDecode a hex string into a fixed-length byte-array.\nDecode a hex string into a mutable bytes slice.\nDeserializes a hex string into raw bytes.\nEncodes <code>data</code> as a hex string using lowercase characters.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result …\nEncode the hex strict representing <code>self</code> into the result …\nEncodes <code>data</code> as a prefixed hex string using lowercase …\nEncodes <code>input</code> as a hex string using lowercase characters …\nEncodes <code>input</code> as a hex string using uppercase characters …\nEncodes <code>data</code> as a hex string using uppercase characters.\nEncodes <code>data</code> as a prefixed hex string using uppercase …\nPrint an array of bytes into this buffer and return a …\nPrint a slice of bytes into this buffer and return a …\nPrint a slice of bytes into this buffer and return a …\nPrint an array of bytes into this buffer and return a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance of type <code>Self</code> from the given hex …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a cheap operation; you don’t need to worry about …\nHex encoding with <code>serde</code>.\nSerializes <code>data</code> as hex string using lowercase characters.\nSerializes <code>data</code> as hex string using uppercase characters.\nCopies <code>self</code> into a new owned <code>String</code>.\nCopies <code>self</code> into a new <code>Vec</code>.\nModified from <code>hex</code>.\nDeserializes a hex string into raw bytes.\nSerializes <code>data</code> as hex string using lowercase characters.\nSerializes <code>data</code> as hex string using uppercase characters.\nThe associated error which can be returned from parsing.\nTypes that can be decoded from a hex string.\nEncoding values as hex string.\nEncoding values as hex string.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result …\nEncode the hex strict representing <code>self</code> into the result …\nCreates an instance of type <code>Self</code> from the given hex …\nMacro for converting sequence of string literals …\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nError for <code>from_base_le</code> and <code>from_base_be</code>.\nError from <code>Uint::from_base_be</code>.\nA newtype wrapper around <code>Uint</code> that restricts operations to …\nError for <code>TryFrom&lt;Uint&gt;</code>.\nThe requested number base <code>.0</code> is less than two.\nThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>…\nInvalid digit in string.\nInvalid radix, up to base 64 is supported.\nThe size of this integer type in 64-bit limbs.\n‘Not a number’ (NaN) can not be represented as Uint\nNumber is equal or larger than the target field modulus.\nThe value is too large to fit the target type.\nThe Uint value is too large for the target type.\nError for <code>from_str_radix</code>.\nError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.\nError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\nNegative values can not be represented as Uint.\nValue is too large to fit the Uint.\nThe value zero. This is the only value that exists in all …\n⚠️ Collection of bignum algorithms.\nType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.\nSee <code>Uint::as_le_bytes</code> for documentation.\nSee <code>Uint::as_limbs</code> for documentation.\nSee <code>Uint::as_limbs_mut</code> for documentation.\nReturns a reference to the inner Uint.\nReturns a mutable reference to the inner Uint.\nSee <code>Uint::checked_shl</code> for documentation.\nSee <code>Uint::checked_shr</code> for documentation.\nCompile time for loops with a <code>const</code> variable for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>Uint::from_be_bytes</code> for documentation.\nSee <code>Uint::from_le_bytes</code> for documentation.\nSee <code>Uint::from_limbs</code> for documentation.\nSee <code>Uint::from_str_radix</code> for documentation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner Uint.\nSee <code>Uint::leading_ones</code> for documentation.\nSee <code>Uint::leading_zeros</code> for documentation.\nMask to apply to the highest limb to get the correct …\nNumber of bytes required to represent the given number of …\nNumber of <code>u64</code> limbs required to represent the given number …\nSee <code>Uint::overflowing_shl</code> for documentation.\nSee <code>Uint::overflowing_shr</code> for documentation.\nSee <code>Uint::reverse_bits</code> for documentation.\nSee <code>Uint::rotate_left</code> for documentation.\nSee <code>Uint::rotate_right</code> for documentation.\nSupport for external crates.\nSee <code>Uint::to_be_bytes</code> for documentation.\nSee <code>Uint::to_be_bytes_vec</code> for documentation.\nSee <code>Uint::to_le_bytes</code> for documentation.\nSee <code>Uint::trailing_ones</code> for documentation.\nSee <code>Uint::trailing_zeros</code> for documentation.\nSee <code>Uint::try_from_be_slice</code> for documentation.\nSee <code>Uint::try_from_le_slice</code> for documentation.\nSee <code>Uint::wrapping_shl</code> for documentation.\nSee <code>Uint::wrapping_shr</code> for documentation.\n⚠️ Lehmer update matrix\n<code>lhs += rhs + carry</code>\nComputes <code>lhs += a</code> and returns the carry.\n⚠️ Computes <code>result += a * b</code> and checks for overflow.\nComputes wrapping <code>lhs += a * b</code> when all arguments are the …\nComputes <code>lhs += a * b</code> and returns the carry.\nApplies the matrix to a <code>Uint</code>.\nApplies the matrix to a <code>u128</code>.\nCompare two <code>u64</code> slices in reverse order.\nReturns the matrix product <code>self * other</code>.\n⚠️ Collection of division algorithms.\n⚠️ Division with remainder.\nCompute a Lehmer update matrix from two <code>Uint</code>s.\nReturns the argument unchanged.\nCompute the Lehmer update matrix in full 64 bit precision.\nCompute the Lehmer update matrix for small values.\nCompute the largest valid Lehmer update matrix for a …\n⚠️ Lehmer’s GCD algorithms.\n⚠️ Lehmer’s extended GCD.\nCalls <code>U::from(self)</code>.\n⚠️ Modular inversion using extended GCD.\nComputes <code>lhs *= a</code> and returns the carry.\nSee Handbook of Applied Cryptography, Algorithm 14.32, p. …\n<code>lhs -= rhs - borrow</code>\nComputes <code>lhs -= a * b</code> and returns the borrow.\n⚠️ Division with remainder.\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Computes the quotient of a 192 bits divided by a …\nTODO: This implementation is off by one.\n⚠️ Compute single limb division.\n⚠️ Compute single limb normalized division.\n⚠️ Compute double limb division.\n⚠️ Compute double limb normalized division.\n⚠️ In-place Knuth long division with implicit …\n⚠️ In-place Knuth normalized long division with …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - …\n<code>Bits</code> for <code>0</code> bits.\n<code>Bits</code> for <code>1</code> bits.\n<code>Bits</code> for <code>1024</code> bits.\n<code>Bits</code> for <code>128</code> bits.\n<code>Bits</code> for <code>16</code> bits.\n<code>Bits</code> for <code>160</code> bits.\n<code>Bits</code> for <code>192</code> bits.\n<code>Bits</code> for <code>2048</code> bits.\n<code>Bits</code> for <code>256</code> bits.\n<code>Bits</code> for <code>32</code> bits.\n<code>Bits</code> for <code>320</code> bits.\n<code>Bits</code> for <code>384</code> bits.\n<code>Bits</code> for <code>4096</code> bits.\n<code>Bits</code> for <code>448</code> bits.\n<code>Bits</code> for <code>512</code> bits.\n<code>Bits</code> for <code>64</code> bits.\n<code>Bits</code> for <code>768</code> bits.\n<code>Bits</code> for <code>8</code> bits.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>768</code> bits.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nThe prefix used for hashing messages according to EIP-191.\nEther is equivalent to 1e18 wei.\nGwei is equivalent to 1e9 wei.\nSigned 256-bit integer.\nThe provided units are not recognized.\nKwei is equivalent to 1e3 wei.\nSimple <code>Keccak-256</code> hasher.\nThe largest unit.\nThe smallest unit.\nMwei is equivalent to 1e6 wei.\nPwei is equivalent to 1e15 wei.\nOverflow when parsing a signed number.\nThis enum holds the numeric types that a possible to be …\nTwei is equivalent to 1e12 wei.\nUnsigned 256-bit integer.\nEthereum unit. Always less than <code>77</code>.\nError type for <code>Unit</code>-related operations.\nWei is equivalent to 1 wei.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric value of the unit.\nReturns the absolute value of the number.\nReturns the signed value of the number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is negative.\nReturns <code>true</code> if the number is positive.\nReturns <code>true</code> if the number is signed.\nReturns <code>true</code> if the number is unsigned.\nReturns <code>true</code> if the number is zero.\nSimple interface to the <code>Keccak-256</code> hash function.\nCreates a new <code>Unit</code> instance, checking for overflow.\nCreates a new <code>Unit</code> instance.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nParses a decimal number and multiplies it with 10^units.\nTries to collect the elements of an iterator into a <code>Vec</code>.\nTries to create a <code>Vec</code> with the given capacity.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nA builder for an <code>&quot;eth_call&quot;</code> request. This type is returned …\nA task that polls the provider with <code>eth_getFilterChanges</code>, …\nThe network header type.\nThe JSON body of a header response.\nAn identity layer that does nothing.\nCaptures type info for network-specific RPC …\nRepresents a transaction that is yet to be confirmed a …\nA builder for configuring a pending transaction watcher.\nConfiguration for watching a pending transaction.\nProvider is parameterized with a network and a transport. …\nThe provider constructed by this layer.\nA builder for constructing a <code>Provider</code> from various layers.\nA layering abstraction in the vein of <code>tower::Layer</code>\nThe network receipt envelope type.\nThe JSON body of a transaction receipt.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nThe root provider manages the RPC client and the …\nAn <code>RpcCall</code> that takes an optional <code>BlockId</code> parameter. By …\nThe underlying <code>NetworkSigner</code> type contained in this stack.\nA stack of two providers.\nList of trace calls for use with <code>Provider::trace_call_many</code>\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nThe network transaction type enum.\nAn enum over the various transaction types.\nTrait for Providers, Fill stacks, etc, which contain …\nSet the block to use for this call.\nSet the block id.\nBoxes the inner client.\nExecute a smart contract call with a transaction request …\nReturns the RPC client used to send requests.\nConnects to a boxed transport with the given connector.\nCreates a new root provider from the provided connection …\nCreate an EIP-2930 access list.\nGet the default signer address.\nSet the block id to “earliest”.\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nEstimate the gas needed for a transaction.\nExtended APIs for the provider module.\nAdd a chain ID filler to the stack being built. The filler …\nAdd a transaction filler to the stack being built. …\nTransaction Fillers\nSet the block id to “finalized”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pending transaction builder from the given …\nRetrieves account information (Account) for the given …\nGets the accounts in the remote node. This is usually …\nGets the balance of the account at the specified tag, …\nReturns the base fee per blob gas (blob gas price) in wei.\nGets a block by either its hash, tag, or number, with full …\nGets a block by its BlockHash, with full transactions or …\nGet a block by its number.\nGet the last block number available.\nGets the selected block BlockNumberOrTag receipts.\nGets the chain ID.\nGets the client version of the chain client().\nGets the bytecode located at the corresponding Address.\nReturns a collection of historical gas information …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nGets the current gas price in wei.\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nGets the network ID. Same as <code>eth_chainId</code>.\nGet the account and storage values of the specified …\nWaits for the transaction to confirm with the given number …\nGets the specified storage value from Address.\nGets a transaction by its TxHash.\nGets the transaction count (AKA “nonce”) of the …\nGets a transaction receipt if it exists, by its TxHash.\nGets an uncle block through the tag BlockId and index u64.\nGets the number of uncles for the block specified by the …\nCheck if the signer can sign for the given address.\nSet the block id to a specific hash, without requiring the …\nSet the block id to a specific hash and require the hash …\nReturns the inner configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this builder, returning the inner configuration.\nSet the block id to “latest”.\nWrap the given provider in the layer’s provider.\nAdd a layer to the stack being built. This is similar to …\nUseful layer implementations for the provider. Currently …\nMap the response.\nChange the network.\nCreates a new root provider from the given RPC client.\nCreate a new <code>Stack</code>.\nCreate a new <code>ProviderBuilder</code>.\nCreates a new pending transaction builder.\nCreate a new watch for a transaction.\nCreate a new CallBuilder.\nCreate a new <code>RpcWithBlock</code> instance.\nNotify the provider that we are interested in new blocks.\nNotify the provider that we are interested in logs that …\nCreates a new HTTP root provider from the given URL.\nNotify the provider that we are interested in new pending …\nSet the block id to a specific height.\nBuild this provider with anvil, using an Reqwest HTTP …\nBuild this provider with anvil, using an Reqwest HTTP …\nBuild this provider with anvil, using an Reqwest HTTP …\nBuild this provider with anvil, using an Reqwest HTTP …\nFinish the layer stack by providing a connection string …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a root <code>Provider</code>, …\nSet the state overrides for this call.\nSet the block id to “pending”.\nReturns the provider.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request with type-erased parameters …\nRegisters the watching configuration with the provider.\nReturns the number of confirmations to wait for.\nReturns the number of confirmations to wait for.\nReturns the root provider.\nSet the block id to “safe”.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a transaction to the network.\nSet the bytecode of a given account.\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nGet a reference to the underlying signer.\nAdd a signer layer to the stack being built.\nGet an iterator of all signer addresses. Note that because …\nGet a mutable reference to the underlying signer.\nConsumes this builder, returning the provider and the …\nGets syncing info.\nReturns the timeout.\nReturns the timeout.\nTrace all transactions in the given block.\nExecutes the given transaction and returns a number of …\nTraces multiple transactions on top of the same block, …\nParity trace transaction.\nReturns this transaction’s hash.\nReturns the transaction hash.\nReturns the transaction hash.\nProvider-related utilities.\nWaits for the transaction to confirm with the given number …\nWatch for new blocks by polling the provider with …\nWatch for new pending transaction bodies by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for the confirmation of a single pending transaction …\nWatch for new pending transaction by polling the provider …\nReturns a <code>Weak</code> RPC client used to send requests.\nAdd a chain layer to the stack being built. The layer will …\nAdd a specific chain ID to the stack being built. The …\nAdd gas estimation to the stack being built.\nAdd nonce management to the stack being built.\nWraps this configuration with a provider to expose …\nAdd preconfigured set of layers handling gas estimation, …\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nAdmin namespace rpc interface that gives access to several …\nDebug namespace rpc interface that gives access to several …\nGeth only Txpool namespace rpc interface.\nRequests adding the given peer, returning a boolean …\nRequests adding the given peer as a trusted peer, which …\nReturn a full stack trace of all invoked opcodes of all …\nSame as <code>debug_trace_block_by_hash</code> but block is specified …\nExecutes the given transaction without publishing it like …\nSame as <code>debug_trace_call</code> but it used to run and trace …\nReruns the transaction specified by the hash and returns …\nReturns general information about the node as well as …\nReturns the list of peers currently connected to the node.\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning a boolean …\nReturns the content of the transaction pool.\nReturns the content of the transaction pool filtered by a …\nReturns a textual summary of each transaction in the pool.\nReturns the current status of the transaction pool.\nA <code>TxFiller</code> that populates the chain ID of a transaction.\nA <code>Provider</code> that applies one or more <code>TxFiller</code>s.\nThe properties that this filler retrieves from the RPC. to …\nThe control flow for a filler.\nThe filler has filled in all properties that it can fill.\nA <code>TxFiller</code> that populates gas related fields in …\nA layer that can fill in a <code>TransactionRequest</code> with …\nThe filler is missing a required property.\nA <code>TxFiller</code> that fills nonces on transactions.\nThe filler is ready to fill in the transaction request.\nA layer that signs transactions locally.\nA layer that can fill in a <code>TransactionRequest</code> with …\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nReturns <code>true</code> if the filler is should continnue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new signing layer with the given signer.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nReturns <code>true</code> if the filler is ready to fill in the …\nGet a reference to the right filler.\nReturn a control-flow enum indicating whether the filler …\nA layer that wraps an <code>Anvil</code> config. The config will be used\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nA layer that wraps a <code>NamedChain</code>. The layer will be used to …\nGet the chain’s average blocktime, if applicable.\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nGet the instance ws endpoint.\nTypes for a catch-all network.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA signer capable of signing any transaction for the …\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA signer capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nA receipt response.\nThe JSON body of a transaction receipt.\nSigner error.\nA Transaction builder for a network.\nError type for transaction builders.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGets the EIP-4844 blob sidecar of the transaction.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nGet the default signer address. This address should be used\nEIP-2718 traits.\nGet the sender for the transaction.\nGet the gas limit for the transaction.\nGet the legacy gas price for the transaction.\nReturn true if the signer contains a credential for the …\nGet the input data for the transaction.\nSet the <code>to</code> field to a create call.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nGet the max priority fee per gas for the transaction.\nGet the nonce for the transaction.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nSets the EIP-2930 access list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the recipient for the transaction.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nEncoding trait for EIP-2718 envelopes. These envelopes …\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nDecode an EIP-2718 transaction into a concrete instance\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format.\nReturn the network encoding. For non-legacy items, this is …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nReturn type of EIP1155 gas fee estimator.\nAn estimator function for EIP1559 fees.\nThe default EIP-1559 fee estimator which is based on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base fee per gas.\nThe max priority fee per gas.\nEthereum JSON-RPC type definitions.\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSONRPC-2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized. The request …\nAn item received over an Ethereum pubsub transport. …\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSONRPC-2.0 response object containing a <code>ResponsePayload</code>.\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSONRPC-2.0 response payload.\nAn RPC error.\nAn object that can be used as a JSON-RPC parameter and …\nAn object that can be used as a JSON-RPC parameter.\nThe result of a JSON-RPC request.\nAn object that can be used as a JSON-RPC return value.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nReturns the ErrorPayload if the response is an error.\nFallible conversion to the error object.\nReturns the ID as a number, if it is one.\nReturns the ID as a string, if it is one.\nFallible conversion to the successful payload.\nSerialize the request parameters as a boxed <code>RawValue</code>.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nConsumes the serialized request, returning the underlying …\nAttempt to deserialize the data field.\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the request ID.\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response is an error.\nReturns <code>true</code> if the ID is <code>None</code>.\nReturns <code>true</code> if the ID is a number.\nReturns <code>true</code> if the ID is a string.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response is a success.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nThe error message (if any).\nThe error message (if any).\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns the request method.\nThe method name.\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nThe response payload.\nThe response payload.\nPush a request into the packet.\nFind responses by a list of IDs.\nThe notification payload.\nSerialize the packet as a boxed <code>RawValue</code>.\nSerialize the request, including the request parameters.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nThe subscription ID.\nGet the request IDs of all subscription requests in the …\nTake the serialized request, consuming the …\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the params, borrowing from the …\nDeserialize the error’s <code>data</code> field, borrowing from the …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the params.\nAttempt to deserialize the success payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nCreate a new empty packet with the given capacity.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nAccount information.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nA vector of values\nThe hash of the block if the filter only targets a single …\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nBlock representation\nError that can occur when converting other types to blocks\nEither a block hash <em>or</em> a block number\nA Block Identifier. …\nBlock number and hash.\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nAn Iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of Block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nEmpty result.\nCallResponse for eth_callMany\nExcess blob gas integer conversion error\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nGas limit integer conversion error\nGas used integer conversion error\nA block hash and an optional bool that defines if it’s …\nA block hash\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nBlock header representation.\nPeer count as hex\nA hex encoded or decimal index that’s intended to be …\nInfo when syncing\nA transaction failed sender recovery\nInvalid signature\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nThis includes general information about a running node, …\nNot syncing\nNumeric id\nBlock by number from canon chain\nA block number\nA block number\nPeer count as integer\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nNumber of peers connected to.\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nValue representation with additional info\nA Block representation that allows to include additional …\nHeader representation with additional info.\nA raw block failed to decode\nA block hash which may have a boolean requireCanonical …\nSafe head block\nContainer type for all signature fields in RPC\n<code>linera_alloy_primitives::SignatureError</code>.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\nA single value\nUnion type for representing a single value or a vector of …\nWrapper allowing to catch all fields missing on the inner …\nWithdrawal represents a validator withdrawal from the …\nThe result of an <code>eth_getWork</code> request\nSets the access list for the transaction.\nGet the EIP-2930 access list for the transaction.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nThe account proof.\nNumber of active peers\nAdds an address to the access list and returns <code>true</code> if the …\nSets the inner filter object\nGetter for the address field. Shortcut for …\nAccount addresses that would be loaded at the start of …\nTarget address for withdrawn ether.\nThe account address.\naddress of the recovered account\nAddress\nContract that emitted this log.\nReturns the BloomFilter for the given address\nTypes for the admin api\nValue of the withdrawal in gwei.\nReturn the withdrawal amount in wei.\nReturns the block hash if it is BlockId::Hash\nFallibly cast to a slice of hashes.\nReturns the numeric block number if explicitly set\nReturns the block number if it is a …\nReturns the range (<code>fromBlock</code>, <code>toBlock</code>) if this is a range …\nReturn the inner receipt. Currently this is infallible, …\nReturn the inner receipt with bloom. Currently this is …\nFallibly cast to a slice of transactions.\nPins the block hash for the filter\nThe account balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nBase fee per unit of gas (if past London)\nAn array of block base fees per gas. This includes the …\nReturns the blob fee for <em>this</em> block according to the …\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nReturn the receipt’s bloom.\nCalculates <code>Log</code>’s bloom filter. this is slow operation …\nBuild an <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculates the address that will be created by the …\nCapabilities\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a legacy …\nNumber of connected peers\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nContract address created, or None if not a deployment.\nConverts <code>self</code> into <code>Hashes</code>.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nGas used\nCurrent block\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nArbitrary length data.\nTransaction data\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nDeserializes a boolean value into …\nDifficulty\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nCreates a new “earliest” tag instance.\nThe price paid post-execution by the transaction (i.e. …\nThe enode URL of the connected node.\nThe ENR of the running client.\nReturns the value if present, otherwise returns the error.\nCommonly used errors for the <code>eth_</code> namespace.\neth_call output (if error)\nEthereum protocol information\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nExcess blob gas\nExtra data\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nReturns the configured fee cap, if any.\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nReturns <code>true</code> if the log matches the given topics\nCreates a new “finalized” tag instance.\nBlock no this transaction was first seen.\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsume the structure, returning only the receipt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nSets the from block number\nReturns an RpcBlockHash from a B256.\nThe gas limit for the transaction.\nGas amount\nSets the gas limit for the transaction.\nGas Limit\nOverrides the gas limit of the block.\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas Used\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>toBlock</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nReturns the <code>fromBlock</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns true if at least one topic is set\nCreate a new block hash instance.\nBlock hash\nBlock hash\nHash of the block\nHash of the transaction.\nHash\nCreate a new block hash instance that requires the block …\nReturns an iterator over references to the transaction …\nReturns an iterator over mutable references to the …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nUnique node identifier.\nPublic node id\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nStandard value.\nStandard value.\nThe inner struct.\nThe receipt envelope.\nStandard value.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner struct.\nGet the length of the inner receipt in the 2718 encoding.\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Self</code> and returns <code>BlockNumber</code>, <code>BlockHash</code>\nConsume the structure, returning the receipt and the bloom …\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nConsumes the type and returns the optional input data.\nThe IP address of the connected node.\nReturns <code>true</code> if it’s “earliest”\nReturns true if this is BlockNumberOrTag::Earliest\nWhether the block has no transactions.\nReturns whether the filter is empty\nReturns <code>true</code> if it’s “finalized”\nReturns true if this is BlockNumberOrTag::Finalized\nReturns true if the enum variant is used for full …\nReturns true if this is BlockId::Hash\nCheck if the enum variant is used for hashes.\nReturns <code>true</code> if it’s “latest”\nReturns true if this is BlockNumberOrTag::Latest\nReturns whether this is a legacy receipt (type 0)\nReturns <code>true</code> if a numeric block number is set\nReturns true if this is BlockNumberOrTag::Number\nReturns true if this is a range filter and has a from block\nReturns <code>true</code> if it’s “pending”\nReturns true if this is BlockNumberOrTag::Pending\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns <code>true</code> if it’s “safe”\nReturns true if this is BlockNumberOrTag::Safe\nReturn true if the transaction was successful.\nReturn true if the transaction was successful.\nReturns true if the enum variant is used for an uncle …\nIf the signature contains chain replay protection, And the …\nReturns an iterator over the transaction hashes.\nReturns an iterator over the underlying HashSet. Values …\nStorage key.\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nCreates a new “latest” tag instance.\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the number of transactions.\nThe node’s listening address.\nLocal endpoint address\nDecode the log data into a typed log.\nLog Index in Block\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nReturn the receipt logs.\nLog send from contracts.\nCalculate receipt logs bloom.\nReturn the receipt’s bloom.\nThe bloom filter.\nLogs bloom\nMaps the inner receipt value of this receipt.\nReturns whether the given bloom matches the list of Blooms …\nReturns whether the given value matches the filter. It the …\nReturns <code>true</code> if the bloom contains one of the address …")
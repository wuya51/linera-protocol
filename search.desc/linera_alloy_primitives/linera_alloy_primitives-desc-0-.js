searchState.loadedDescShard("linera_alloy_primitives", 0, "linera-alloy-primitives\nAn Ethereum address, 20 bytes in length.\nStack-allocated buffer for efficiently computing address …\nError type for address checksum validation.\n20-byte fixed byte-array type.\nNumber of bits.\nNumber of bits to set per input in Ethereum bloom filter.\nSize of the bloom filter in bits\nSize of the bloom filter in bytes.\nThe size of this integer type in bytes. Note that some …\nThe error type that is returned when conversion to or from …\nEthereum 256 byte bloom filter.\nInput to the <code>Bloom::accrue</code> method.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nA transaction that creates a contract.\nExplicit V value. May be EIP-155 modified.\nA byte array of fixed length (<code>[u8; N]</code>).\nError converting from bytes.\nError converting hex to bytes.\nAn Ethereum ABI function pointer, 24 bytes in length.\nAlready hashed input.\nError while decoding hex.\nError that occurs when the number is too large or too …\nInvalid ERC-55 checksum.\nInvalid parity.\nk256 error\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nThe maximum value.\nThe minimum value.\nMinus one (multiplicative inverse) of this type.\nLess than zero.\nNon-EIP155. 27 or 28.\nOne (multiplicative identity) of this type.\nThe parity of the signature, stored as either a V value …\nParity flag. True for odd.\nThe error type that is returned when parsing a signed …\nGreater than or equal to zero.\nRaw input to be hashed.\nError that occurs when an invalid digit is encountered …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nEnum to represent the sign of a 256-bit signed integer.\nAn ECDSA Signature, consisting of V, R, and S.\nErrors in signature parsing or verification.\nSigned integer wrapping a <code>ruint::Uint</code>.\nThe <code>to</code> field of a transaction. Either a target address, or …\nArray of Zero bytes.\nArray of Zero bytes.\nArray of Zero bytes.\nArray of Zero bytes.\nZero (additive identity) of this type.\nComputes the absolute value of <code>self</code>.\nAccrues the input into the bloom filter.\nAccrues the input into the bloom filter.\nIngests a log into the bloom filter.\nIngests a raw log into the bloom filter.\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nType aliases for common primitive types.\nReturns references to the address and selector of the …\nReturns the sign character.\nConversion to i16 with overflow checking.\nConversion to i32 with overflow checking.\nConversion to i64 with overflow checking.\nConversion to i8 with overflow checking.\nConversion to isize with overflow checking.\nView the array of limbs.\nReturns a mutable slice containing the entire array. …\nReturns the checksum of a formatted address.\nReturns a slice containing the entire array. Equivalent to …\nReturns the checksum of a formatted address.\nConversion to u16 with overflow checking.\nConversion to u32 with overflow checking.\nConversion to u64 with overflow checking.\nConversion to u8 with overflow checking.\nConversion to usize with overflow checking.\nArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, …\nArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nReturns whether a specific bit is set.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nReturn the least number of bits needed to represent the …\nConverts a sequence of string literals containing …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nConverts a sequence of string literals containing …\nGet the chain_id of the V value, if any.\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nCreates a <code>Signed</code> from an absolute value and a negative …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nConcatenate two <code>FixedBytes</code>.\nCompile-time version of <code>contains</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nEquality at compile-time.\nReturns <code>true</code> if no bits are set.\nReturns true if this bloom filter is a possible superset …\nReturns true if this bloom filter is a possible superset …\nTrue if the bloom filter contains a log with given address …\nTrue if the bloom filter contains a log with given address …\nCreates a new <code>Bytes</code> instance from a slice by copying it.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nComputes the <code>create</code> address for this address and nonce:\nComputes the <code>CREATE2</code> address of a smart contract as …\nComputes the <code>CREATE2</code> address of a smart contract as …\nReturns a reference to the underlying data.\nThe plain data.\nThe log data.\nReturns a mutable reference to the underlying data.\nCalculates the quotient of Euclidean division of <code>self</code> by …\nCreates a new empty log.\nCreates a new empty log.\nCreate <code>10**n</code> as this type.\nConverts a sequence of string literals containing …\nCalculates the checksum of an address into the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>TxKind::Call</code> with the given address.\nReturns the argument unchanged.\nCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Ethereum function from an address and selector.\nConstructs the <code>Signed</code> from digits in the base <code>base</code> in …\nConverts a big-endian byte array of size exactly …\nConvert from a decimal string.\nConvert from a hex string.\nConvert from an array in LE format\nConstruct a new integer from little-endian a array of …\nConverts an ECDSA signing key to its corresponding …\nConverts an ECDSA verifying key to its corresponding …\nCoerces an unsigned integer into a signed one. If the …\nInstantiate by hashing public key bytes.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreates a new <code>Bytes</code> from a static slice.\nCreates an Ethereum address from an EVM word’s upper 20 …\nCreates an Ethereum function from an EVM word’s lower 24 …\nCalculate the seal hash, this may be slow.\nGet the inner item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nConsume the input, converting it to the hash.\nReturns the backing buffer.\nUnseal the inner item, discarding the hash.\nConvert to a array of limbs.\nDecompose into parts.\nReturns the signed integer as a unsigned integer. If the …\nSplits a Signed into its absolute value and negative flag.\nLeft-pads the address to 32 bytes (EVM word size).\nRight-pads the function to 32 bytes (EVM word size).\nInverts the parity.\nReturns true if the transaction is a contract call.\nReturns true if the transaction is a contract creation.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns whether the sign is negative.\nDetermines if the integer is odd.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns whether the sign is positive.\nTrue if valid, false otherwise.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is …\nReturns the number of leading zeros in the binary …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nReturns the size of this array in bytes.\nReturns the size of this array in bytes.\nReturns the size of this byte array (<code>N</code>).\nReturns the size of this array in bytes.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nSpecialised Bloom filter that sets three bits out of 2048, …\n<code>m3_2048</code> but with a pre-hashed input.\nWraps the given byte array in this type.\nCreates a new buffer.\nWraps the given byte array in this type.\nWraps the given byte array in <code>FixedBytes</code>.\nWraps the given byte array in this type.\nCreates a new empty <code>Bytes</code>.\nCreates a new log.\nCreates a new log.\nCreates a new log from an deserialized event.\nCreates a new log.\nCreates a new log, without length-checking. This allows …\nCreates a new log.\nInstantiate without performing the hash. This should be …\nComputes the absolute value of <code>self</code>.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> / <code>rhs</code>\nCalculates the quotient of Euclidean division …\nCreates a <code>Signed</code> from a sign and an absolute value. …\nCalculates <code>self</code> * <code>rhs</code>\nNegates self, overflowing if this is equal to the minimum …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates <code>self</code> % <code>rhs</code>\nOverflowing Euclidean remainder. Calculates …\nShifts self left by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nCalculates <code>self</code> - <code>rhs</code>\nParse an Ethereum address, verifying its EIP-55 checksum.\nRaises self to the power of <code>exp</code>, using exponentiation by …\nDetermines the recovery ID.\nCalculates the least nonnegative remainder of …\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new <code>FixedBytes</code> where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nReserialize the data.\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nGet the hash.\nSeal the object by calculating the hash. This may be slow.\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nInstantiate an unchecked seal. This should be used with …\nSet the topic list, truncating to 4 topics.\nSet the topic list, without length-checking. This allows …\nReturns the sign of self.\nCalculates a heuristic for the in-memory size of this …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nConsumes the log data, returning the topic list and the …\nDecompose into parts. Alias for <code>Self::into_parts</code>.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nConverts an EIP-155 V value to a non-EIP-155 V value.\nReturns the address of the contract that will be called or …\nReturns the address and selector of the function.\nConverts <code>self</code> to a big-endian byte array of size exactly …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into …\nConvert to a decimal string.\nApplies EIP-155.\nConvert to a hex string.\nConverts <code>self</code> to a little-endian byte array of size exactly\nConvert to a parity bool, dropping any V information.\nReturns the checksum of a formatted address.\nReturn the corresponding u64 V value.\nGet the topic list.\nGet the topic list, mutably. This gives access to the …\nGet a mutable reference to the topic list. This allows …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nTries to create a <code>Vec</code> of <code>n</code> elements, each initialized to …\nCompute the two’s complement of this number.\nShortcut for <code>val.try_into().unwrap()</code>.\nShortcut for <code>self.try_into().unwrap()</code>.\nUnseal the inner item, discarding the hash. Alias for …\nComputes the absolute value of <code>self</code> without any wrapping …\nCommon Ethereum utilities.\nApplies EIP-155 with the given chain ID.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nWrap a fixed-size byte array in a newtype, delegating all …\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nReturn the y-parity as a boolean.\nReturn the y-parity as 0 or 1\nReturn the y-parity byte as 27 or 28, in the case of a …\n128-byte fixed byte-array type.\n16-byte fixed byte-array type.\n2-byte fixed byte-array type.\n24-byte fixed byte-array type.\n256-byte fixed byte-array type.\n28-byte fixed byte-array type.\n32-byte fixed byte-array type.\n4-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\n1-byte fixed byte-array type.\n12-byte fixed byte-array type.\nA block hash.\nA block number.\nChain identifier type (introduced in EIP-155).\nThe 0-bit signed integer type, capable of representing 0.\nThe 1-bit signed integer type, capable of representing 0 …\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n192-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n512-bit signed integer type, consisting of 8, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nSolidity contract functions are addressed using the first …\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nThe prefix used for hashing messages according to EIP-191.\nEther is equivalent to 1e18 wei.\nGwei is equivalent to 1e9 wei.\nSigned 256-bit integer.\nThe provided units are not recognized.\nKwei is equivalent to 1e3 wei.\nSimple <code>Keccak-256</code> hasher.\nThe largest unit.\nThe smallest unit.\nMwei is equivalent to 1e6 wei.\nPwei is equivalent to 1e15 wei.\nOverflow when parsing a signed number.\nThis enum holds the numeric types that a possible to be …\nTwei is equivalent to 1e12 wei.\nUnsigned 256-bit integer.\nEthereum unit. Always less than <code>77</code>.\nError type for <code>Unit</code>-related operations.\nWei is equivalent to 1 wei.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nPad and squeeze the state.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric value of the unit.\nReturns the absolute value of the number.\nReturns the signed value of the number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is negative.\nReturns <code>true</code> if the number is positive.\nReturns <code>true</code> if the number is signed.\nReturns <code>true</code> if the number is unsigned.\nReturns <code>true</code> if the number is zero.\nSimple interface to the <code>Keccak-256</code> hash function.\nCreates a new <code>Unit</code> instance, checking for overflow.\nCreates a new <code>Keccak256</code> hasher.\nCreates a new <code>Unit</code> instance.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nParses a decimal number and multiplies it with 10^units.\nTries to collect the elements of an iterator into a <code>Vec</code>.\nAbsorbs additional input. Can be called multiple times.\nTries to create a <code>Vec</code> with the given capacity.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nReturns <code>10^self</code>, which is the number of Wei in this unit.")
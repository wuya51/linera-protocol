searchState.loadedDescShard("linera_storage", 0, "This module defines the storage abstractions for …\nA clock that can be used to get the current <code>Timestamp</code>.\nThe low-level storage implementation in use.\nA DbStorage wrapping with Arc\nCommunicate with a persistent storage using the “views”…\nAlias to provide simpler trait bounds …\nA clock implementation that uses a stored number of …\nA <code>Clock</code> implementation using the system clock.\nAdvances the current time by the specified delta.\nReturns the current wall clock time.\nTests the existence of a blob with the given blob ID.\nTests existence of a blob state with the given blob ID.\nTests existence of the certificate with the given hash.\nTests existence of a hashed certificate value with the …\nTests existence of hashed certificate values with given …\nInitializes a chain in a simple way (used for testing and …\nReturns the current time according to the test clock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the view of a chain state and checks that it is …\nLoads the view of a chain state.\nCreates a <code>UserContractCode</code> instance using the bytecode in …\nCreates a [<code>linera-sdk::UserContract</code>] instance using the …\nAttempts to write the given blob state. Returns the latest …\nLists the missing blobs from storage.\nCreates a new clock with its time set to 0, i.e. the Unix …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads the blob with the given blob ID.\nReads the blob state with the given blob ID.\nReads the blobs with the given blob IDs.\nReads the certificate with the given hash.\nReads a number of certificates in parallel.\nReads the hashed certificate value with the given hash.\nReads the hashed certificate values in descending order …\nSets the current time.\nSelects the WebAssembly runtime to use for applications …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the given blob.\nWrites the given blob state.\nWrites several blobs.\nWrites the given certificate.\nWrites a vector of certificates.\nWrites the given hashed certificate value.\nWrites several hashed certificate values.\nWrites hashed certificates, blobs and certificate")
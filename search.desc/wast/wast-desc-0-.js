searchState.loadedDescShard("wast", 0, "A crate for low-level parsing of the WebAssembly text …\nA convenience error type to tie together all the detailed …\nA parsed representation of a <code>*.wast</code> file.\nThe different kinds of directives found in a <code>*.wast</code> file.\nA <code>*.wat</code> file parser, or a parser for one parenthesized …\nCommon annotations used to parse WebAssembly text files.\nA macro, like <code>custom_keyword</code>, to create a type which can …\nTypes and support for parsing the component model text …\nTypes and support for parsing the core wasm text format.\nA macro to create a custom keyword parser.\nA macro for defining custom reserved symbols.\nEncodes this module to bytes, either by encoding the …\nEncodes this <code>Wat</code> to binary form. This calls either …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon keyword used to parse WebAssembly text files.\nReturns the underlying <code>LexError</code>, if any, that describes …\nDefinition of a lexer for the WebAssembly text format.\nReturns the underlying message, if any, that describes …\nCreates a new error with the given <code>message</code> which is …\nTraits for parsing the WebAssembly Text format\nTo provide a more useful error this function can be used …\nTo provide a more useful error this function can be used …\nReturn the <code>Span</code> for this error.\nReturns the location in the source that this directive was …\nCommon tokens that implement the <code>Parse</code> trait which are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn alias to a component item.\nThe core function is defined in terms of aliasing a module …\nThe function is defined in terms of aliasing a component …\nAn alias local to the component type.\nAn alias local to the component type.\nAn alias local to the instance type.\nThe target of a component alias.\nA component that had its raw binary bytes defined via the …\nThe instance is defined by exporting local items as an …\nThe argument is an instance created from local exported …\nThe instance is defined by exporting local items as an …\nThe argument is an instance created from local exported …\nInformation relating to lifting a core function.\nInformation relating to lowering a component function.\nCanonical ABI options.\nInformation relating to the <code>resource.drop</code> intrinsic.\nInformation relating to the <code>resource.new</code> intrinsic.\nInformation relating to the <code>resource.rep</code> intrinsic.\nA WebAssembly canonical function to be inserted into a …\nPossible ways to define a canonical function in the text …\nA parsed WebAssembly component module.\nThe alias is to a component export.\nThe alias is to an outer component.\nThe export is a component.\nThe item signature is for a component.\nA component type.\nAn entry in a WebAssembly component’s export section.\nRepresents the kind of instance export alias.\nThe kind of exported item.\nThe type of an exported item from an component or instance …\nThe different ways an import can be named.\nA listing of all possible fields that can make up a …\nA parameter of a <code>ComponentFunctionType</code>.\nA result of a <code>ComponentFunctionType</code>.\nA component function type with parameters and result.\nAn <code>import</code> statement and entry in a WebAssembly component.\nThe different kinds of ways to define a component.\nRepresents the kind of outer alias.\nA type definition for a component type.\nA declaration of a component type.\nA reference to a type defined in this component.\nA component value type.\nA value type declaration used for values in import …\nThe alias is to an export of a module instance.\nA declared core function.\nRepresents the kind of core functions.\nA core instance defined by instantiation or exporting core …\nAn exported item as part of a core instance.\nThe kinds of core instances in the text format.\nAn argument to instantiate a core module.\nThe kind of core instantiation argument.\nParses core item references.\nA core WebAssembly module to be created as part of a …\nThe alias is to a core module export.\nThe alias is to an outer core module.\nThe export is a core module.\nThe item signature is for a core module.\nPossible ways to define a core module in the text format.\nA core type declaration.\nThe alias is to an outer core type.\nA core type definition local to the component type.\nA core type definition local to the component type.\nRepresents a core type definition.\nA reference to a core type defined in this component.\nA custom section within a component.\nThe type definition is one of the core types.\nA defined value type.\nAn enum type.\nThe equality type bounds.\nThe alias is to an export of a component instance.\nAn export.\nAn export of the component type.\nAn export of the instance type.\nA flags type.\nA declared component function.\nThe alias is to a function export.\nThe export is a function.\nThe item signature is for a function.\nA component function type.\nRepresents the kind of component functions.\nThis is actually an inline import of a component\nA function which is actually defined as an import, such as:\nThe <code>(instance (import &quot;x&quot;))</code> sugar syntax\nA core module which is actually defined as an import\nAn import.\nAn import of the component type.\nThe refinement is referenced by index.\nConvenience structure to parse <code>$f</code> or <code>(item $f)</code>.\nConvenience structure to parse <code>$f</code> or <code>(item $f)</code>.\nThe component is defined inline as a local definition with …\nModules that are defined inline.\nThe value type is an inline defined type.\nThe inline type.\nThe inline type.\nAn inline-only component value type.\nA listing of inline <code>(export &quot;foo&quot; &lt;url&gt;)</code> statements on a …\nA inline alias for component exported items.\nA listing of a inline <code>(import &quot;foo&quot;)</code> statement.\nA component instance defined by instantiation or exporting …\nThe alias is to an instance export.\nThe export is an instance.\nThe item signature is for an instance.\nThe argument is a reference to an instance.\nAn instance type.\nThe kinds of instances in the text format.\nA type definition for an instance type.\nA declaration of an instance type.\nInstantiate a core module.\nInstantiate a component.\nAn argument to instantiate a component.\nThe kind of instantiation argument.\nThis is an interface import where the string is an ID.\nThe argument is a reference to a component item.\nParses component item references.\nAn item signature for imported items.\nThe kind of signatures for imported items.\nAn item signature for imported items.\nThis is a kebab-named import where a top-level name is …\nThe function is defined in terms of lifting a core …\nA canonical function that is defined in terms of lifting a …\nA list type.\nThe core function is defined in terms of lowering a …\nA canonical function that is defined in terms of lowering …\nUse the specified memory for canonical ABI memory access.\nThe type definition is a module type.\nA type definition for a core module.\nThe declarations of a <code>ModuleType</code>.\nA nested WebAssembly component.\nThe different kinds of ways to define a nested component.\nAn optional type.\nThe alias is to an item from an outer component.\nCall the specified function after the lifted function has …\nA primitive value type.\nUse the specified reallocation function for memory …\nA record defined type.\nA record type field.\nThe value type is an index reference to a defined type.\nThe type that we’re referencing.\nThe type that we’re referencing.\nA refinement for a variant case.\nThe refinement has been resolved to an index into the …\nA resource type.\nA type definition for an instance type.\nA result type.\nA function to call at instantiation time.\nEncode strings as “compact UTF-16”.\nEncode strings as UTF-16.\nEncode strings as UTF-8.\nA resource type is imported/exported,\nA component defined in the textual s-expression format.\nA tuple type.\nA type declaration in a component.\nThe alias is to a type export.\nThe alias is to an outer type.\nThe export is a type.\nThe item signature is for a type.\nA core type.\nA type definition local to the component type.\nA type definition local to the instance type.\nRepresents the bounds applied to types being imported.\nA definition of a component type.\nThe alias is to a value export.\nThe export is a value.\nThe item signature is for a value.\nA variant defined type.\nA case of a variant type.\nExpression that can be used inside of <code>invoke</code> expressions …\nThe arguments to pass to the function.\nThe cases of the variant type.\nPayload of this custom section.\nAn optional name for this instance stored in the custom …\nThe declarations of the module type.\nThe declarations of the component type.\nThe declarations of the instance type.\nThe core type’s definition.\nThe type definition.\nThe declarations of the instance type.\nThe element type of the array.\nThe type of the value, when a value is present.\nEncodes this <code>Component</code> to its binary form.\nThe type on failure.\nExport name to resolve the item from.\nExport names to resolve the item from.\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nThe fields of the record.\nThe types of the fields of the tuple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe function to call.\nThe core function being lifted.\nThe function being lowered.\nAn identifier that this alias is resolved with …\nAn optional identifier this component is known by\nAn optional identifier this component is known by\nOptional identifier bound to this export.\nAn identifier that this function is resolved with …\nAn identifier that this function is resolved with …\nAn identifier that this function is resolved with …\nAn optional identifier used during name resolution to …\nAn identifier that this instance is resolved with …\nAn identifier that this instance is resolved with …\nAn identifier that this module is resolved with …\nAn optional identifier to refer to this <code>core type</code> by as …\nAn optional identifier to refer to this <code>type</code> by as part of …\nAn optional identifier to refer to this case by as part of …\nThe item or instance reference.\nThe item or instance reference.\nThe instance to alias the export from.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe item that’s being imported.\nWhat’s being exported from the instance.\nThe signature of the item.\nWhat kind of component this was parsed as.\nWhat kind of component this was parsed as.\nThe kind of export.\nThe kind of core function.\nThe kind of function.\nWhat kind of function this is, be it a lowered or lifted …\nWhat kind of item this is.\nWhat kind of instance this is.\nThe kind of core instantiation argument.\nWhat kind of instance this is.\nThe kind of instantiation argument.\nThe item kind being parsed.\nThe item kind being parsed.\nWhat kind of module this is, be it an inline-defined or …\nThe name of the export to alias.\nAn optional name for this alias stored in the custom <code>name</code> …\nAn optional <code>@name</code> annotation for this component\nAn optional <code>@name</code> annotation for this component\nName of the custom section.\nThe name of this export from the component.\nAn optional name for this function stored in the custom …\nAn optional name for this function stored in the custom …\nAn optional name for this function stored in the custom …\nThe name of the item being imported.\nAn optional name which, for functions, will be stored in …\nThe name of the item being imported.\nAn optional name for this instance stored in the custom …\nThe name of the instantiation argument.\nThe name of this export from the instance.\nAn optional name for this instance stored in the custom …\nThe name of the instantiation argument.\nAn optional name for this module stored in the custom <code>name</code> …\nAn optional name for this type stored in the custom <code>name</code> …\nAn optional name for this type stored in the custom <code>name</code> …\nThe name of the field.\nThe name of the case.\nThe name of the parameter\nAn optionally-specified name of this result\nThe name of this export.\nThe extra names to export an item as, if any.\nThe names of the individual flags.\nThe tag names of the enum.\nThe type on success.\nThe canonical options for the lifting.\nThe canonical options for the lowering.\nThe parameters of a function, optionally each having an …\nParses a <code>Type</code> while allowing inline <code>(export &quot;...&quot;)</code> names …\nParses only an outer type alias.\nThe optional refinement.\nRepresentation, in core WebAssembly, of this resource.\nPerforms a name resolution pass on this <code>Component</code>, …\nNames of the result values.\nThe result of a function, optionally each having an …\nWhere this <code>alias</code> was defined.\nWhere this <code>component</code> was defined\nWhere this <code>component</code> was defined\nWhere this <code>@custom</code> was defined.\nWhere this export was defined.\nWhere this <code>core func</code> was defined.\nWhere this <code>func</code> was defined.\nWhere this <code>func</code> was defined.\nWhere this <code>import</code> was defined\nWhere this item is defined in the source.\nWhere this <code>core instance</code> was defined.\nWhere this export was defined.\nWhere this <code>instance</code> was defined.\nWhere this <code>core module</code> was defined.\nWhere this type was defined.\nWhere this type was defined.\nWhere this <code>case</code> was defined\nWhere this export was defined.\nThe target of this alias.\nThe kind of export.\nThe resource type that this intrinsic creates an owned …\nThe resource type that this intrinsic is dropping.\nThe resource type that this intrinsic is accessing.\nThe type of the field.\nThe optional type of the case.\nThe type of the parameter.\nThe type of the result.\nThe index of the item being aliased.\nThe component instance exporting the item.\nThe module instance exporting the item.\nThe export kind of the alias.\nThe export kind of the alias.\nThe outer alias kind.\nThe name of the exported item to alias.\nThe name of the exported item to alias.\nThe number of enclosing components to skip.\nInformation relating to the lifting of the core function.\nThe lifted function’s type.\nArguments used to instantiate the instance.\nThe module being instantiated.\nFields in the core module.\nWhere this core module is imported from\nThe type that this core module will have.\nThe import name of this import.\nInformation relating to the lifting of the core function.\nThe type that this function will have.\nThe lifted function’s type.\nArguments used to instantiate the instance.\nThe component being instantiated.\nThe name of the import\nThe type of the instance being imported\nThe information about where this is being imported from.\nThe type of component being imported.\nAn active data segment which is associated and loaded into …\nAn active segment associated with a table.\nThis custom section will be placed just after a known …\nThis custom section will appear after the last section in …\nA reference to any reference value: anyref. This is part …\nA reference to a GC array. This is part of the GC proposal.\nAn array type definition.\nExtra data associated with the <code>array.copy</code> instruction\nExtra data associated with the <code>array.fill</code> instruction\nExtra data associated with the <code>array.init_[data/elem]</code> …\nExtra data associated with the <code>array.new_data</code> instruction\nExtra data associated with the <code>array.new_elem</code> instruction\nExtra data associated with the <code>array.new_fixed</code> instruction\nAn array type with fields.\nA 32-bit memory\nA 64-bit memory\nThis custom section will be placed just before a known …\nThis custom section will appear before the first section …\nA module that had its raw binary bytes defined via the …\nExtra information associated with block-related …\nExtra data associated with the <code>br_on_cast</code> instruction\nExtra data associated with the <code>br_on_cast_fail</code> instruction\nExtra information associated with the <code>br_table</code> instruction.\nExtra data associated with the <code>call_indirect</code> instruction.\nA custom section within a wasm module.\nPossible locations to place a custom section within a …\nKnown sections that custom sections can be placed relative …\nA <code>data</code> directive in a WebAssembly module.\nDifferent kinds of data segments, either passive or active.\nDiffernet ways the value of a data segment can be defined.\nA declared element segment that is purely used to declare …\nA <code>dylink.0</code> custom section\nThe <code>dylink.0</code> custom section\nPossible subsections of the <code>dylink.0</code> custom section\nAn <code>elem</code> segment in a WebAssembly module.\nDifferent ways to define an element segment in an mdoule.\nDifferent ways to define the element segment payload in a …\nA reference that has an identity that can be compared: …\nAn exception tag, where the payload is the type signature …\nA entry in a WebAssembly module’s export section.\nDifferent kinds of elements that can be exported from a …\nThe type of an exported item from a module or instance.\nAn expression, or a list of instructions, in the …\nThis element segment has a list of optional function …\nA reference to any host value: externref. This is part of …\nA WebAssembly function to be inserted into a module.\nAn untyped function reference: funcref. This is part of …\nA function type definition.\nExtra information associated with the func.bind …\nPossible ways to define a function in the text format.\nA function type with parameters and results.\nA function type with parameters and results.\nA WebAssembly global in a module\nDifferent kinds of globals that can be defined in a module.\nType for a <code>global</code> in a wasm module\nA heap type for a reference type\nAn unboxed 31-bit integer: i31ref. Part of the GC proposal.\nLanes being shuffled in the <code>i8x16.shuffle</code> instruction\nAn <code>import</code> statement and entry in a WebAssembly module.\nA function which is actually defined as an import, such as:\nA global which is actually defined as an import, such as:\nThis memory is actually an inlined import definition.\nThis table is actually an inlined import definition.\nAn tag which is actually defined as an import, such as:\nA reference to a function, struct, or array: ref T. This …\nThis element segment has a contiguous list of function …\nAlmost all functions, those defined inline in a wasm …\nA global defined inline in the module itself\nThe data of this memory, starting from 0, explicitly listed\nThe elem segments of this table, starting from 0, …\nA tag defined inline in the module itself\nA listing of inline <code>(export &quot;foo&quot;)</code> statements on a …\nA listing of a inline <code>(import &quot;foo&quot;)</code> statement.\nA listing of all WebAssembly instructions that can be in a …\nPayload for lane-related instructions. Unsigned with no + …\nExtra information associated with the let instruction.\nMin/max limits used for tables/memories.\nMin/max limits used for 64-bit memories\nExtra data associated with the <code>loadN_lane</code> and <code>storeN_lane</code> …\nA local for a <code>func</code> or <code>let</code> instruction.\nParser for <code>local</code> instruction.\nPayload for memory-related instructions indicating …\nA defined WebAssembly memory instance inside of a module.\nExtra data associated with unary memory instructions.\nExtra data associated with the <code>memory.copy</code> instruction\nExtra data associated with the <code>memory.init</code> instruction\nDifferent syntactical ways a memory can be defined in a …\nConfiguration for a memory of a wasm module\nA parsed WebAssembly core module.\nA listing of all possible fields that can make up a …\nThe different kinds of ways to define a module.\nRepresentation of the results of name resolution for a …\nEither a NaN pattern (<code>nan:canonical</code>, <code>nan:arithmetic</code>) or a …\nThe bottom type of the externref hierarchy. Part of the GC …\nThe bottom type of the funcref hierarchy. Part of the GC …\nThe bottom type of the anyref hierarchy. Part of the GC …\nA typical memory definition which simply says the limits …\nA typical memory definition which simply says the limits …\nA passive data segment which isn’t associated with a …\nA passive segment that isn’t associated with a table and …\nA producers custom section\nA producers custom section.\nA raw custom section with the manual placement and bytes …\nA wasm custom section within a module.\nA recursion group declaration in a module\nExtra data associated with the <code>ref.cast</code> instruction\nA non-null externref is expected which should contain the …\nA non-null funcref is expected.\nA null reference is expected, optionally with a specified …\nExtra data associated with the <code>ref.test</code> instruction\nA reference type in a wasm module.\nPayload of the <code>select</code> instructions\nThe types of values that may be used in a struct or array.\nA reference to a GC struct. This is part of the GC …\nA struct type definition.\nExtra data associated with the <code>struct.get/set</code> instructions\nA field of a struct type.\nA struct type with fields.\nA WebAssembly <code>table</code> directive in a module.\nExtra data associated with unary table instructions.\nExtra data associated with the <code>table.copy</code> instruction.\nExtra data associated with the <code>table.init</code> instruction\nDifferent ways to textually define a table.\nConfiguration for a table of a wasm mdoule\nA WebAssembly tag directive, part of the exception …\nDifferent kinds of tags that can be defined in a module.\nListing of various types of tags that can be defined in a …\nA module defined in the textual s-expression format.\nA type declaration in a module\nA definition of a type.\nA reference to a type defined in this module.\nDifferent ways to specify a <code>v128.const</code> instruction\nA version of <code>V128Const</code> that allows <code>NanPattern</code>s.\nThe value types for a wasm module.\nExpression that can be used inside of <code>invoke</code> expressions …\nExpressions that can be used inside of <code>assert_return</code> to …\nThe alignment of this access.\nAn <code>anyref</code> as an abbreviation for <code>(ref null any)</code>.\nAn <code>arrayref</code> as an abbreviation for <code>(ref null array)</code>.\nThe index of the array type we’re filling.\nThe index of the array type we’re initializing.\nThe index of the array type we’re accessing.\nThe index of the array type we’re accessing.\nThe index of the array type we’re accessing.\nPayload of this custom section.\nThe index of the data segment we’re copying into memory.\nBytes for this <code>Data</code> segment, viewed as the concatenation …\nThe data segment to initialize from.\nThe type that we’re declaring.\nThe index of the array type we’re copying to.\nThe index of the destination table to copy into.\nThe index of the table argument.\nThe index of the memory we’re copying to.\nThe index of the element segment we’re copying into a …\nThe type of element stored in this table\nThe elem segment to initialize from.\nEncodes this <code>Module</code> to its binary form.\nAn <code>eqref</code> as an abbreviation for <code>(ref null eq)</code>.\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nIf present, inline export annotations which indicate names …\nOptional export directives for this tag.\nAn <code>externref</code> as an abbreviation for <code>(ref null extern)</code>.\nThe index of the field of the struct we’re accessing\nThe name of the field in the module this statement imports …\nThe fields of the struct\nWhether this type is final or not. By default types are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe type we’re casting from.\nThe type we’re casting from.\nA <code>funcref</code> as an abbreviation for <code>(ref null func)</code>.\nAn <code>i31ref</code> as an abbreviation for <code>(ref null i31)</code>.\nReturns the byte id of this subsection used to identify it.\nAn identifier that this function is resolved with …\nAn identifier that this local is resolved with …\nAn optional name to reference this global by\nAn optional identifier used during name resolution to …\nAn optional name to refer to this memory by.\nThe optional name of this data segment\nAn optional identifier this module is known by\nAn optional name to refer to this table by.\nAn optional name by which to refer to this segment.\nAn optional name by which to refer to this tag in name …\nAn optional identifier for name resolution.\nAn optional identifier to refer to this <code>type</code> by as part of …\nThe type that we’re referencing, if it was present.\nThe inline type, if present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat’s being exported from the module.\nThe item that’s being imported.\nThe signature of the item that’s exported.\nThe kind of item being exported.\nWhat kind of function this is, be it an inline-defined or …\nWhat kind of global this defined as.\nWhat kind of item this is.\nHow this memory is defined in the module.\nWhether this data segment is passive or active\nWhat kind of module this was parsed as.\nHow this table is textually defined in the module.\nThe way this segment was defined in the module.\nWhat kind of tag this is defined as.\nThe label to branch to.\nThe label to branch to.\nThe lane argument.\nThe lane argument for this instruction.\nReturns the length, in bytes, of the memory used to …\nThe amount of values to initialize the array with.\nLimits on the element sizes of this table\nAll the locals associated with this <code>local</code> instruction.\nAn optional maximum number of units for this type.\nAn optional maximum number of units for this type.\nThe index of the memory space.\nThe index of the memory we’re copying into,\nThe memory argument for this instruction.\nReturns the associated <code>MemArg</code> if one is available for this …\nThe memory index we’re accessing\nThe minimum number of units for this type.\nThe minimum number of units for this type.\nThe module that this statement is importing from\nWhether or not the global is mutable or not.\nWhether this field may be mutated or not.\nWhether this field may be mutated or not.\nThe name of this custom section\nName of the custom section.\nThe name of this export from the module.\nAn optional name for this function stored in the custom …\nAn optional name for this local stored in the custom <code>name</code> …\nAn optional name for this function stored in the custom …\nAn optional name which, for functions, will be stored in …\nAn optional name for this function stored in the custom …\nAn optional name for this data stored in the custom <code>name</code> …\nAn optional <code>@name</code> annotation for this module\nAn optional name for this function stored in the custom …\nAn optional name for this element stored in the custom <code>name</code>…\nAn optional name for this function stored in the custom …\nThe name of this export.\nAn optional name for this function stored in the custom …\nThe extra names to export an item as, if any.\nConstructs a new instance of <code>TypeUse</code> without an inline …\nA <code>nullexternref</code> as an abbreviation for <code>(ref null noextern)</code>.\nA <code>nullfuncref</code> as an abbreviation for <code>(ref null nofunc)</code>.\nA <code>nullref</code> as an abbreviation for <code>(ref null none)</code>.\nThe offset, in bytes of this access.\nThe parameters of a function, optionally each having an …\nThe declared parent type of this definition.\nThe payload of this element segment, typically a list of …\nWhere this custom section is placed.\nWhere the custom section is being placed,\nPushes the value of this data value onto the provided list …\nPerforms a name resolution pass on this <code>Module</code>, resolving …\nResolves <code>idx</code> within the function namespace.\nResolves <code>idx</code> within the global namespace.\nResolves <code>idx</code> within the memory namespace.\nResolves <code>idx</code> within the table namespace.\nThe results types of a function.\nThe index of the data or elem segment we’re reading from.\nWhere this <code>@custom</code> was defined.\nWhere this export was defined.\nWhere this <code>func</code> was defined.\nWhere this <code>global</code> was defined.\nWhere this <code>import</code> was defined\nWhere this item is defined in the source.\nWhere this <code>memory</code> was defined\nWhere this <code>data</code> was defined\nWhere this <code>module</code> was defined\nWhere this table was defined.\nWhere this <code>elem</code> was defined.\nWhere this tag was defined\nWhere this export was defined.\nWhere this type was defined.\nWhere this recursion group was defined.\nThe index of the source table to copy from.\nThe index of the memory we’re copying from.\nThe index of the array type we’re copying from.\nAn <code>structref</code> as an abbreviation for <code>(ref null struct)</code>.\nThe index of the struct type we’re accessing.\nThe table that this call is going to be indexing.\nThe index of the table we’re copying into.\nReturns the raw little-ended byte sequence used to …\nThe type we’re casting to.\nThe type we’re casting to.\nType type signature that this <code>call_indirect</code> instruction is …\nThe type that this function will have.\nThe value type of this local.\nThe type of this global, both its value type and whether it…\nThe type of tag that is defined.\nThe element type of this <code>global</code>\nThe storage type stored in this field.\nThe storage type stored in this field.\nThe type to cast to.\nThe type to test for.\nThe types that we’re defining in this group.\nThe memory that this <code>Data</code> will be associated with.\nInitial offset to load this data segment at\nThe offset within <code>table</code> that we’ll initialize at.\nThe table this <code>elem</code> is initializing.\nThe expressions in this segment.\nThe desired type of each expression below.\nThe instructions of the function.\nThe list of locals, if any, for this function.\nThe inline data specified for this memory\nWhether or not this will be creating a 32-bit memory\nLimits on the page sizes of this memory\nLimits on the page sizes of this memory\nWhether or not this is a shared (atomic) memory type\nWhether or not this is a shared (atomic) memory type\nThe element type of this table.\nOptional items initializer expression.\nThe element table entries to have, and the length of this …\nTable type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA block comment, surrounded by <code>(;</code> and <code>;)</code>. Note that these …\nA “confusing” unicode character is present in a …\nA dangling block comment was found with an unbalanced <code>(;</code> …\nParsing expected <code>wanted</code> but ended up finding <code>found</code> instead …\nPossible parsed float values\nA float.\nDescription of a parsed float from the source.\nAn identifier (like <code>$foo</code>).\nAn float infinite representation,\nA fully parsed integer from a source string with a payload …\nAn integer.\nDescription of the parsed integer from the source.\nAn invalid base-10 digit was found.\nAn invalid hexadecimal digit was found.\nAn invalid <code>char</code> in a string literal was found.\nAn invalid string escape letter was found (the thing after …\nAn invalid unicode value was found in a <code>\\u{...}</code> escape in …\nA keyword, or something that starts with an alphabetic …\nA left-parenthesis, including the source text for where it …\nErrors that can be generated while lexing.\nA structure used to lex the s-expression syntax of WAT …\nA line comment, preceded with <code>;;</code>\nA lone underscore was found when parsing a number, since …\nMinus sign: “-”,\nA float <code>NaN</code> representation\nA number failed to parse because it was too big to fit …\nPlus sign: “+”,\nA right-parenthesis, including the source text for where …\nA reserved series of <code>idchar</code> symbols. Unknown what this is …\nA sign token for an integer.\nA string literal, which is actually a list of bytes.\nA single token parsed from a <code>Lexer</code>.\nClassification of what was parsed from the input stream.\nAn unexpected character was encountered when generally …\nWe needed to parse more but EOF (or end of the string) was …\nA parsed and separated floating point value\nA fragment of source that represents whitespace.\nConfigures whether “confusing” unicode characters are …\nReturns whether an annotation is present at <code>pos</code> and the …\nReturns the decomposed float token that this represents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the identifier, without the leading <code>$</code> symbol, that …\nReturns the original source input that we’re lexing.\nReturns the decomposed integer token that this represents.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all tokens in the original source …\nReturns the keyword this token represents.\nThe kind of token this represents, such as whether it’s …\nThe byte length of this token as it resides in the …\nCreates a new lexer which will lex the <code>input</code> source string.\nThe byte offset within the original source for where this …\nLexes the next at the byte position <code>pos</code> in the input.\nReturns the reserved string this token represents.\nReturns the sign token for this integer.\nReturns the original source text for this token.\nReturns the parsed string that this token represents.\nReturns the value string that can be parsed for this …\nThe float parts after the <code>.</code>\nThe exponent to multiple this <code>integral.decimal</code> portion of …\nWhether or not the <code>integral</code> and <code>decimal</code> are specified in …\nThe float parts before the <code>.</code>\nWhether or not this is a negative <code>NaN</code> or not.\nThe specific bits to encode for this float, optionally\nThe character that was actually found\nThe character that was expected to be found\nAn immutable cursor into a list of tokens.\nContains the error value\nA helpful structure to perform a lookahead of one token to …\nContains the success value\nA trait for parsing a fragment of syntax in a recursive …\nA low-level buffer of tokens which represents a completely …\nAn in-progress parser for the tokens of a WebAssembly text …\nA trait for types which be used to “peek” to see if …\nA convenience type definition for <code>Result</code> where the error …\nAttempts to advance this cursor if the current token is a …\nReturns the span of the current token\nReturns the span of the next <code>Token</code> token.\nReturns a human-readable name of this token to display …\nGenerates an error message saying that one of the tokens …\nCreates an error whose line/column information is pointing …\nSame as <code>Parser::error</code>, but works with the current token in …\nCreates an error whose line/column information is pointing …\nAttempts to advance this cursor if the current token is a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to advance this cursor if the current token is a …\nAttempts to advance this cursor if the current token is a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are no more <code>Token</code> tokens to parse …\nAttempts to advance this cursor if the current token is a …\nA helper structure to perform a sequence of <code>peek</code> …\nAttempts to advance this cursor if the current token is a <code>(</code>…\nCreates a new <code>ParseBuffer</code> by lexing the given <code>input</code> …\nCreates a new <code>ParseBuffer</code> by lexing the given <code>input</code> …\nParse an item surrounded by parentheses.\nReturn the depth of nested parens we’ve parsed so far.\nA top-level convenience parsing function that parses a <code>T</code> …\nAttempts to parse <code>Self</code> from <code>parser</code>, returning an error if …\nParses a <code>T</code> from this <code>Parser</code>.\nTests to see whether this token is the first token within …\nAttempts to see if <code>T</code> is the next token in the <code>Parser</code> this …\nPerforms a cheap test to see whether the current token in …\nThe same as <code>peek</code>, except it checks the token immediately …\nSame as the <code>Parser::peek</code> method, except checks the next …\nSame as the <code>Parser::peek2</code> method, except checks the next …\nTests whether the next token is a float\nTests whether the next token is an id\nTests whether the next token is an integer\nTests whether the next token is a keyword\nTests whether the next token is an lparen\nTests whether the next token is reserved\nTests whether the next token is an rparen\nTests whether the next token is a string\nReturns the span of the previous token\nRegisters a new known annotation with this parser to allow …\nAttempts to advance this cursor if the current token is a …\nAttempts to advance this cursor if the current token is a <code>)</code>…\nA low-level parsing method you probably won’t use.\nAttempts to advance this cursor if the current token is a …\nA parsed floating-point type\nA parsed floating-point type\nAn identifier in a WebAssembly module, prefixed by <code>$</code> in …\nA human-readable identifier this references. Like <code>Num</code>, the …\nA reference to another item in a wasm module.\nParses <code>(func $foo)</code>\nA convenience type to use with <code>Parser::peek</code> to see if the …\nAn <code>@name</code> annotation in source, currently of the form …\nA numerical index that this references. The index space …\nA position in the original source stream, used to render …\nThe raw bits that this floating point number represents.\nThe raw bits that this floating point number represents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Span</code> from a byte offset in the source file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the line/column information of this span within …\nReturns the underlying name of this identifier.\nThe name specified for the item\nReturns the byte offset of this span.\nReturns span of this identifier in the original source\nReturns the source location where this <code>Index</code> was defined.")
searchState.loadedDescShard("combine", 0, "This crate contains parser combinators, roughly based on …\nA <code>Result</code> type which has the consumed status flattened into …\nContains the error value\nThe type which is taken as input for the parser. The type …\nThe type of items which is yielded from this stream.\nContains the success value\nThe type which is returned if the parser is successful.\nTrait which defines a combine parse error.\nA type alias over the specific <code>Result</code> type used by parsers …\nBy implementing the <code>Parser</code> trait a type says that it can …\nDetermines the state necessary to resume parsing after …\nType which represents the position in a stream. <code>Ord</code> is …\nA type which has a position.\nThe type of a range of items yielded from this stream. …\nA <code>RangeStream</code> is an extension of <code>Stream</code> which allows for …\nA <code>RangeStream</code> is an extension of <code>StreamOnce</code> which allows …\nA stream of tokens which can be duplicated\n<code>StreamOnce</code> represents a sequence of items that can be …\nAdds a <code>StreamError</code> to <code>self</code>.\nAdds the first error that would normally be returned by …\nParses with <code>self</code> followed by <code>p</code>. Succeeds if both parsers …\nParses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …\nParses any token.\n<code>attempt(p)</code> behaves as <code>p</code> except it acts as if the parser …\nParses <code>open</code> followed by <code>parser</code> followed by <code>close</code>. Returns …\nTurns the parser into a trait object by putting it in a <code>Box</code>…\nBorrows a parser instead of consuming it.\nParses <code>p</code> 1 or more times separated by <code>op</code>. The value …\nParses <code>p</code> one or more times separated by <code>op</code>. The value …\nTakes a tuple, a slice or an array of parsers and tries to …\nTakes a number of parsers and tries to apply them each in …\nRemoves any expected errors currently in <code>self</code>\nParses <code>parser</code> from zero up to <code>count</code> times.\nParses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…\nReturns the distance between <code>self</code> and <code>end</code>. The returned …\nStream wrapper which provides an informative and easy to …\nEntry point of the parser. Takes some input and tries to …\nConstructs an empty error.\nConstructs a parser out of an environment and a function …\nSucceeds only if the stream is at end of input, fails …\nError types and traits which define what kind of errors …\nParses with <code>self</code> and if it fails without consuming any …\nUses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …\nCreates a <code>ParseError</code> from a single <code>Self::StreamError</code>\nTakes a parser that outputs a string like value (<code>&amp;str</code>, …\nDoes a best-effort conversion of <code>self</code> into another …\nReturns <code>true</code> if this stream only contains partial input.\nCreates an iterator from a parser and a state. Can be used …\nWraps the parser into the <code>Either</code> enum which allows …\n<code>look_ahead(p)</code> acts as <code>p</code> but doesn’t consume input on …\nParses <code>p</code> zero or more times returning a collection with …\nParses <code>p</code> one or more times returning a collection with the …\nUses <code>f</code> to map over the parsed value.\nMerges two errors. If they exist at the same position the …\nParses with <code>self</code> and if it fails, adds the message <code>msg</code> to …\nExtract one token and succeeds if it is not part of <code>tokens</code>.\nSucceeds only if <code>parser</code> fails. Never consumes any input.\nExtract one token and succeeds if it is part of <code>tokens</code>.\nConvenience macro over <code>opaque</code>.\nParses <code>parser</code> and outputs <code>Some(value)</code> if it succeeds, <code>None</code> …\nReturns a parser which attempts to parse using <code>self</code>. If …\nEntry point of the parser. Takes some input and tries to …\nParses using the stream <code>input</code> and allows itself to be …\nParses using the stream <code>input</code> by calling <code>Stream::uncons</code> …\nParses using the stream <code>input</code> and allows itself to be …\nParses using the stream <code>input</code> by calling <code>Stream::uncons</code> …\nParses using the stream <code>input</code> by calling <code>Stream::uncons</code> …\nEntry point of the parser when using partial parsing. …\nA collection of both concrete parsers as well as parser …\nWraps a function, turning it into a parser.\nDeclares a named parser which can easily be reused.\nCreates an iterator from a parser and a state. Can be used …\nParser which just returns the current position in the …\nReturns the current position of the stream.\nWraps the parser into the <code>Either</code> enum which allows …\nParses a token and succeeds depending on the result of …\nParses a token and passes it to <code>predicate</code>. If <code>predicate</code> …\nParses <code>parser</code> zero or more time separated by <code>separator</code>, …\nParses <code>parser</code> one or more time separated by <code>separator</code>, …\nParses <code>parser</code> zero or more times separated and ended by …\nParses <code>parser</code> one or more times separated and ended by …\nSets <code>info</code> as the <em>only</em> <code>Expected</code> error of <code>self</code>\nSets the position of this <code>ParseError</code>\nParses with <code>self</code>, if it fails without consuming any input …\nDiscards the value of the <code>p</code> parser and returns the value …\nParses <code>parser</code> from zero up to <code>count</code> times skipping the …\nParses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>)\nParses <code>p</code> zero or more times ignoring the result.\nParses <code>p</code> one or more times ignoring the result.\nTraits and implementations of arbitrary data streams.\nSequences multiple parsers and builds a struct out of them.\nParses using <code>self</code> and then passes the value to <code>f</code> which …\nVariant of <code>then</code> which parses using <code>self</code> and then passes …\nParses a character and succeeds if the character is equal …\nParses multiple tokens.\nParses multiple tokens.\n<code>try(p)</code> behaves as <code>p</code> except it acts as if the parser hadn’…\nTakes a stream and removes its first item, yielding the …\nTakes <code>size</code> elements from the stream. Fails if the length …\nTakes items from stream, testing each one with <code>predicate</code>. …\nTakes items from stream, testing each one with <code>predicate</code> …\nAlways fails with <code>message</code> as an unexpected error. Never …\nAlways fails with <code>message</code> as an unexpected error. Never …\nAlways returns the value <code>v</code> without consuming any input.\nDiscards the value of the <code>self</code> parser and returns the …\nEnum used to store information about an error that has …\nStruct which hold information about an error that occurred …\nError indicating that the parser expected something else\nEnum holding error information. Variants are defined for …\nGeneric message\nVariant for containing other types of errors\nConvenience alias over <code>Errors</code> for <code>StreamOnce</code> types which …\nError indicating an unexpected token has been encountered …\nA vector containing specific information on what errors …\nA vector containing specific information on what errors …\nThe position where the error occurred\nThe position where the error occurred\nEnum used to indicate if a parser consumed any items of …\nConstructor indicating that the parser has consumed …\nA <code>Result</code> type which has the consumed status flattened into …\nConstructor indicating that the parser did not consume any …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nTrait which defines a combine parse error.\nA type alias over the specific <code>Result</code> type used by parsers …\n<code>StreamError</code> represents a single error returned from a …\nError wrapper which lets parsers track which parser in a …\nAdds a <code>StreamError</code> to <code>self</code>.\nRemoves any expected errors currently in <code>self</code>\nCombines the <code>Consumed</code> flags from <code>self</code> and the result of <code>f</code>.\nConstructs an empty error.\nThe error returned\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>ParseError</code> from a single <code>Self::StreamError</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into the <code>Consumed</code> state.\nConverts <code>self</code> into the <code>Empty</code> state.\nExtracts the contained value.\nConverts <code>self</code> into a different <code>StreamError</code> type.\nDoes a best-effort conversion of <code>self</code> into another …\nReturns true if <code>self</code> is empty.\nMaps over the contained value without changing the …\nMerges two errors. If they exist at the same position the …\nSets <code>info</code> as the <em>only</em> <code>Expected</code> error of <code>self</code>\nSets the position of this <code>ParseError</code>\nThe type which is taken as input for the parser. The type …\nThe type which is returned if the parser is successful.\nBy implementing the <code>Parser</code> trait a type says that it can …\nDetermines the state necessary to resume parsing after …\nAdds the first error that would normally be returned by …\nParses with <code>self</code> followed by <code>p</code>. Succeeds if both parsers …\nParses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …\nTurns the parser into a trait object by putting it in a <code>Box</code>…\nBorrows a parser instead of consuming it.\nModule containing parsers specialized on byte streams.\nModule containing parsers specialized on character streams.\nCombinators which take one or more parsers and attempts to …\nVarious combinators which do not fit anywhere else.\nEntry point of the parser. Takes some input and tries to …\nParsers which cause errors or modifies the returned error …\nParses with <code>self</code> and if it fails without consuming any …\nUses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …\nParsers constructor from regular functions\nParsers working with single stream items.\nCreates an iterator from a parser and a state. Can be used …\nWraps the parser into the <code>Either</code> enum which allows …\nUses <code>f</code> to map over the parsed value.\nParses with <code>self</code> and if it fails, adds the message <code>msg</code> to …\nReturns a parser which attempts to parse using <code>self</code>. If …\nEntry point of the parser. Takes some input and tries to …\nParses using the stream <code>input</code> and allows itself to be …\nParses using the stream <code>input</code> by calling <code>Stream::uncons</code> …\nParses using the stream <code>input</code> and allows itself to be …\nParses using the stream <code>input</code> by calling <code>Stream::uncons</code> …\nParses using the stream <code>input</code> by calling <code>Stream::uncons</code> …\nEntry point of the parser when using partial parsing. …\nCreates an iterator from a parser and a state. Can be used …\nModule containing zero-copy parsers.\nCombinators which take one or more parsers and applies …\nWraps the parser into the <code>Either</code> enum which allows …\nCombinators which take multiple parsers and applies them …\nParses with <code>self</code>, if it fails without consuming any input …\nDiscards the value of the <code>p</code> parser and returns the value …\nParses using <code>self</code> and then passes the value to <code>f</code> which …\nVariant of <code>then</code> which parses using <code>self</code> and then passes …\nDiscards the value of the <code>self</code> parser and returns the …\nParses either an ASCII alphabet letter or digit (a–z, …\nParses a byte and succeeds if the byte is equal to <code>c</code>.\nParses the bytes <code>s</code>.\nParses the bytes <code>s</code> using <code>cmp</code> to compare each token.\nParses carriage return and newline (<code>&amp;b&quot;\\r\\n&quot;</code>), returning …\nParses a base-10 digit (0–9).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses an ASCII hexdecimal digit (accepts both uppercase …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses an ASCII alphabet letter (a–z, A–Z).\nParses an lowercase ASCII letter (a–z).\nParses a newline byte (<code>b&#39;\\n&#39;</code>).\nParsers for decoding numbers in big-endian or …\nParses an octal digit.\nParses a <code>b&#39; &#39;</code>, <code>b&#39;\\t&#39;</code>, <code>b&#39;\\n&#39;</code> or <code>&#39;b\\&#39;r&#39;</code>.\nSkips over <code>space</code> zero or more times\nParses a tab byte (<code>b&#39;\\t&#39;</code>).\nZero-copy parser which reads a range of 0 or more tokens …\nZero-copy parser which reads a range of 0 or more tokens …\nZero-copy parser which reads a range of 0 or more tokens …\nZero-copy parser which reads a range of 0 or more tokens …\nParses an uppercase ASCII letter (A–Z).\nReads a i32 out of the byte stream with the specified …\nReads a i64 out of the byte stream with the specified …\nReads a i16 out of the byte stream with the specified …\nReads a i32 out of the byte stream with the specified …\nReads a i64 out of the byte stream with the specified …\nReads a u16 out of the byte stream with the specified …\nReads a u32 out of the byte stream with the specified …\nReads a u64 out of the byte stream with the specified …\nReads a i32 out of the byte stream with the specified …\nReads a i64 out of the byte stream with the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads a i16 out of the byte stream with the specified …\nReads a i32 out of the byte stream with the specified …\nReads a i64 out of the byte stream with the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a i32 out of the byte stream with the specified …\nReads a i64 out of the byte stream with the specified …\nReads a i16 out of the byte stream with the specified …\nReads a i32 out of the byte stream with the specified …\nReads a i64 out of the byte stream with the specified …\nReads a u16 out of the byte stream with the specified …\nReads a u32 out of the byte stream with the specified …\nReads a u64 out of the byte stream with the specified …\nReads a u16 out of the byte stream with the specified …\nReads a u32 out of the byte stream with the specified …\nReads a u64 out of the byte stream with the specified …\nParses either an alphabet letter or digit according to …\nParses a character and succeeds if the character is equal …\nParses carriage return and newline (<code>&quot;\\r\\n&quot;</code>), returning the …\nParses a base-10 digit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a hexdecimal digit with uppercase and lowercase.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses an alphabet letter according to …\nParses an lowercase letter according to …\nParses a newline character (<code>&#39;\\n&#39;</code>).\nParses an octal digit.\nParse a single whitespace according to …\nSkips over zero or more spaces according to …\nParses the string <code>s</code>.\nParses the string <code>s</code>, using <code>cmp</code> to compare each character.\nParses a tab character (<code>&#39;\\t&#39;</code>).\nParses an uppercase letter according to …\n<code>ChoiceParser</code> represents a parser which may parse one of …\nTakes a tuple, a slice or an array of parsers and tries to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses <code>parser</code> and outputs <code>Some(value)</code> if it succeeds, <code>None</code> …\nEquivalent to <code>p1.or(p2)</code>.\nAlias over <code>Opaque</code> where the function can be a plain …\nEquivalent to <code>p.and_then(f)</code>.\nReturns a parser where <code>P::PartialState</code> is boxed. Useful as …\nReturns a parser where <code>P::PartialState</code> is boxed. Useful as …\n<code>attempt(p)</code> behaves as <code>p</code> except it acts as if the parser …\nConstructs the parser lazily on each <code>parse_*</code> call. This is …\nEquivalent to <code>p.flat_map(f)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes a parser that outputs a string like value (<code>&amp;str</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the parser lazily on each <code>parse_*</code> call. Can be …\n<code>look_ahead(p)</code> acts as <code>p</code> but doesn’t consume input on …\nEquivalent to <code>p.map(f)</code>.\nSucceeds only if <code>parser</code> fails. Never consumes any input.\nCreates a parser from a function which takes a function …\nConstructs a parser which returns the tokens parsed by …\n<code>try(p)</code> behaves as <code>p</code> except it acts as if the parser hadn’…\nEquivalent to <code>p.expected(info)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>p1.message(msg)</code>.\nEquivalent to <code>p.silent()</code>.\nAlways fails with <code>message</code> as an unexpected error. Never …\nAlways fails with <code>message</code> as an unexpected error. Never …\nConstructs a parser out of an environment and a function …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a function, turning it into a parser.\nParses any token.\nSucceeds only if the stream is at end of input, fails …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a character and succeeds if the character is equal …\nExtract one token and succeeds if it is not part of <code>tokens</code>.\nExtract one token and succeeds if it is part of <code>tokens</code>.\nParser which just returns the current position in the …\nParses a token and succeeds depending on the result of …\nParses a token and passes it to <code>predicate</code>. If <code>predicate</code> …\nParses a character and succeeds if the character is equal …\nParses multiple tokens.\nParses multiple tokens.\nAlways returns the value <code>v</code> without consuming any input.\nFound the pattern at this offset\nDid not find the pattern but the parser can skip ahead to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nZero-copy parser which reads a range of length <code>i.len()</code> and …\nZero-copy parser which returns consumed input range.\nZero-copy parser which returns a pair: (consumed input …\nZero-copy parser which reads a range of length <code>n</code>.\nSearches the entire range using <code>searcher</code> and then consumes …\nZero-copy parser which reads a range of 0 or more tokens …\nZero-copy parser which reads a range of 0 or more tokens …\nZero-copy parser which reads a range of 1 or more tokens …\nParses <code>p</code> 1 or more times separated by <code>op</code>. The value …\nParses <code>p</code> one or more times separated by <code>op</code>. The value …\nParses <code>parser</code> from zero up to <code>count</code> times.\nParses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>…\nParses an escaped string by first applying <code>parser</code> which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the iterator to a <code>ParseResult</code>, returning <code>Ok</code> if …\nParses <code>p</code> zero or more times returning a collection with …\nParses <code>p</code> one or more times returning a collection with the …\nParses <code>parser</code> zero or more time separated by <code>separator</code>, …\nParses <code>parser</code> one or more time separated by <code>separator</code>, …\nParses <code>parser</code> zero or more times separated and ended by …\nParses <code>parser</code> one or more times separated and ended by …\nParses <code>parser</code> from zero up to <code>count</code> times skipping the …\nParses <code>parser</code> from <code>min</code> to <code>max</code> times (including <code>min</code> and <code>max</code>)\nParses <code>p</code> zero or more times ignoring the result.\nParses <code>p</code> one or more times ignoring the result.\nSkips input until <code>end</code> is encountered or <code>end</code> indicates that …\nTakes input until <code>end</code> is encountered or <code>end</code> indicates that …\nParses <code>open</code> followed by <code>parser</code> followed by <code>close</code>. Returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>p.then(f)</code>.\nEquivalent to <code>p.then_partial(f)</code>.\nEquivalent to <code>p1.with(p2)</code>.\nA <code>RangeStream</code> which is capable of providing it’s entire …\nThe type of items which is yielded from this stream.\nWrapper around iterators which allows them to be treated …\nStream type which indicates that the stream is partial if …\nNewtype around a pointer offset into a slice stream (<code>&amp;[T]</code>/…\nType which represents the position in a stream. <code>Ord</code> is …\nA type which has a position.\nTrait representing a range of elements.\nThe type of a range of items yielded from this stream. …\nA <code>RangeStream</code> is an extension of <code>Stream</code> which allows for …\nA <code>RangeStream</code> is an extension of <code>StreamOnce</code> which allows …\nNewtype for constructing a stream from a slice where the …\nA stream of tokens which can be duplicated\nConvenience alias over the <code>StreamError</code> for the input …\n<code>StreamOnce</code> represents a sequence of items that can be …\nDecodes <code>input</code> using <code>parser</code>.\nReturns the distance between <code>self</code> and <code>end</code>. The returned …\nStream wrapper which provides an informative and easy to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the range does not contain any elements (…\nReturns <code>true</code> if this stream only contains partial input.\nReturns the remaining length of <code>self</code>. The returned length …\nCreates a <code>StreamOnce</code> instance from a value implementing …\nConverts an <code>Iterator</code> into a stream.\nReturns the current position of the stream.\nReturns the entire range of <code>self</code>\nStateful stream wrappers.\nConverts the pointer-based position into an indexed …\nTakes a stream and removes its first item, yielding the …\nTakes <code>size</code> elements from the stream. Fails if the length …\nRemoves items from the input while <code>predicate</code> returns <code>true</code>.\nTakes items from stream, testing each one with <code>predicate</code>. …\nTakes items from stream, testing each one with <code>predicate</code> …\nTakes items from stream, testing each one with <code>predicate</code> …\n<code>Stream</code> which buffers items from an instance of <code>StreamOnce</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>BufferedStream</code> from a <code>StreamOnce</code> instance …\nEnum used to store information about an error that has …\nStruct which hold information about an error that occurred …\nError indicating that the parser expected something else\nEnum holding error information. Variants are defined for …\nGeneric message\nVariant for containing other types of errors\nConvenience alias over <code>Errors</code> for <code>StreamOnce</code> types which …\nError indicating an unexpected token has been encountered …\nAdds an error if <code>error</code> does not exist in this <code>ParseError</code> …\nConstructs an error with no other information than the …\nReturns the <code>end_of_input</code> error.\nConstructs an end of input error. Should be returned by …\nA vector containing specific information on what errors …\nA vector containing specific information on what errors …\nFormats a slice of errors in a human readable way.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>ParseError</code> with multiple causes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps the position to a new value\nMaps all range variants to a new value.\nMaps all token variants to a new value\nMerges two <code>ParseError</code>s. If they exist at the same position …\nConstructs a new <code>ParseError</code> which occurred at <code>position</code>.\nThe position where the error occurred\nThe position where the error occurred\nRemoves all <code>Expected</code> errors in <code>self</code> and adds <code>info</code> instead.\nDefines a default <code>Positioner</code> type for a particular <code>Stream</code> …\nThe <code>IndexPositioner&lt;Item, Range&gt;</code> struct maintains the …\nThe type which keeps track of the position\nTrait for tracking the current position of a <code>Stream</code>.\nTrait for tracking the current position of a <code>RangeStream</code>.\nStruct which represents a position in a source file.\nThe <code>State&lt;I&gt;</code> struct maintains the current position in the …\nCurrent column of the input\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe input stream used when items are requested\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent line of the input\nCreates a new <code>State&lt;I, X&gt;</code> from an input stream and its …\nReturns the current position\nThe positioner used to update the current position\nUpdates the position given that <code>item</code> has been taken from …\nUpdates the position given that <code>range</code> has been taken from …\nCreates a new <code>State&lt;I, X&gt;</code> from an input stream and a …")
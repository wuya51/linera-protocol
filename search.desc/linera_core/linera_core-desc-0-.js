searchState.loadedDescShard("linera_core", 0, "This module defines the core Linera protocol.\nAn extension trait for the <code>JoinSet</code> type.\nA handle to a task spawned with <code>JoinSetExt</code>.\nAborts the task.\nAwaits all tasks spawned in this <code>JoinSet</code>.\nA worker to handle a single chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the task is still running.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReaps tasks that have finished.\nSpawns a <code>future</code> task on this <code>JoinSet</code> using <code>JoinSet::spawn</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe actor worker type.\nConfiguration parameters for the <code>ChainWorkerState</code>.\nA request for the <code>ChainWorkerActor</code>.\nThe state of the chain worker.\nHandle cross-chain request to confirm that the recipient …\nDescribe an application.\nSearch for a bundle in one of the chain’s inboxes.\nRequest a read-only view of the <code>ChainStateView</code>.\nHandle a proposal for the next block on this chain.\nHandle a <code>ChainInfoQuery</code>.\nProcess a confirmed block (a commit).\nProcess a cross-chain update.\nProcess a leader timeout issued for this multi-owner chain.\nProcess a validated block issued for this multi-owner …\nQuery an application’s state.\nRead the <code>BytecodeLocation</code> for a requested <code>BytecodeId</code>.\nReads the certificate for a requested <code>BlockHeight</code>.\nExecute a block but discard any changes to the chain state.\nWhether inactive chains are allowed in storage.\nWhether new messages from deprecated epochs are allowed.\nReturns the <code>ChainId</code> of the chain handled by this worker.\nReturns the current <code>QueryContext</code> for the current chain …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlocks with a timestamp this far in the future will still …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets a reference to the <code>KeyPair</code>, if available.\nThe signature key pair of the validator. The key may be …\nSpawns a new task to run the <code>ChainWorkerActor</code>, returning …\nCreates a new <code>ChainWorkerState</code> using the provided <code>storage</code> …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the worker until there are no more incoming requests.\nConfigures the <code>key_pair</code> in this <code>ChainWorkerConfig</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrapper for <code>AbortHandle</code> that aborts when its dropped.\nAutomatically accept all incoming messages. Reject them …\nClient to operate a chain by interacting with validators …\nError type for <code>ChainClient</code>.\nA builder that creates <code>ChainClients</code> which share the cache …\nDon’t include any messages in blocks, and don’t make …\nPolicies for automatically handling incoming messages.\nAutomatically reject tracked messages, ignore or skip …\nAdds pending blobs\nGets the ID of the admin chain.\nThe ID of the admin chain.\nGets the hash of the latest known block.\nLatest block hash, if any.\nBurns tokens.\nGets the ID of the associated chain.\nObtains the basic <code>ChainInfo</code> data for the local chain.\nObtains the basic <code>ChainInfo</code> data for the local chain, with …\nObtains a <code>ChainStateView</code> for a given <code>ChainId</code>.\nChanges the application permissions configuration on this …\nChanges the ownership of this chain. Fails if it would …\nClaims money in a remote chain.\nClears the information on any operation that previously …\nCloses the chain (and loses everything in it!!).\nCreates an application by instantiating some bytecode.\nCreates an application by instantiating some bytecode.\nCreates a new <code>ChainClient</code>.\nWhether to block on cross-chain message delivery.\nObtains the current epoch of the given chain as well as …\nObtains the epochs of the committees trusted by the local …\nExecutes an operation.\nExecutes a list of operations.\nExecutes a list of operations, without calling …\nDeprecates all the configurations of voting rights but the …\nDownloads the blobs from the specified validator and …\nAttempts to download new received certificates from a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nObtains the identity of the current owner of the chain. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtains the key pair associated to the current identity.\nKnown key pairs from present and past identities.\nSpawns a task that listens to notifications about the …\nReads the local balance of the chain account.\nObtains the committee for the current epoch of the local …\nReturns a reference to the <code>LocalNodeClient</code> of the client.\nReads the local balance of a user account.\nMaximum number of pending messages processed at a time in …\nThe policy for automatically handling incoming messages.\nCreates a new <code>Client</code> with a new cache and notifiers.\nGets the next block height.\nSequence number that we plan to use for the next block. We …\nOpens a new chain with a derived UID.\nGets the per-<code>ChainClient</code> options.\nGets a guarded reference to the set of pending blobs.\nThis contains blobs belonging to our <code>pending_block</code> that …\nGets a guarded reference to the next pending block.\nPending block.\nCreates an empty block to process all incoming messages. …\nCreates an empty block to process all incoming messages. …\nProcesses the last pending block\nObtains the public key associated to the current identity.\nPublishes some blob.\nPublishes some bytecode.\nQueries an application.\nObtains the local balance of the chain account after …\nObtains the local balance of a user account after staging …\nQueries a system application.\nQueries a user application.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nProcesses confirmed operation for which this chain is a …\nProcesses a confirmed block for which this chain is a …\nSupport synchronization of received certificates.\nRequests a <code>RegisterApplications</code> message from another chain …\nRequests a leader timeout vote from all validators. If a …\nRotates the key of the chain.\nAdds another owner to the chain, and turns existing super …\nCreates a new committee and starts using it (admin chains …\nGets a shared reference to the chain’s state.\nReturns the storage client used by this client’s local …\nReturns the storage client used by this client’s local …\nSubscribes to notifications from this client’s chain.\nStarts listening to the admin chain for new committees. …\nStarts listening to the given chain for published …\nDownloads and processes any certificates we are missing …\nAttempts to synchronize chains that have sent us messages …\nGets the earliest possible timestamp for the next block.\nThe earliest possible timestamp for the next block.\nSends money.\nTransfers ownership of the chain to a single super owner.\nSends tokens to a chain.\nSends money to a chain. Do not check balance. (This may …\nDownloads any certificates from the specified validator …\nStops listening to the admin chain for new committees. …\nStops listening to the given chain for published bytecodes.\nAttempts to update all validators about the local chain.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA range of block heights as used in ChainInfoQuery.\nRequest information about a chain.\nThe response to an <code>ChainInfoQuery</code>\nThe outcome of trying to commit a list of operations to …\nThe operations were committed successfully.\nAcknowledge the height of the highest confirmed blocks …\nAn internal request between chains within a validator.\nCommunicate a number of confirmed blocks from the sender …\nWe are not the round leader and cannot do anything. Try …\nThe last block hash, if any.\nThe current balance.\nThe chain ID.\nThe chain ID.\nThe current number of received certificates (useful for …\nThe chain description.\nThe number identifying the current configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the cross-chain request has messages lower …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the committee in the latest epoch.\nOptional limit on the number of elements.\nThe state of the chain authentication.\nThe height after the latest block in the chain.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nQuery the current committees.\nInclude a vote to switch to fallback mode, if appropriate.\nInclude a timeout vote for the current round, if …\nQuery values from the chain manager, not just votes.\nRequest the balance of a given <code>Owner</code>.\nQuery the received messages that are waiting be picked in …\nQuery new certificate sender chain IDs and block heights …\nQuery a range of certificate hashes sent from the chain.\nThe current committees.\nThe requested owner balance, if any.\nThe received messages that are waiting be picked in the …\nThe response to …\nThe response to <code>request_sent_certificate_hashes_in_range</code>\nSigns the <code>ChainInfo</code> stored inside this <code>ChainInfoResponse</code> …\nCreates a range containing only the single specified block …\nStarting point\nThe hash of the current execution state.\nWhere to send the cross-chain request.\nOptionally test that the block height is the one expected.\nThe earliest possible timestamp for the next block.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA local node with a single worker, typically used by …\nA client to a local node.\nError type for the operations on a local node.\nObtains the certificate containing the specified message.\nReturns a read-only view of the <code>ChainStateView</code> of a chain …\nDownloads and processes all certificates up to (excluding) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nDownloads and stores the specified hashed certificate …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWhether to wait for the delivery of outgoing cross-chain …\nA pinned <code>Stream</code> of Notifications, without the <code>Send</code> …\nHow to communicate with a validator node.\nTurn an address into a validator node.\nError type for node queries.\nA pinned <code>Stream</code> of Notifications.\nHow to communicate with a validator node.\nReturns the hash of the <code>Certificate</code> that last used a blob.\nReturns the hash of the <code>Certificate</code> that last used a blob.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the network’s genesis config hash.\nGets the network’s genesis config hash.\nGets the version info for this validator node.\nGets the version info for this validator node.\nProposes a new block.\nProposes a new block.\nProcesses a certificate.\nProcesses a certificate.\nHandles information queries for this chain.\nHandles information queries for this chain.\nProcesses a certificate without a value.\nProcesses a certificate without a value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nSubscribes to receiving notifications for a collection of …\nSubscribes to receiving notifications for a collection of …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA <code>Notifier</code> holds references to clients waiting to receive …\nReturns the argument unchanged.\nProcess multiple notifications of type …\nCalls <code>U::from(self)</code>.\nNotifies all the clients waiting for a notification from a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCreates a subscription given a collection of ChainIds and …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nObtains the basic <code>ChainInfo</code> data for the local validator …\nTries to find a (confirmation) certificate for the given …\nTries to find a (confirmation) certificate for the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ServiceStorage</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCreates a <code>RocksDbStorageBuilder</code> that uses the specified …\nCreates a <code>ServiceStorage</code> with the given Wasm runtime.\nCreates a <code>ScyllaDbStorageBuilder</code> that uses the specified …\nCreates a <code>MemoryStorageBuilder</code> that uses the specified …\nCreates a <code>DynamoDbStorageBuilder</code> that uses the specified …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nInstruct the networking layer to send cross-chain requests …\nNotification that a chain has a new certified block or a …\nReason for the notification.\nError type for worker operations..\nState of a worker in a validator or a local node.\nInserts a <code>Blob</code> into the worker’s cache.\nReturns a read-only view of the <code>ChainStateView</code> of a chain …\nThe cross-chain requests\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProcesses a certificate.\nProcesses a certificate, e.g. to extend a chain with a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe push notifications.\nGets a reference to the validator’s <code>PublicKey</code>.\nExecutes a <code>Query</code> for an application’s state on a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReturns a stored <code>Certificate</code> for a chain’s block.\nTries to execute a block proposal without any verification …\nReturns the storage client so that it can be manipulated …\nReturns an instance with the specified grace period, in …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")
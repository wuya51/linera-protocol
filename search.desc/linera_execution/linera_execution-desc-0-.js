searchState.loadedDescShard("linera_execution", 0, "This module manages the execution of the system …\nThe result of calling into a user application.\nThe state of a blob of binary data.\nThis message is a receipt automatically created when the …\nA WebAssembly module’s bytecode.\nA reference to where the application bytecode is stored.\nThe identifier of a channel, relative to a particular …\nAn implementation of the system API made available to …\nA type for errors happening during execution.\nExternally visible results of an execution, tagged by …\nRequests to the execution state.\nConfiguration options for the execution runtime available …\nRequirements for the <code>extra</code> field in our state views (and …\nA view accessing the execution state of a chain.\nAttempts to create an invalid <code>WasmRuntime</code> instance from a …\nA message to be sent and possibly executed in the receiver…\nThe kind of outgoing message being sent.\nAn operation to be executed in a block.\nThe message cannot be skipped nor rejected. No receipt is …\nAn query to be sent and possibly executed in the receiver…\nExternally visible results of an execution. These results …\nA message together with routing information.\nA collection of prices and limits associated with block …\nThe resources used so far by an execution process.\nThe response to a query.\nA request to the service runtime actor.\nAn implementation of the system API made available to …\nThe message can be skipped or rejected. No receipt is …\nA system operation.\nA system message.\nA system query.\nA system response.\nCommon host data used as the <code>UserData</code> of the system API …\nThe message cannot be skipped but can be rejected. A …\nTracks oracle responses and execution outcomes of an …\nA user operation (in serialized form).\nA user message (in serialized form).\nA user query (in serialized form).\nA user response (in serialized form).\nDescription of the necessary information to run a user …\nAlias for <code>linera_base::identifiers::ApplicationId</code>. Use …\nThe public entry points provided by the contract part of …\nAn implementation of <code>UserContractModule</code>.\nAn implementation of <code>UserContract</code>.\nA factory trait to obtain a <code>UserContract</code> from a …\nThe public entry points provided by the service part of an …\nAn implementation of <code>UserServiceModule</code>.\nAn implementation of <code>UserService</code>.\nA factory trait to obtain a <code>UserService</code> from a …\nAn implementation of the system API used to access the …\nA user contract in a compiled WebAssembly module.\nErrors that can occur when executing a user application in …\nThe runtime to use for running the application.\nA user service in a compiled WebAssembly module.\nTrait used to select a default WasmRuntime, if one is …\nThe account paying for the resource usage.\nCreates a policy where all categories have a small …\nThe current application ID.\nThe current application parameters.\nEnsures that the current time at block validation is …\nAsserts the existence of a data blob with the given hash.\nWhether the message is authenticated.\nThe optional authenticated caller application ID, if it …\n<code>None</code> if this is the transaction entrypoint or the caller …\nThe authenticated signer for this execution, if there is …\nThe authenticated signer of the operation, if any.\nThe authenticated signer of the operation that created the …\nThe authenticated signer of the operation, if any.\nThe signer who created the messages.\nObtains the balance of the account. The only possible …\nThe base price for creating a new block.\nThe current block height.\nThe number of blocks created.\nThe price of reading a byte.\nThe price of increasing storage by a byte.\nThe price of writing a byte\nThe bytecode to use for the application.\nThe unique ID of the bytecode to use for the application.\nThe location of the bytecode to use for the application.\nReturns the location of published bytecode with the given …\nReturns all the known locations of published bytecode.\nThe number of bytes read.\nThe change in the number of bytes being stored by user …\nThe number of bytes written.\nThe certificate that published the bytecode.\nThe hash of the remote certificate that created the …\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe current chain ID.\nThe chain ID broadcasting on this channel.\nReads the current ownership configuration for this chain.\nClaims amount from source to destination.\nCloses the current chain.\nConsumes some of the execution fuel.\nTests whether a key exists in the key-value store\nCreates the promise to test whether a key exists in the …\nResolves the promise to test whether a key exists in the …\nTests whether multiple keys exist in the key-value store\nCreates the promise to test whether multiple keys exist in …\nResolves the promise to test whether multiple keys exist …\nThe unique ID of the application’s creation.\nThe unique ID of the application’s creation.\nRetrieves an application’s description.\nRetrieves applications’ descriptions preceded by their …\nThe destination of the message.\nCreates a policy that matches the Devnet.\nAdds a new item to an event stream.\nEpoch of the <code>last_used_by</code> certificate.\nEvents recorded by contracts’ <code>emit</code> calls.\nApplies a message originating from a cross-chain message.\nApplies an operation from the current block.\nThe externally-visible result.\nFetches blob of bytes from an arbitrary URL.\nGet a blob of bytes from an arbitrary URL.\nFinishes execution of the current transaction.\nRetrieves the recursive dependencies of applications and …\nReads the data from the key/values having a specific …\nCreates the promise to access key/values having a specific …\nResolves the promise to access key/values having a …\nCreates the promise to access keys having a specific prefix\nResolves the promise to access keys having a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>WasmContractModule</code> using the WebAssembly …\nCreates a new <code>WasmServiceModule</code> using the WebAssembly …\nCreates a new <code>WasmContractModule</code> using Wasmer with the …\nCreates a new <code>WasmServiceModule</code> using Wasmer with the …\nCreates a new <code>WasmContractModule</code> using Wasmtime with the …\nCreates a new <code>WasmServiceModule</code> using Wasmtime with the …\nThe fuel used so far.\nCreates a policy with no cost for anything except fuel, …\nThe price per unit of fuel (aka gas) for VM execution.\nThe grant needed for message execution, typically …\nThe amount allocated to message grants.\nExecutes unmetered read-only queries on the state of this …\nThe current block height.\nThe current block height.\nThe current block height.\nMakes a POST request to the given URL and returns the …\nThe current index of the operation.\nInstantiate the application state on the chain that owns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the message was rejected by the original receiver …\nThe kind of outgoing message being sent.\nThe applications that are known by the chain.\nHash of the last <code>Certificate</code> that published or used this …\nLoad bytecode from a Wasm module file.\nThe local time in the node executing the query.\nThe maximum data to read per block\nThe maximum data to write per block\nOperates a 3-way merge by transferring the difference …\nThe base price of sending a message from a block.\nThe message itself.\nThe additional price for each byte in the argument of a …\nThe total size of the arguments of outgoing user messages.\nThe current message ID, if there is one.\nThe ID of the message (based on the operation height and …\nIf the current message (if there is one) was rejected by …\nThe number of outgoing messages created (system and user).\nSends messages to the given destinations, possibly …\nThe name of the channel.\nCreates a new <code>ServiceSyncRuntime</code> ready to execute using a …\nCreates a new <code>SystemApiData</code> using the provided <code>runtime</code> to …\nCreates a new <code>WasmContractModule</code> using the WebAssembly …\nCreates a new <code>WasmServiceModule</code> using the WebAssembly …\nThe height of the next block on this chain.\nCreates a policy with no cost for anything except fuel.\nOpens a new chain.\nThe base price of adding an operation to a block.\nThe additional price for each byte in the argument of a …\nThe total size of the arguments of user operations.\nThe number of operations executed.\nThe parameters of the application.\nThe (fixed) policy used to charge fees and control …\nThe application bytecodes that have been published.\nQueries a service.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads balance owners.\nReads the balance of the chain.\nReads a data blob content specified by a given hash.\nReads several keys from the key-value store\nCreates the promise to access several keys from the …\nResolves the promise to access several keys from the …\nThe price of one read operation.\nThe number of read operations.\nReads the owner balance.\nReads the balances from all owners.\nReads the system timestamp.\nReads the key from the key-value store\nCreates the promise to access a key from the key-value …\nResolves the promise to access a key from the key-value …\nWhere to send a refund for the unused part of each grant …\nWhere to send a refund for the unused part of each grant …\nRegisters an existing application.\nRegisters a newly created application.\nRegisters a published bytecode so that it can be used by …\nReturns the amount of execution fuel remaining before …\nAdds the oracle response to the record. If replaying, it …\nRequired dependencies.\nRuns the service runtime actor, waiting for …\nReturns a mutable reference the system API <code>Runtime</code>.\nSchedules a message to be sent.\nSimulates the instantiation of an application.\nSpawns a thread running the <code>ServiceSyncRuntime</code> actor.\nSchedules to subscribe to some <code>channel</code> on a <code>chain</code>.\nSubscribe chains to channels.\nSystem application.\nTracks the creation of a block.\nTracks the allocation of a grant.\nTracks the creation of an outgoing message.\nTracks the execution of an operation in block.\nHow the resources were used so far.\nThe index in the certificate of the operation that …\nTransfers amount from source to destination.\nCalls another application. Forwarded sessions will now be …\nQueries another application.\nNote that queries are not available from writable contexts.\nSchedules to unsubscribe to some <code>channel</code> on a <code>chain</code>.\nUnsubscribe chains to channels.\nSchedules application registration messages when needed.\nUser applications.\nThe return value.\nThis assumes that the current directory is one of the …\nAdds a <code>message</code> to this <code>ApplicationCallOutcome</code>.\nAdds a <code>message</code> to this <code>RawExecutionOutcome</code>.\nProvides a reference to the current execution state and …\nProvides a reference to the current execution state as …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites a batch of changes.\nThe price of one write operation.\nThe number of write operations.\nA set of validators (identified by their public keys) and …\nA number identifying the configuration of the chain (aka …\nThe identity of a validator.\nPublic state of validator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe network address (in a string format understood by the …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe voting power.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nTransfers to the balance of the given account.\nOperations that are only allowed on the admin chain.\nChannel used to broadcast reconfigurations.\nOperations that are only allowed on the admin chain.\nNotifies that a new application was created.\nThis is mainly a placeholder for future extensions.\nShares the locations of published bytecodes.\nNotifies that a new application bytecode was published.\nThe relative index of the <code>ApplicationCreated</code> message …\nChanges the application permissions configuration on this …\nChanges the ownership of the chain.\nClaims <code>amount</code> units of value from the given owner’s …\nCloses the chain.\nCreates a new application.\nRegisters a new committee. This will notify the …\nCredits <code>amount</code> units of value to the account <code>target</code> – …\nDoes nothing. Used to debug the intended recipients of a …\nThe relative index of the <code>OpenChain</code> message created by the …\nCreates (or activates) a new chain. This will …\nCreates (or activates) a new chain.\nThe configuration for a new chain.\nThe relative index of the <code>BytecodePublished</code> message …\nPublishes a new blob.\nPublishes a new application bytecode.\nChannel used to broadcast new published bytecodes.\nReads a blob. This is test-only, so we can test without a …\nThe recipient of a transfer.\nShares information about some applications to help the …\nRemoves a committee. Once the resulting <code>SetCommittees</code> …\nRequests a message from another chain to register a user …\nRequests a <code>RegisterApplication</code> message from the target …\nSets the current epoch and the recognized committees.\nSubscribes to a system channel.\nSubscribes to a channel.\nThe channels available in the system application.\nA view accessing the execution state of the system of a …\nA system message meant to be executed on a remote chain.\nA system operation.\nA query to the system state.\nThe response to a system query.\nTransfers <code>amount</code> units of value from the given owner’s …\nUnsubscribes from a system channel.\nUnsubscribes from a channel.\nOptional user message attached to a transfer.\nWithdraws <code>amount</code> units of value from the account and …\nThe admin of the chain.\nPermissions for applications on this chain.\nBalance of the chain. (Available to any user able to …\nBalances attributed to a given owner.\nReturns an iterator over all bytecode locations this …\nReturns the default recipient for the given chain (no …\nWhether this chain has been closed.\nThe committees that we trust, indexed by epoch number.\nReturns the current committee, if any.\nHow the chain was created. May be unknown for inactive …\nThe number identifying the current configuration.\nExecutes a cross-chain message that represents the …\nExecutes the sender’s side of an operation and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the system application state on a newly opened …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvariant for the states of active chains.\nThe <code>ChannelName</code> of this <code>SystemChannel</code>.\nReturns the messages to open a new chain, and subtracts …\nOwnership of the chain.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nTrack the locations of known bytecodes as well as the …\nReturns the default recipient for the root chain with the …\nTrack the channels that we have subscribed to.\nThe timestamp of the most recent block.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe number of initial rounds after 0 in which all owners …\nThe regular owners, with their weights that determine how …\nSuper owners can propose fast blocks in the first round, …\nThe timeout configuration: how long fast, multi-leader and …\nAn expected call to <code>UserContract::execute_message</code>.\nAn expected call to <code>UserContract::execute_operation</code>.\nAn expected call to a <code>MockApplicationInstance</code>.\nAn expected call to <code>UserContract::finalize</code>.\nAn expected call to <code>UserService::handle_query</code>.\nAn expected call to <code>UserContract::instantiate</code>.\nA mocked implementation of a user application.\nA mocked implementation of a user application instance.\nA system execution state, not represented as a view but as …\nPanics if there are still expected calls in one of the …\nCreates a new <code>MockApplicationInstance</code>, forwarding the …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nQueues an expected call to the <code>MockApplication</code>.\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCreates an <code>ExpectedCall</code> to the <code>MockApplicationInstance</code>’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nCreates <code>count</code> <code>MockApplication</code>s and registers them in the …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")
searchState.loadedDescShard("linera_alloy", 1, "Returns whether or not the block matches the given …\nReturns <code>true</code> if the bloom matches the topics\nMax number of peers\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nCreates a new instance with the given input data.\nAccount meta JSON\nAlias of <code>author</code>\nCheck if all necessary keys are present to build a …\nMix Hash\nAccount name\nAccount name\nThe node’s user agent, containing a client name, …\nNode client ID\nNetwork information\nCreates a new <code>BlockNumHash</code> from a block number and hash.\nCreate new ReceiptWithBloom\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nCreates a new instance with the given input data.\nCreate a new <code>Extra</code>.\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nSets the nonce for the transaction.\nThe account nonce.\nNonce\nThe nonce of the transaction.\nNonce\nCreates a new block number instance.\nBlock number\nBlock number\nBlock number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nSupport for capturing other fields\nAll fields not present in the inner struct.\nSupport for arbitrary additional fields.\nArbitrary extra fields.\nAll fields not present in the inner struct.\nEIP-4788 parent beacon block root\nHash of the parent\nDetailed information on peers\nCreates a new “pending” tag instance.\nPIP protocol information.\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nThe node’s listening ports.\nThe proof-of-work hash.\nCheck this builder’s preferred type, based on the fields …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nThe protocols that the node supports, with protocol …\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nThe R field of the signature; the point on the curve.\nOverrides the prevrandao of the block.\nEthereum log object.\nThe receipt.\nTransactions receipts root hash\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nAlloy basic Transaction Request type.\nEIP-7685 requests root.\nWhether the block must be a canonical block\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nCalculate the length of the rlp payload of the network …\nCalculate the length of the rlp payload of the network …\nThe S field of the signature; the point on the curve.\nCreates a new “safe” tag instance.\nThe seed hash.\nSets the inner filter object\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\nSets the EIP-2930 access list.\nSets the block number this range filter should start at.\nPins the block hash this filter should target.\nSets the block number this range filter should end at.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nInteger the size of this block in bytes.\nStarting block\nbindings for state overrides in eth_call\nState root hash\nThe post-transaction stateroot (pre Byzantium)\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nReturns the success status of the receipt’s transaction.\nReturns the status of the transaction.\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe target.\nOverrides the timestamp of the block.\nTimestamp\nSets the recipient address for the transaction.\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nSets the to block number\nReturns a list of Bloom (BloomFilter) corresponding to the …\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nGetter for the topic0 field.\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nGetter for the topics field. Shortcut for …\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nReturns the BloomFilter for the given topics\nGet the topic list, mutably. This gives access to the …\nTotal difficulty\nRPC types for transactions\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nReturns the transaction type.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nTransactions root hash\nTrim field conflicts, based on the preferred type\nConsumes the type and returns the optional input data.\nReturn the <code>TxType</code> of the inner receipt.\nReturns an iterator over the transactions (if any). This …\nTypes for the <code>txpool</code> namespace: …\nThe transaction type.\nReturns an instance of BlockTransactions with the Uncle …\nUncles’ hashes.\nHash of the uncles\nReturns the optional input data.\nAccount UUID (<code>None</code> for address book entries)\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nIndex of validator associated with withdrawal.\nSets the value (amount) for the transaction.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nTransferred value\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nReturns a new <code>TransactionInfo</code> with the provided base fee.\nCalculates the bloom filter for the receipt and returns …\nWithdrawals in the block.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nThe y parity of the signature. This is only used for typed …\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type that is supposed to capture additional fields that …\nDeserialized this type into another container type\nReturns the argument unchanged.\nReturns the deserialized value of the field, if it exists\nReturns the deserialized value of the field, if it exists. …\nCalls <code>U::from(self)</code>.\nCreates a new instance\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nEthereum Log\nContract that emitted this log.\nArbitrary length data.\nCalculate receipt logs bloom.\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents <em>all</em> transaction requests to/from RPC.\nAn EIP-2930 access list, which lowers cost for accessing …\nBlob versioned hashes for EIP-4844 transactions.\nThe chain ID for the transaction.\nTransaction data\nReturns the argument unchanged.\nThe address of the transaction author.\nThe gas limit for the transaction.\nThe legacy gas price.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nThe max fee per blob gas for EIP-4844 blob transactions.\nThe max base fee per gas the sender is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe nonce of the transaction.\nBlob sidecar for EIP-4844 transactions.\nThe destination address of the transaction.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nThe value transferred in the transaction, in wei.\nA storage key type that can be serialized to and from a …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelpers for dealing with numbers. Numeric serde helpers.\nSerde serialization and deserialization for <code>bool</code> as <code>0x0</code> or …\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nJson U256 serde helpers.\nserde functions for handling primitive optional <code>u128</code> via …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nserde functions for handling <code>Vec&lt;u128&gt;</code> via U128\nserde functions for handling primitive <code>u128</code> via U128\nserde functions for handling <code>Option&lt;u64&gt;</code> via U64\nserde functions for handling <code>u64</code> via U64\nserde functions for handling <code>Option&lt;u8&gt;</code> via U8\nserde functions for handling <code>u8</code> via U8\nDeserializes an <code>Option&lt;u128&gt;</code> accepting a hex quantity …\nSerializes <code>Option&lt;u128&gt;</code> as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>Option</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u64</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>Option</code> from U8 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u8</code> from U8 accepting a hex quantity string …\nSerializes u64 as hex string\nDeserializes a <code>bool</code> via a U1 quantity.\nSerializes a <code>bool</code> via a U1 quantity.\nA storage key type that can be serialized to and from a …\nDeserializes the input into an Option&lt;HashMap&lt;B256, …\nConverts a Bytes value into a B256, accepting inputs that …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nCustom account override used in call\nA set of account overrides\nFake balance to set for the account before executing the …\nFake EVM bytecode to inject into the account before …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFake nonce to set for the account before executing the …\nFake key-value mapping to override all slots in the …\nFake key-value mapping to override individual slots in the …\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nError variants when converting from crate::Transaction to …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nExcess blob gas integer conversion error\nGas limit integer conversion error\nGas used integer conversion error\nInvalid signature\nReceipt envelope with no type flag.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nContainer type for all signature fields in RPC\n<code>linera_alloy_primitives::SignatureError</code>.\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nAccount addresses that would be loaded at the start of …\nBase fee of the block.\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe blob commitments.\nContract address created, or None if not a deployment.\nGas used\nTransaction data\nDecodes the inner BlobTransactionSidecar fields from RLP …\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nThe price paid post-execution by the transaction (i.e. …\nEncodes the inner BlobTransactionSidecar fields as RLP …\nOutputs the RLP length of the BlobTransactionSidecar …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nThe gas limit for the transaction.\nGas amount\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nHash\nIndex of the transaction in the block\nThe inner struct.\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts Transaction into TransactionRequest.\nReturns true if the transaction is a legacy or 2930 …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nLog send from contracts.\nThe bloom filter.\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nConstructs a new BlobTransactionSidecar from a set of …\nThe nonce of the transaction.\nNonce\nMisc Optimism-specific types.\nAll fields not present in the inner struct.\nArbitrary extra fields.\nThe blob proofs.\nThe R field of the signature; the point on the curve.\nThe receipt.\nThe S field of the signature; the point on the curve.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nCalculates a size heuristic for the in-memory size of the …\nThe post-transaction stateroot (pre Byzantium)\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nTransaction Hash.\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nThe transaction type.\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nThe value transferred in the transaction, in wei.\nTransferred value\nReturns the versioned hash for the blob at the given …\nReturns an iterator over the versioned hashes of the …\nThe y parity of the signature. This is only used for typed …\nOptimism specific transaction fields\nAdditional fields for Optimism transaction receipts\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nTransaction Pool Content\nTransaction Pool Content From\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nTransaction Pool Status\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas amount\nGas Price\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npending tx\npending tx\npending tx\nnumber of pending tx\nqueued tx\nqueued tx\nqueued tx\nnumber of queued tx\nRemoves the transactions from the given sender\nRecipient (None when contract creation)\nTransferred value\n<code>ecdsa</code> error.\nContains the error value\nGeneric error type for <code>Signer</code> implementations.\n<code>hex</code> error.\nContains the success value\nGeneric error.\nResult type alias for <code>Error</code>.\n<code>sign_hash</code> is not supported by the signer.\n<code>sign_message</code> is not supported by the signer.\n<code>sign_transaction</code> is not supported by the signer.\n<code>sign_typed_data</code> is not supported by the signer.\nAn ECDSA Signature, consisting of V, R, and S.\nSignature error.\nAsynchronous Ethereum signer.\nSynchronous Ethereum signer.\nMismatch between provided transaction chain ID and signer …\nThis operation is not supported by the signer.\nAn unsupported signer operation.\nReturns the signer’s Ethereum Address.\nReturns the string representation of the operation.\nReturns the signer’s chain ID.\nReturns the signer’s chain ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error is <code>UnsupportedOperation</code>.\nConstructs a new <code>Other</code> error.\nSets the signer’s chain ID.\nSigns the given hash.\nSigns the given hash.\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nUtility to get and set the chain ID on a transaction and …\nReturns the <code>UnsupportedSignerOperation</code> if the error is …\nUtility functions for working with Ethereum signatures.\nSets the signer’s chain ID and returns <code>self</code>.\nThe signer’s chain ID.\nThe chain ID provided by the transaction.\nsecp256k1 curve point expressed in affine coordinates.\nCompressed SEC1-encoded secp256k1 (K-256) curve point.\nSEC1-encoded secp256k1 (K-256) curve point.\nsecp256k1 (K-256) field element serialized as bytes.\nBase point of secp256k1.\nBase point of secp256k1.\nAdditive identity of the group: the point at infinity.\nAdditive identity of the group: the point at infinity.\nNon-zero secp256k1 (K-256) scalar field element.\nMultiplicative identity.\nA point on the secp256k1 curve in projective coordinates.\nsecp256k1 (K-256) public key.\nScalars are elements in the finite field modulo n.\nsecp256k1 (K-256) elliptic curve.\nsecp256k1 (K-256) secret key.\n256-bit unsigned big integer.\nBytes used by a wide reduction: twice the width of …\nZero scalar.\nReturns self + rhs mod n.\nDoubles this point.\nElliptic Curve Digital Signature Algorithm (ECDSA).\nCalculates SECP256k1 endomorphism: <code>self * lambda</code>.\nCheck whether <code>self</code> is equal to an affine point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the given <code>EncodedPoint</code> as an …\nAttempts to parse the given byte array as an SEC1-encoded …\nReturns a (nearly) uniformly-random scalar, generated in …\nReturns a uniformly-random scalar, generated using …\nReturns the base point of secp256k1.\nReturns the base point of SECP256k1.\nReturns the identity of the group: the point at infinity.\nReturns the additive identity of SECP256k1, also known as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the scalar.\nFast variable-time inversion using Stein’s algorithm.\nIs this point the identity point?\nChecks if the scalar is zero.\nModulo multiplies two scalars.\nCalculates <code>k * G</code>, where <code>G</code> is the generator.\nNegates the scalar.\nRight shifts the scalar.\nTonelli-Shank’s algorithm for q mod 16 = 1 …\nModulo squares the scalar.\nReturns self - rhs mod n.\nReturns the affine representation of this point.\nReturns the SEC1 encoding of this scalar.\nConvert to curve representation.\nECDSA/secp256k1 signature (ASN.1 DER encoded)\nSignature errors.\nMaximum supported value for the recovery ID (inclusive).\nRecovery IDs, a.k.a. “recid”.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nCreate a new error with an associated source.\nLow-level ECDSA primitives.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of 𝑘×𝑮 overflow the …\nIs the affine y-coordinate of 𝑘×𝑮 odd?\nCreate a new error with no associated source\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use …\nGiven a public key, message, and signature, use trial …\nGiven a public key, message digest, and signature, use …\nPreferred digest to use when computing ECDSA signatures …\nBind a preferred <code>Digest</code> algorithm to an elliptic curve …\nTry to sign the given prehashed message using ECDSA.\nVerify the given prehashed message using ECDSA.\nPartial implementation of the <code>bits2int</code> function as defined …\nSign a prehashed message digest using the provided secret …\nTry to sign the prehashed message.\nTry to sign the given message digest deterministically …\nVerify message digest against the provided signature.\nVerify the prehashed message against the provided ECDSA …\nVerify the prehashed message against the provided ECDSA …\nPreferred <code>Digest</code> algorithm to use when computing this …\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nVerify the provided signature for the given prehashed …\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as …\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …\nSign the given message using the provided external …\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure …\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced …\nFixed size output value which provides a safe <code>Eq</code> …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually …\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the …\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of …\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to …\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and reset the hasher …\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to “…\nInitialize value from the <code>inner</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>Output</code> array this type wraps.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate a new <code>CtOutput</code> value.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using left side bytes …\nCheck truncated tag correctness using right side bytes …\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer …\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer …\nLazy block buffer.\nDigest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …\nCompress remaining data after padding it with <code>delim</code>, zeros …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn slice of data stored inside the buffer.\nReturn current cursor position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPad message with 0x80, zeros and 128-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nCreate new buffer from slice.\nPad remaining data with zeros and return resulting block.\nReturn number of remaining bytes in the internal buffer.\nReset buffer by setting cursor position to zero.\nSet buffer content and cursor position.\nSet <code>data</code> to generated blocks.\nReturn size of the internal buffer in bytes.\nCreate new buffer from slice.\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice containing the entire array.\nReturns the remaining items of this iterator as a slice\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts slice to a generic array reference with inferred …\nConverts mutable slice to a mutable generic array reference\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Pow</code>: …\nA <strong>type operator</strong> that computes the greatest common divisor …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nThe concrete value for the type. Can be used in <code>const</code> …\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nAlias for the associated type of <code>Len</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Logarithm2</code>: …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: …\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: …\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> …\nAlias for the associated type of <code>PartialDiv</code>: …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\n<code>TArr</code> is a type that acts as an array of types. It is …\nA <strong>type operator</strong> for taking a concrete integer value from a …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: …\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> …\nType aliases for many constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType-level signed integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing the integer 0.\nInstantiates a singleton representing this unsigned …\nInstantiates a singleton representing this unsigned …\nConvenient type operations.\nAliases for the type operators used in this crate. Their …\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nCreate a new type-level array. Only usable on Rust 1.13.0 …\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nAlias for the associated type of <code>Pow</code>: …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nAlias for the associated type of <code>Len</code>: …\nAlias for the associated type of <code>Logarithm2</code>: …\nAlias for the associated type of <code>Max</code>: …\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nAlias for the associated type of <code>Neg</code>: …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nAlias for the associated type of <code>PartialDiv</code>: …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\nAlias for the associated type of <code>BitXor</code>: …\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nA <strong>type operator</strong> that computes the greatest common divisor …\nThe concrete value for the type. Can be used in <code>const</code> …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a …\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nA <strong>type operator</strong> that, when implemented for unsigned …\nAlias for the result of calling <code>SetBit</code>: …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an “arc” (i.e. integer …\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of …\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID …\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMaximum size of a BER/DER-encoded OID in bytes.\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nGet the OID associated with this value.\nGet the parent OID of this one (if applicable).\nPush an additional arc onto this OID, returning the child …\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually …\nTypes which can be initialized from another type and …\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the …\nInitialization vector (nonce) used by <code>IvSizeUser</code> …\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization …\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nReturn block size in bytes.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReturn output size in bytes.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nSign the provided message prehash using the provided …\nAttempt to sign the given message digest, returning a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nAn extension trait that is automatically implemented for …\nError type of random number generators\nCodes below this point represent OS Errors (i.e. positive …\nA random number generator that retrieves randomness from …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nRetrieve the error code, if any.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the …\nCreate a new PRNG using a <code>u64</code> seed.\nUnwrap the inner error (<code>std</code> only)\nFill <code>dest</code> entirely with random data.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the …\nGenerate a new set of results immediately, setting the …\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nReset the number of available results. This will force a …\nReset the number of available results. This will force a …\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nHow many bits of information can be reliably stored in the …\nElliptic curve.\nElliptic curve with an arithmetic implementation.\nPrime order elliptic curve group.\nGenerator of the <code>t-order</code> multiplicative subgroup.\nContains the error value\nElliptic curve errors.\nThis trait represents an element of a field.\nByte representation of a base/scalar field element of a …\nTrait for decoding/encoding <code>Curve::Uint</code> from/to <code>FieldBytes</code> …\nSize of serialized field elements of this elliptic curve.\nSize of a serialized field element in bytes.\nThis trait represents an element of a cryptographic group.\nModulus of the field written as a string for debugging …\nScalar modulus.\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nNon-zero scalar type.\nThe one element of the field, the multiplicative identity.\nMultiplicative identity.\nOrder of this elliptic curve, i.e. number of elements in …\nContains the success value\nThe output of the batch normalization; a container of …\nMarker trait for elliptic curves with prime order.\nPrime order elliptic curve with projective arithmetic …\nThis represents an element of a non-binary prime field.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nElliptic curve public keys.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nResult type with the <code>elliptic-curve</code> crate’s <code>Error</code> type.\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nScalar field element for a particular elliptic curve.\nScalars modulo the order of this group’s scalar field.\nScalar field modulo this curve’s order.\nGeneric scalar type with primitive functionality.\nElliptic curve secret keys.\nInverse of $2$ in the field.\nInteger type used to represent field elements of this …\nThe zero element of the field, the additive identity.\nZero scalar.\nBorrow the inner <code>AffinePoint</code> from this <code>PublicKey</code>.\nBorrow the inner limbs as a slice.\nBorrow the inner secret <code>ScalarPrimitive</code> value.\nBorrow the inner <code>C::Uint</code>.\nPerform a batched conversion to affine representation on a …\nCubes this element.\nDecode unsigned integer from serialized field element.\nDoubles this element.\nDoubles this element.\nEncode unsigned integer into serialized field element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>AffinePoint</code> into a <code>PublicKey</code>\nDecode <code>ScalarPrimitive</code> from a serialized field element\nDeserialize secret key from an encoded secret scalar.\nInitialize <code>PublicKey</code> from an <code>EncodedPoint</code>\nAttempts to convert a byte representation of a field …\nDecode a <code>NonZeroScalar</code> from a big endian-serialized field …\nAttempts to convert a byte representation of a field …\nDecode <code>PublicKey</code> (compressed or uncompressed) from the …\nDeserialize secret key encoded in the SEC1 ASN.1 DER …\nCompute a <code>PublicKey</code> from a secret <code>NonZeroScalar</code> value …\nDecode <code>ScalarPrimitive</code> from a big endian byte slice.\nDeserialize secret key from an encoded secret scalar …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nCreate a <code>NonZeroScalar</code> from a <code>C::Uint</code>.\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nReturns true iff this element is even.\nIs this <code>ScalarPrimitive</code> value even?\nDetermines if this point is the identity.\nReturns true iff this element is odd.\nIs this <code>ScalarPrimitive</code> value odd?\nReturns true iff this element is zero.\nIs this <code>ScalarPrimitive</code> value equal to zero?\nReturns true iff this element is zero.\nCreate a <code>NonZeroScalar</code> from a scalar.\nCreate a new scalar from <code>Curve::Uint</code>.\nCreate a new secret key from a scalar value.\nTraits for arithmetic operations on elliptic curve field …\nTraits for elliptic curve points.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nGet the <code>PublicKey</code> which corresponds to this secret key\nReturns an element chosen uniformly at random using a …\nReturns an element chosen uniformly at random from the …\nGenerate a random <code>NonZeroScalar</code>.\nGenerate a random <code>ScalarPrimitive</code>.\nGenerate a random <code>SecretKey</code>.\nScalar types.\nSupport for SEC1 elliptic curve encoding formats.\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nEncode <code>ScalarPrimitive</code> as a serialized field element.\nSerialize raw secret scalar as a big endian integer.\nSerialize this <code>PublicKey</code> as a SEC1 <code>EncodedPoint</code>, …\nConvert this <code>PublicKey</code> to a <code>NonIdentity</code> of the inner …\nGet the secret <code>NonZeroScalar</code> value for this key.\nConvert this <code>PublicKey</code> to a <code>ProjectivePoint</code> for the given …\nConverts an element of the prime field into the standard …\nConvert this <code>PublicKey</code> into the …\nSerialize secret key in the SEC1 ASN.1 DER <code>ECPrivateKey</code> …\nConvert to a <code>C::Uint</code>.\nComplete projective formulas for prime order elliptic …\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nSize of the inner integer in bits.\nTotal size of the represented integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nSize of the inner integer in bytes.\nTotal size of the represented integer in bytes.\nIntegers whose representation takes a bounded amount of …\nAlias for a byte array whose size is defined by …\nSize of a byte array which encodes a big integer.\nProvides intentionally-checked arithmetic on <code>T</code>.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nA boolean value returned by constant-time <code>const fn</code>s.\nEncoding support.\nThe falsy value.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nThe number of limbs used on this platform.\nBig integers are represented as an array of smaller CPU …\nMaximum value this integer can express.\nMaximum value this <code>Limb</code> can express.\nMaximum value this integer can express.\nMaximum value this <code>Uint</code> can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nWrapper type for non-zero integers.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nA pre-calculated reciprocal for division by a single limb.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe truthy value.\n1024-bit unsigned big integer.\n128-bit unsigned big integer.\n1280-bit unsigned big integer.\n1536-bit unsigned big integer.\n16384-bit unsigned big integer.\n1792-bit unsigned big integer.\n192-bit unsigned big integer.\n2048-bit unsigned big integer.\n256-bit unsigned big integer.\n3072-bit unsigned big integer.\n320-bit unsigned big integer.\n32768-bit unsigned big integer.\n3584-bit unsigned big integer.\n384-bit unsigned big integer.\n4096-bit unsigned big integer.\n4224-bit unsigned big integer.\n4352-bit unsigned big integer.\n448-bit unsigned big integer.\n512-bit unsigned big integer.\n576-bit unsigned big integer.\n6144-bit unsigned big integer.\n64-bit unsigned big integer.\n640-bit unsigned big integer.\n704-bit unsigned big integer.\n768-bit unsigned big integer.\n8192-bit unsigned big integer.\n832-bit unsigned big integer.\n896-bit unsigned big integer.\n960-bit unsigned big integer.\nStack-allocated big unsigned integer.\nWide integer type: double the width of <code>Word</code>.\nUnsigned integer type that the <code>Limb</code> newtype wraps.\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nZero values.\nComputes <code>self + rhs + carry</code>, returning the result along …\nComputes <code>a + b + carry</code>, returning the result along with …\nCompute <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code> for the special modulus …\nBorrow the limbs of this <code>Uint</code>.\nBorrow the limbs of this <code>Uint</code> mutably.\nBorrow the inner limbs as an array of <code>Word</code>s.\nBorrow the inner limbs as a mutable array of <code>Word</code>s.\nGet the value of the bit at position <code>index</code>, as a truthy or …\nReturns <code>true</code> if the bit at position <code>index</code> is set, <code>false</code> …\nCalculates <code>a &amp; b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculates <code>a | b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculates <code>a ^ b</code>.\nComputes bitwise <code>a ^ b</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>AND</code>, returning a <code>CtOption</code> which …\nPerform checked division, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>OR</code>, returning a <code>CtOption</code> which …\nPerform checked reduction, returning a <code>CtOption</code> which …\nSee <code>Self::checked_sqrt_vartime</code>.\nPerform checked sqrt, returning a <code>CtOption</code> which <code>is_some</code> …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>XOR</code>, returning a <code>CtOption</code> which …\nPerform a comparison of the inner value in variable-time.\nReturns the Ordering between <code>self</code> and <code>rhs</code> in variable time.\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConst-friendly assertion that two values are equal.\nConst-friendly assertion that two values are NOT equal.\nCreates a new non-zero limb in a const context. The second …\nCreates a new non-zero integer in a const context. The …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nCreates a <code>Residue</code> with the given value for a specific …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPre-calculates a reciprocal for a known divisor, to be …\nReturns a default instance of this object. It is a …\nComputes self / rhs, returns the quotient, remainder.\nComputes <code>self</code> / <code>rhs</code>, returns the quotient (q) and …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPerforms an equality check in variable-time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize from a big-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from big endian bytes.\nDecode from big endian bytes.\nCreate a new <code>Uint</code> from the provided big endian hex string.\nCreate a new <code>Uint</code> from the provided big endian bytes.\nDeserialize from a little-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from little endian bytes.\nDecode from little endian bytes.\nCreate a new <code>Uint</code> from the provided little endian hex …\nCreate a new <code>Uint</code> from the provided little endian bytes.\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU128</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u128</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u16</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u16</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u32</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u32</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u64</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u64</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u8</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u8</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>Uint</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>WideWord</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>Word</code> (const-friendly)\nCreate a <code>Uint</code> from an array of <code>Word</code>s (i.e. word-sized …\nImplements a modulus with the given name, type, and value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>. …\nComputes 1/<code>self</code> mod <code>2^k</code>.\nComputes 1/<code>self</code> mod <code>2^k</code>. This method is constant-time …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nIs this limb an odd number?\nDetermine if this value is equal to zero.\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nComputes <code>self + (b * c) + carry</code>, returning the result …\nImplements modular arithmetic for constant moduli.\nMultiply <code>self</code> by <code>rhs</code>, returning a concatenated “wide” …\nCompute <code>self * rhs mod p</code>.\nComputes <code>self * rhs mod p</code> for the special modulus …\nCompute “wide” multiplication, with a product twice …\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nComputes <code>-a mod p</code>. Assumes <code>self</code> is in <code>[0, p)</code>.\nComputes <code>-a mod p</code> for the special modulus <code>p = MAX+1-c</code> …\nCreate a new checked arithmetic wrapper for the given …\nCreate a new non-zero integer.\nA non-const-fn version of <code>new_const()</code>, wrapping the result …\nConst-friendly <code>Uint</code> constructor.\nCalculate the number of limbs required to represent the …\nCalculates <code>!a</code>.\nComputes bitwise <code>!a</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nImport prelude for this crate: includes important traits.\nGenerate a cryptographically secure random value.\nGenerate a random <code>NonZero&lt;T&gt;</code>.\nGenerate a cryptographically secure random <code>Uint</code>.\nGenerate a cryptographically secure random number which is …\nGenerate a cryptographically secure random <code>Uint</code> which is …\nComputes self % rhs, returns the remainder.\nComputes <code>self</code> % 2^k. Faster than reduce since its a power …\nConstruct a <code>Uint&lt;T&gt;</code> from the unsigned integer value, …\nPerform saturating addition.\nPerform saturating addition, returning <code>MAX</code> on overflow.\nPerform saturating multiplication.\nPerform saturating multiplication, returning <code>MAX</code> on …\nPerform saturating subtraction.\nPerform saturating subtraction, returning <code>ZERO</code> on …\nComputes <code>self - (rhs + borrow)</code>, returning the result along …\nComputes <code>a - (b + borrow)</code>, returning the result along with …\nComputes <code>self &lt;&lt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; shift</code>.\nComputes a left shift on a wide input as <code>(lo, hi)</code>.\nComputes <code>self &gt;&gt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &gt;&gt; n</code>.\nComputes a right shift on a wide input as <code>(lo, hi)</code>.\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nSee <code>Self::sqrt_vartime</code>.\nComputes √(<code>self</code>) Uses Brent &amp; Zimmermann, Modern …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nSquare self, returning a concatenated “wide” result.\nSquare self, returning a “wide” result in two parts as …\nCompute <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code> for the special modulus …\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nConvert this <code>Uint</code> into its inner limbs.\nCreate an array of <code>Word</code>s (i.e. word-sized unsigned …\nCalculate the number of trailing ones the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nPerform wrapping addition, discarding overflow.\nPerform wrapping addition, discarding overflow.\nPerform wrapping bitwise <code>AND</code>.\nWrapped division is just normal division i.e. <code>self</code> / <code>rhs</code> …\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping negation.\nPerform wrapping negation.\nPerform wrapping bitwise <code>OR</code>.\nWrapped (modular) remainder calculation is just <code>self</code> % <code>rhs</code>.\nSee <code>Self::wrapping_sqrt_vartime</code>.\nWrapped sqrt is just normal √(<code>self</code>) There’s no way …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping bitwise `XOR``.\nThe original type.\nA generalization for numbers kept in optimized …\nImplements <code>Residue</code>s, supporting modular arithmetic with a …\nAlgorithm 14.32 in Handbook of Applied Cryptography …\nConvert the number back from the optimized representation.\nImplements <code>DynResidue</code>s, supporting modular arithmetic with …\nNumber of limbs required to encode a residue\nThe constant modulus\nThe lowest limbs of -(MODULUS^-1) mod R\nThe representation of 1 mod <code>MOD</code>.\nParameter used in Montgomery reduction\nR^2, used to move into Montgomery form\nR^3, used to perform a multiplicative inverse\nA residue mod <code>MOD</code>, represented using <code>LIMBS</code> limbs. The …\nThe parameters to efficiently go to and from the …\nThe representation of 0 mod <code>MOD</code>.\nAdds <code>rhs</code>.\nAccess the <code>Residue</code> value in Montgomery form.\nMutably access the <code>Residue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nCreate a <code>Residue</code> from a value in Montgomery form.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>Residue</code> in Montgomery form.\nA residue represented using <code>LIMBS</code> limbs. The odd modulus …\nThe parameters to efficiently go to and from the …\nAdds <code>rhs</code>.\nAccess the <code>DynResidue</code> value in Montgomery form.\nMutably access the <code>DynResidue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynResidue</code> from a value in Montgomery form.\nCreate <code>DynResidueParams</code> corresponding to a <code>ResidueParams</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nReturns the modulus which was used to initialize these …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents 1.\nReturns the parameter struct used to initialize this …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>DynResidue</code> in Montgomery form.\nInstantiates a new <code>Residue</code> that represents zero.\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nIntegers whose representation takes a bounded amount of …\nSize of a byte array which encodes a big integer.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nEncoding support.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nMaximum value this integer can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe value <code>0</code>.\nZero values.\nCompute <code>self + rhs mod p</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nDeserialize from a big-endian byte array.\nDecode from big endian bytes.\nDeserialize from a little-endian byte array.\nDecode from little endian bytes.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nDetermine if this value is equal to zero.\nCompute <code>self * rhs mod p</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nGenerate a cryptographically secure random value.\nGenerate a cryptographically secure random number which is …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nCompute <code>self - rhs mod p</code>.\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nWrapper type which implements an optimization barrier for …\nThe <code>Choice</code> struct represents a choice for use in …\nA type which can be conditionally negated in constant time.\nA type which can be conditionally selected in constant …\nAn <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.\nA type which can be compared in some manner and be …\nA type which can be compared in some manner and be …\nThe <code>CtOption&lt;T&gt;</code> type represents an optional value similar …\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nConditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.\nNegate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …\nSelect <code>a</code> or <code>b</code> according to <code>choice</code>.\nConditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …\nDetermine if two items are equal.\nTwo <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …\nDetermine whether <code>self &gt; other</code>.\nDetermine whether <code>self &lt; other</code>.\nDetermine if two items are NOT equal.\nReturns the contained value, consuming the <code>self</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the inner value, applying an optimization barrier on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, …\nReturns a true <code>Choice</code> if this value is <code>None</code>.\nReturns a true <code>Choice</code> if this value is <code>Some</code>.\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nThis method is used to construct a new <code>CtOption&lt;T&gt;</code> and …\nConstructs a new instance of <code>BlackBox</code> which will wrap the …\nReturns <code>self</code> if it contains a value, and otherwise returns …\nThis returns the underlying value but panics if it is not …\nThis returns the underlying value if it is <code>Some</code> or the …\nThis returns the underlying value if it is <code>Some</code> or the …\nUnwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>.\nMarker trait for types whose <code>Default</code> is the desired …\nFallible trait for representing cases where zeroization …\nTrait for securely erasing values from memory.\nDerive the <code>Zeroize</code> trait.\nMarker trait signifying that this type will …\nDerive the <code>ZeroizeOnDrop</code> trait.\n<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMove value inside a <code>Zeroizing</code> wrapper which ensures it …\nTry to zero out this object from memory using Rust …\nZero out this object from memory using Rust intrinsics …\nZeroizes a flat type/struct. Only zeroizes the values that …\nExtension trait for iterators over mutable field elements …\nA non-allocating batch inverter.\nHow many bits of information can be reliably stored in the …\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nTrait for constructing a <code>PrimeField</code> element from a …\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nThis represents an element of a non-binary prime field.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nInverse of $2$ in the field.\nThe subset of prime-order fields such that <code>(modulus - 1)</code> …\nThe zero element of the field, the additive identity.\nA field element of small multiplicative order $N$.\nConsumes this iterator and inverts each field element …\nCubes this element.\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nHelper methods for implementing the <code>ff</code> traits.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts an element of the prime field into the standard …\nComputes:\nConstant-time implementation of Tonelli–Shanks’ …\nThe affine representation for this elliptic curve.\nEfficient representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group.\nA helper trait for types with a group operation.\nA helper trait for references with a group operation.\nThe encoding of group elements.\nScalars modulo the order of this group’s scalar field.\nA helper trait for types implementing group scalar …\nA helper trait for references implementing group scalar …\nAffine representation of a point on an elliptic curve that …\nA “w-ary non-adjacent form” scalar multiplication …\nA fixed window table for a group element, precomputed to …\nExtension trait on a <code>Group</code> that provides helpers used by …\nA “w-ary non-adjacent form” scalar, that uses …\nGiven a base and a number of scalars, compute a window …\nPerforms exponentiation given a base.\nConverts a batch of projective elements into affine …\nDoubles this element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a group element from its encoding.\nAttempts to deserialize a group element, not checking if …\nAttempts to deserialize an element from its uncompressed …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this point is the identity.\nConstruct a new wNAF context without allocating.\nComputes the w-NAF representation of the given scalar with …\nComputes a window table for the given base with the …\nReturns an element chosen uniformly at random from the …\nRecommends a wNAF window size given the number of scalars …\nPerforms exponentiation given a scalar.\nGiven a scalar, compute its wNAF representation and return …\nConstructs new space for the window table while borrowing …\nConstructs new space for the scalar representation while …\nConverts this element into its affine representation.\nConverts this element into its byte encoding. This may or …\nConverts this element into its uncompressed encoding, so …\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group …\nThe large prime-order subgroup in which cryptographic …\nMaps <code>self</code> to the prime-order subgroup by multiplying this …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nReturns <code>self</code> if it is contained in the prime-order …\nDetermines if this point represents the point at infinity; …\nDetermines if this element is of small order.\nDetermines if this element is “torsion free”, i.e., is …\nConverts this element to its curve representation.\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a prime-order …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nDetermines if this point represents the point at infinity; …\nConverts this element to its curve representation.\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nPerform a batched inversion on a sequence of field …\nBytes used as input to <code>Reduce::reduce_bytes</code>.\nPerform an inversion on a field element (i.e. base field …\nLinear combination.\nLinear combination (extended version).\nThe multiplication operator <code>*</code>.\nMultiplication by the generator.\nThe unary negation operator <code>-</code>.\nField element type\nThe output of batch inversion. A container of field …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nModular reduction.\nModular reduction to a non-zero output.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nInvert a batch of field elements.\nInvert a field element.\nInvert a field element in variable time.\nCalculates <code>x * k + y * l</code>.\nCalculates <code>x1 * k1 + ... + xn * kn</code>.\nPerforms the <code>*</code> operation.\nMultiply by the generator of the prime-order subgroup.\nPerforms the unary <code>-</code> operation.\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nAccess to the affine coordinates of an elliptic curve …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nShould point compaction be applied by default?\nShould point compression be applied by default?\nElliptic curve with an arithmetic implementation.\nDecompact an elliptic curve point from an x-coordinate.\nDecompress an elliptic curve point.\nDouble a point (i.e. add it to itself)\nField element representation.\nNon-identity point type.\nThe output of the batch normalization; a container of …\nPoint compaction settings.\nPoint compression settings.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nScalar field modulo this curve’s order.\nPerform a batched conversion to affine representation on a …\nAttempt to decompact an elliptic curve point\nAttempt to decompress an elliptic curve point.\nDouble this point.\nReturns the argument unchanged.\nDecode a <code>NonIdentity</code> from its encoding.\nCalls <code>U::from(self)</code>.\nCreate a <code>NonIdentity</code> from a point.\nGenerate a random <code>NonIdentity&lt;ProjectivePoint&gt;</code>.\nConverts this element into its affine representation.\nConverts this element to its curve representation.\nReturn wrapped point.\nGet the affine x-coordinate as a serialized field element.\nIs the affine y-coordinate odd?\nScalar blinded with a randomly generated masking value.\nInstantiate a scalar from an unsigned integer without …\nIs this scalar greater than n / 2?\nNon-zero scalar type.\nScalar field element for a particular elliptic curve.\nGeneric scalar type with primitive functionality.\nUnsigned integer type (i.e. <code>Curve::Uint</code>)\nReturns the argument unchanged.\nInstantiate scalar from an unsigned integer without …\nCalls <code>U::from(self)</code>.\nIs this scalar greater than or equal to n / 2?\nCreate a new <code>BlindedScalar</code> from a scalar and a …\nCompact curve point\nCompact point (<code>0x05</code>)\nCompressed curve point\nCompressed point with even y-coordinate (<code>0x02</code>)\nCompressed point with odd y-coordinate (<code>0x03</code>)\nEncoded elliptic curve point with point compression.\nSize of a compressed elliptic curve point.\nSize of a compressed point for the given elliptic curve …\nEnum representing the coordinates of either compressed or …\nEncoded elliptic curve point sized appropriately for a …\nTrait for deserializing a value from a SEC1 encoded curve …\nIdentity point (a.k.a. point at infinity)\nIdentity point (<code>0x00</code>)\nTrait for supported modulus sizes which precomputes the …\nTag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …\nTrait for serializing a value to a SEC1 encoded curve …\nTrait for serializing a value to a SEC1 encoded curve …\nUncompressed curve point\nUncompressed point (<code>0x04</code>)\nEncoded elliptic curve point <em>without</em> point compression.\nSize of an uncompressed elliptic curve point.\nSize of an uncompressed point for the given elliptic curve …\nSize of an untagged point for given elliptic curve, i.e. …\nValidate that the given <code>EncodedPoint</code> represents the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the type this trait is impl’d on from an …\nParse a tag value from a byte\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this point compact?\nIs this point compressed?\nIs this point the identity point?\nCompute the expected total message length for a message …\nGet the tag octet needed to encode this set of <code>Coordinates</code>\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nValidate that the given <code>EncodedPoint</code> is a valid public key …\nx-coordinate\nx-coordinate\nx-coordinate\ny-coordinate\nIs the y-coordinate odd?\nAffine point whose coordinates are represented by the …\nProjective point whose coordinates are represented by the …\nImplements the complete addition formula from …\nImplements the complete mixed addition formula from …\nImplements the exception-free point doubling formula from …\nConvenience wrapper trait covering functionality of …\nSHA-224 hasher.\nSHA-256 hasher.\nCore block-level SHA-256 hasher with variable output size.\nSHA-384 hasher.\nSHA-512 hasher.\nCore block-level SHA-512 hasher with variable output size.\nSHA-512/224 hasher.\nSHA-512/256 hasher.\nProcess input data in a chained manner.\nCompute hash of <code>data</code>.\nRetrieve result and consume hasher instance.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new hasher instance.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nReset hasher instance to its initial state.\nProcess data, updating the internal state.\nConverts an ECDSA public key to its corresponding Ethereum …\nConvert a raw, uncompressed public key to its …\nConverts an ECDSA private key to its corresponding …\n<code>ecdsa</code> error.\n<code>hex</code> error.\n<code>std::io</code> error.\nA wallet instantiated with a locally stored private key\nAn Ethereum private-public key pair which can be used for …\nError thrown by <code>Wallet</code>.\nReturns this wallet’s chain ID.\nBorrow the secret <code>NonZeroScalar</code> value for this key.\nReturns this wallet’s chain ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Wallet instance from a raw scalar serialized …\nCreates a new Wallet instance from a raw scalar serialized …\nCreates a new Wallet instance from a <code>SigningKey</code>.\nCreates a new Wallet instance from a raw scalar serialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this wallet and returns its signer.\nConstruct a new wallet with an external <code>PrehashSigner</code>.\nCreates a new random keypair seeded with <code>rand::thread_rng()</code>…\nCreates a new random keypair seeded with the provided RNG.\nReturns this wallet’s signer.\nSerialize this <code>Wallet</code>’s <code>SigningKey</code> as a <code>B256</code> byte array.\nSerialize this <code>Wallet</code>’s <code>SigningKey</code> as a <code>FieldBytes</code> byte …\nWhether the event is anonymous.\nThe ABI representation of this type.\nArray out of bounds access.\nUsed by the <code>assert()</code> builtin.\nTrailing bytes in deserialization buffer.\nThe number of variants in the enum.\nThe number of topics.\nThe number of variants.\nThe number of variants.\nA generic contract error.\nA contract’s custom error.\nA contract’s custom error.\nWhether the ABI-encoded size is dynamic.\nThe <code>TokenSeq</code> type corresponding to the tuple.\nThe underlying tuple type which represents this event’s …\nDivision or modulo by zero.\nThe statically-known ABI-encoded size of the type.\nEIP-712 domain attributes used in determining the domain …\nEmpty array pop.\nEnum conversion error.\nContains the error value\nABI Encoding and Decoding errors.\nA Solidity event topic.\nHex error.\nGeneric / unspecified error.\nA generic contract error.\nRepresents the reason for a revert in a generic contract …\nInvalid enum value.\nCalling invalid internal function.\nCould not decode an event from log topics.\nExtension trait for ABI representation.\nThe minimum length of the data for this type.\nThe name of this type.\nThe name of this type.\nThe struct name.\nThe name of the struct.\nContains the success value\nOther errors.\nOverran deserialization buffer.\nA Solidity panic.\nA panic. See <code>Panic</code> for more information.\nA panic. See <code>Panic</code> for more information.\nRepresents a Solidity panic. Same as the Solidity …\nThe underlying tuple type which represents the error’s …\nThe underlying tuple type which represents this type’s …\nThe underlying tuple type which represents this type’s …\nABI Decoding recursion limit exceeded.\nValidation reserialization did not match input.\nAllocation failed.\nResource error (too large allocation or too large array).\nABI result type.\nThe function’s return struct.\nThe returns’ corresponding TokenSeq type.\nThe underlying tuple type which represents this type’s …\nRepresents a standard Solidity revert. These are thrown by …\nA generic revert. See <code>Revert</code> for more information.\nA generic revert. See <code>Revert</code> for more information.\nThe corresponding Rust type.\nThe error selector: <code>keccak256(SIGNATURE)[0..4]</code>\nThe function selector: <code>keccak256(SIGNATURE)[0..4]</code>\nThe error’s ABI signature.\nThe event’s ABI signature.\nThe function’s ABI signature.\nThe event’s ABI signature hash, or selector: …\nThe name of this type in Solidity.\nIterator over the function or error selectors of a …\nA Solidity function call.\nA Solidity constructor.\nA Solidity enum. This is always a wrapper around a <code>u8</code>.\nA Solidity custom error.\nSolidity event.\nA collection of <code>SolEvent</code>s.\nA collection of ABI-encodable call-like types. This …\nA Solidity struct.\nA Solidity type.\nThe Solidity type that this type corresponds to.\nA Solidity value.\nInvalid encoding in storage.\nThe corresponding <code>TokenSeq</code> type.\nThe arguments’ corresponding TokenSeq type.\nThe arguments’ corresponding TokenSeq type.\nThe corresponding ABI token type.\nA list of Solidity event topics.\nThe underlying tuple type which represents this event’s …\nA typecheck detected a word that does not match the data …\nArithmetic underflow or overflow.\nUnknown selector.\nThe ABI word type.\nEthereum ABI codec implementation.\nReturns the ABI representation of this type.\nABI decode the enum from the given buffer.\nABI decode this error’s arguments from the given slice, …\nABI decode this call’s arguments from the given slice, …\nABI-decodes the given data into one of the variants of <code>self</code>…\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI-decodes the dynamic data of this event from the given …\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI-decodes the given data into one of the variants of <code>self</code>…\nABI decode this call’s arguments from the given slice, …\nABI decode this call’s arguments from the given slice, …\nABI decode this call’s return values from the given …\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI encode the enum.\nABI encode the error to the given buffer <strong>with</strong> its selector.\nABI encode the call to the given buffer <strong>with</strong> its selector.\nABI encode the call to the given buffer.\nABI-encodes <code>self</code> into the given buffer.\nABI-encodes the value.\nTokenizes and ABI-encodes the given value by wrapping it …\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nEncodes an ABI sequence suitable for function parameters.\nTokenizes and ABI-encodes the given value as function …\nABI-encodes <code>self</code> into the given buffer, <em>without</em> any …\nABI encode the enum into the given buffer.\nABI encode the error to the given buffer <strong>without</strong> its …\nABI encode the call to the given buffer <strong>without</strong> its …\nABI encode the call’s return values.\nEncodes an ABI sequence.\nTokenizes and ABI-encodes the given value as a sequence.\nThe size of the encoded data, <em>without</em> any selectors.\nThe size of the error params when encoded in bytes, <strong>without</strong>…\nThe size of the ABI-encoded dynamic data in bytes.\nThe size of the encoded data in bytes, <strong>without</strong> its …\nThe size of the encoded data in bytes.\nCalculate the ABI-encoded size of the data.\nCalculate the ABI-encoded size of the data, counting both …\nReturns the number of bytes that will be used to encode …\nReturns an immutable reference to the inner custom error …\nReturns a mutable reference to the inner custom error if …\nReturns an immutable reference to the inner <code>Panic</code> if <code>self</code> …\nReturns a mutable reference to the inner <code>Panic</code> if <code>self</code> …\nReturns an immutable reference to the inner <code>Revert</code> if <code>self</code> …\nReturns a mutable reference to the inner <code>Revert</code> if <code>self</code> …\nReturns the panic code’s string representation.\nThe EIP-155 chain ID. The user-agent should refuse signing …\nThe Solidity panic code.\nInstantiates a new error with a static str.\nDecode the event from the given log object.\nDecode the events from the given log object.\nDecode the event from the given log object.\nDecode the events from the given log info.\nDecode the event from the given log info.\nDecodes and retrieves the reason for a revert from the …\nDecode the topics of this event from the given data.\nDetokenize the topics into a tuple of rust types.\nDetokenize this type’s value from the given token.\nDetokenize a value from the given token.\nReturns component EIP-712 types. These types are used to …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nConvenience macro to instantiate an EIP-712 domain.\nEncodes this domain using EIP-712 <code>encodeData</code>.\nThe EIP-712-encoded type string.\nHashes this struct according to EIP-712 <code>hashStruct</code>.\nReturn the root EIP-712 type. This type is used to …\nDoes something.\nCalculates the EIP-712 <code>typeHash</code> for this struct.\nABI-encode the dynamic data of this event.\nEncodes this domain using EIP-712 <code>encodeData</code>.\nABI-encode the dynamic data of this event into the given …\nEncodes this domain using EIP-712 <code>encodeData</code> into the …\nIndexed event parameter encoding.\nEncodes this type as preimage bytes which are then hashed …\nEncode the topics of this event.\nEncode the topics of this event into a fixed-size array.\nEncode the topics of this event into the given buffer.\nThe EIP-712-encoded type string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the panic code for the given number if it is a …\nHashes this domain according to EIP-712 <code>hashStruct</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> matches <code>CustomError</code>.\nReturns <code>true</code> if <code>self</code> matches <code>Panic</code>.\nReturns <code>true</code> if <code>self</code> matches <code>Revert</code>.\nReturns the PanicKind if this panic code is a known …\nThe user readable name of signing domain, i.e. the name of …\nConvert from the tuple type used for ABI encoding and …\nConvert decoded rust data to the event type.\nConvert from the tuple type used for ABI encoding and …\nConvert from the tuple type used for ABI encoding and …\nInstantiate a new EIP-712 domain.\nReturns the number of ABI words (32 bytes) that will be …\nReturns the revert reason string, or <code>&quot;&lt;empty&gt;&quot;</code> if empty.\nThe reason string, provided by the Solidity contract.\nA disambiguating salt for the protocol. This can be used …\nThe selector of this instance.\nThe selector of this type at the given index, used in …\nReturns an iterator over the selectors of this type.\nCalculate the domain separator for the domain object.\nGenerate types that implement <code>linera-alloy-sol-types</code> …\nSolidity types.\nThe name of the associated Solidity type.\nThe name of the associated Solidity type.\nReturns the name of this type in Solidity.\nConvert to the token type used for EIP-712 encoding and …\nTokenize the call’s arguments.\nTokenize the call’s arguments.\nTokenize the enum.\nTokenizes the given value into this type’s token.\nTokenizes the given value into this type’s token.\nTokenize the event’s non-indexed parameters.\nThe number of bytes this type occupies in another topic’…\nThe event’s topics.\nReturns an error if the given selector is not known to …\nReturns an error if the given token cannot be detokenized …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nCalculates the EIP-712 <code>typeHash</code> for this domain.\nInstantiates a new <code>Error::UnknownSelector</code> with the …\nUtilities used by different modules.\nReturns <code>true</code> if the given selector is known to this type.\nReturns <code>true</code> if the given token can be detokenized with …\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nHex-encoded data.\nThe Solidity type we failed to produce.\nThe invalid log.\nThe maximum valid value.\nThe name of the enum.\nThe name of the enum or event.\nThe type name.\nThe unknown selector.\nThe invalid value.\nTrue if the token represents a dynamically-sized type.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nThe ABI encoding of an empty byte array (<code>bytes</code> or <code>string</code>).\nAn ABI encoder.\nTrue for tuples only.\nThe decoder recursion limit. This is currently hardcoded, …\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nShortcut for appending a token sequence.\nAppend a pointer to the current suffix offset.\nAppend a sequence of bytes as a packed sequence with a …\nAppend a sequence length.\nAppend a word to the encoder.\nBump the suffix offset by a given number of words.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nABI-decodes a token by wrapping it in a single-element …\nDecodes a single token from the underlying buffer.\nDecode a token from a decoder.\nABI-decodes top-level function args.\nDecodes ABI compliant vector of bytes into vector of …\nABI-decode the token sequence from the encoder.\nDecodes a sequence of tokens from the underlying buffer.\nABI-encodes a single token.\nABI-encodes a tuple as ABI function params, suitable for …\nABI-encodes a token sequence.\nABI-encode the token sequence into the encoder.\nFinish the encoding process, returning the encoded words.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinish the encoding process, returning the encoded bytes.\nReturns whether the remaining buffer is empty.\nInstantiate a new empty encoder.\nInstantiate a new decoder from a byte slice and a …\nReturns the current offset in the buffer.\nPeek into the buffer.\nPeek a slice of size <code>len</code> from the buffer without advancing …\nPeek a slice of size <code>len</code> from the buffer at a specific …\nPeek a <code>usize</code> from the buffer, without advancing the offset.\nPeek a <code>usize</code> from the buffer at a specific offset, without …\nPeek the next word from the buffer without advancing the …\nPeek a word from the buffer at a specific offset, without …\nRemoves the last offset and returns it.\nAppends a suffix offset.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nReturns the number of bytes in the remaining buffer.\nReturns a reference to the remaining bytes in the buffer.\nReturns the number of words in the remaining buffer.\nSets the current offset in the buffer.\nSet whether to validate type correctness.\nDetermine the current suffix offset.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nReturn a child decoder by consuming a word, interpreting …\nTakes a <code>usize</code> offset from the buffer by consuming a word.\nTakes the offset from the child decoder and sets it as the …\nTakes a slice of bytes of the given length by consuming up …\nTakes a slice of bytes of the given length.\nTake a word from the buffer, advancing the offset.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nReturns <code>true</code> if this decoder is validating type …\nInstantiate a new encoder with a given capacity in words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nReturns a reference to the array.\nReturns a reference to the word as a slice.\nReturns a reference to the array as a slice.\nReturns a reference to the backing slice.\nReturns a reference to the slice.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the backing array, consuming the token.\nInstantiate a new <code>Bytes</code> by copying the underlying slice.\nInstantiate a new <code>Vec</code> by copying the underlying slice.\nCreate a new word token from a word.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\nAddress - <code>address</code>\nArray - <code>T[]</code>\nThe number of bits in the integer: <code>BITS</code>\nThe number of bytes in the integer: <code>BITS / 8</code>\nBool - <code>bool</code>\nSpecifies the number of bytes in a <code>FixedBytes</code> array as a …\nBytes - <code>bytes</code>\nFixedArray - <code>T[M]</code>\nFixedBytes - <code>bytesX</code>\nFunction - <code>function</code>\nThe name of the <code>Int</code> type: <code>int&lt;N&gt;</code>\nInt - <code>intX</code>\nThe signed integer Rust representation.\nSpecifies the number of bits in an <code>Int</code> or <code>Uint</code> as a type.\nThe name of the <code>FixedBytes</code> type: <code>bytes&lt;N&gt;</code>\nThe difference between the representation’s and this …\nString - <code>string</code>\nStatically guarantees that a <code>FixedBytes</code> byte count is …\nStatically guarantees that a <code>Int</code> or <code>Uint</code> bit count is …\nThe name of the <code>Uint</code> type: <code>uint&lt;N&gt;</code>\nUint - <code>uintX</code>\nThe unsigned integer Rust representation.\nThe index of the most significant byte in the Word type.\nDetokenizes a signed integer.\nDetokenizes an unsigned integer.\nABI-encode a signed integer in packed mode.\nABI-encode an unsigned integer in packed mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTokenizes a signed integer.\nTokenizes an unsigned integer.\nSee <code>usize::next_multiple_of</code>.\nCalculates the padded length of a slice by rounding its …\nCalculates the padded length of a slice of a specific …\nBasic or bearer authentication in http or websocket …\nBackend connection task has stopped.\nRC7617 HTTP Basic Auth\nRFC6750 Bearer Auth\nType alias for a pin-boxed future, with a <code>Send</code> bound on …\nA boxed, Clone-able <code>Transport</code> trait object.\nConnection details for a transport that can be boxed.\nCustom error.\nJSON deserialization error.\nJSON deserialization error.\nContains the error value\nContains the error value\nServer returned an error response.\nServer returned an error response.\nReturned when a local pre-processing step fails. This …\nReturned when a local pre-processing step fails. This …\nMissing batch response.\nServer returned a null response when a non-null response …\nServer returned a null response when a non-null response …\nContains the success value\nContains the success value\nPin-boxed future.\nPubsub service is not available for the current provider.\nAn RPC error.\nFuture for RPC-level requests.\nThe result of a JSON-RPC request.\nJSON serialization error.\nJSON serialization error.\nA <code>Transport</code> manages the JSON-RPC request/response …\nTransport error.\nTransport error.\nThe transport type that is returned by <code>connect</code>.\nConnection details for a transport.\nA transport error is an <code>RpcError</code> containing a …\nTransport error.\nFuture for transport-level requests.\nA transport result is a <code>Result</code> containing a <code>TransportError</code>.\nRpc server returned an unsupported feature.\nRpc server returned an unsupported feature.\nReturns a reference to the inner transport.")
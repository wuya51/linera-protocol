searchState.loadedDescShard("genawaiter", 0, "This crate implements generators for Rust. Generators are …\nThe generator completed with a return value.\nA trait implemented for coroutines.\nA trait implemented for generator types.\nThe result of a generator resumption.\nThe type of value this generator accepts as a resume …\nThe type of value this generator returns upon completion.\nThe type of value this generator returns upon completion.\nThe type of value this generator yields.\nThe type of value this generator yields.\nThe generator suspended with a value.\nReturns the argument unchanged.\nCreates a generator on the stack.\nCalls <code>U::from(self)</code>.\nThis module implements a generator which stores its state …\nCreates a producer for use with <code>rc::Gen</code>.\nResumes the execution of this generator.\nResumes the execution of this generator.\nThis module implements a generator which doesn’t …\nThis module implements a generator which can be shared …\nCreates a producer for use with <code>sync::Gen</code>.\nCreates a generator on the stack unsafely.\nYields a value from a generator.\nThis object lets you yield values from the generator by …\nThis is a generator which stores its state on the heap.\nResumes execution of the generator.\nReturns the argument unchanged.\nCreates a generator.\nCalls <code>U::from(self)</code>.\nCreates a new generator from a function.\nTurns a function into a producer, which can then be used …\nResumes execution of the generator.\nResumes execution of the generator.\nThis object lets you yield values from the generator by …\nThis is a generator which can be stack-allocated.\nThis data structure holds the transient state of an …\nResumes execution of the generator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a generator.\nCreates a generator using a producer defined elsewhere.\nCreates a new, empty <code>Shelf</code>.\nCreates a new generator from a function.\nTurns a function into a producer, which can then be used …\nResumes execution of the generator.\nResumes execution of the generator.\nThis object lets you yield values from the generator by …\nThis is a generator which can be shared between threads.\nThis is a type alias for generators which can be stored in …\nResumes execution of the generator.\nReturns the argument unchanged.\nCreates a generator.\nCalls <code>U::from(self)</code>.\nCreates a new generator from a function.\nCreates a new generator with a boxed future, so it can be …\nCreates a new generator with a boxed future, so it can be …\nTurns a function into a producer, which can then be used …\nResumes execution of the generator.\nResumes execution of the generator.")
searchState.loadedDescShard("linera_alloy_core", 0, "Alloy\nAddress.\nAn address.\nDynamically sized array.\nA dynamically-sized array of values.\nBoolean.\nA boolean.\nDynamic bytes.\nA dynamic-length byte array.\nWhether the ABI-encoded size is dynamic.\nA decoded dynamic ABI error.\nA decoded dynamic ABI event.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nA dynamic-length sequence.\nA dynamic ABI error.\nA dynamic ABI event.\nA dynamic Solidity type.\nA dynamic Solidity value.\nA dynamic token.\nThe statically-known ABI-encoded size of the type.\nEIP-712 domain attributes used in determining the domain …\nLength mismatch during encoding.\nAn ABI encoder.\nContains the error value\nError when parsing EIP-712 <code>encodeType</code> strings\nProvides error encoding and decoding for the <code>Error</code> type.\nProvides event encoding and decoding for the <code>Event</code> type.\nInvalid event signature.\nFixed-sized array.\nA fixed-size array of values.\nFixed-size bytes, up to 32.\nA fixed-length byte array. The second parameter is the …\nA Fixed Sequence.\nFunction.\nA function pointer.\nProvide ABI encoding and decoding for the <code>Function</code> type.\n<code>hex</code> error.\nSigned Integer.\nA signed integer. The second parameter is the number of …\nProvides ABI encoding and decoding functionality.\nContains the success value\nA packed sequence (string or bytes).\nDynamic ABI result type.\nThe corresponding Rust type.\nThe name of this type in Solidity.\nSelector mismatch during function or error decoding.\nA Solidity type.\n<code>linera_alloy_sol_types</code> error.\nTrait for items that can be resolved to <code>DynSol_____</code>, i.e. …\nString.\nA string.\nThe corresponding ABI token type.\nLength mismatch during event topic decoding.\nTuple.\nA tuple of values.\nType mismatch during encoding or coercion.\n<code>linera_alloy_sol_type_parser</code> error.\nUnsigned Integer.\nAn unsigned integer. The second parameter is the number of …\nThe ABI word type.\nA single word.\nEthereum ABI codec implementation.\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nABI-decodes the given data according to this item’s …\nABI-decodes the given data according to this functions’s …\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nDecode a <code>DynSolValue</code> from a byte slice. Fails if the value …\nDecodes this type’s value from an ABI blob by …\nEncode this value into a byte array by wrapping it into a …\nTokenizes and ABI-encodes the given value by wrapping it …\nABI-encodes the given values, prefixed by this item’s …\nABI-encodes the given values, without prefixing the data …\nABI-encodes the given values.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nEncodes the packed value and appends it to the end of a …\nNon-standard Packed Mode ABI encoding.\nEncode this value into a byte array suitable for passing …\nTokenizes and ABI-encodes the given value as function …\nIf this value is a fixed sequence, encode it into a byte …\nTokenizes and ABI-encodes the given value as a sequence.\nCalculate the ABI-encoded size of the data, counting both …\nFallible cast to the contents of a variant DynSolValue {.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast into a dynamic sequence.\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nFallible cast into a fixed sequence.\nFallible cast to a fixed-size array. Any of a <code>FixedArray</code>, …\nFallible cast to the contents of a variant.\nFallible cast into a packed sequence.\nFallible cast to a packed sequence. Any of a String, or a …\nFallible cast to the contents of a variant.\nFallible cast into a sequence, dynamic or fixed-size\nFallible cast to the contents of a variant.\nFallible cast to the contents of a variant.\nThe Solidity type. This returns the Solidity type …\nFallible cast to the contents of a variant.\nAttempt to cast to a word.\nFallible cast to a single word. Will succeed for any …\nError body types.\nGet the un-indexed types.\nThe decoded error body.\nThe un-indexed values, in order.\nThe EIP-155 chain ID. The user-agent should refuse signing …\nCoerces a string into a <code>DynSolValue</code> via this type.\nInstantiates a new error with a static str.\nDecode the error from the given data.\nDecode the error from the given data.\nDecodes the given log object according to this item’s …\nDecode the event from the given log info.\nDecodes the given log info according to this item’s …\nDecode the event from the given log info.\nDetokenize this type’s value from the given token.\nDynamic detokenization.\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a DynToken from a dynamic sequence of values.\nInstantiate a DynToken from a fixed sequence of values.\nReturns whether this type is contains a custom struct.\nReturns whether this type is contains a custom struct.\nAppend this data to the head of an in-progress blob via …\nGet the indexed types.\nThe indexed values, in order.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if anonymous.\nTrue if the type is dynamic, else false.\nReturns <code>true</code> if the value is an instance of a dynamically …\nReturns true if the value is a sequence type.\nTrust if this value is encoded as a single word. False …\nReturn true if the type is zero-sized, e.g. <code>()</code> or <code>T[0]</code>\nCheck that the given <code>DynSolValue</code> matches this type.\nCheck that this value has the same type as the given …\nCheck that the given <code>DynSolValue</code>s match these types.\nCheck that these values have the same type as the given …\nCalculate the minimum number of ABI words necessary to …\nCalculate the minimum number of words required to encode …\nThe user readable name of signing domain, i.e. the name of …\nCalculate the nesting depth of this type. Simple types …\nCreates a new error from a selector.\nCreates a new event.\nCreates a new error, without length-checking the body. …\nCreates a new event, without length-checking the indexed, …\nA Solidity panic.\nParses a Solidity type name string into a <code>DynSolType</code>.\nResolve the type into a value.\nRepresents a standard Solidity revert. These are thrown by …\nA disambiguating salt for the protocol. This can be used …\nError selector is the first 4 bytes of the keccak256 hash …\nThe Solidity type name. This returns the Solidity type …\nThe Solidity type name. This returns the Solidity type …\nReturns the name of this type in Solidity.\nAppend this data to the tail of an in-progress blob via …\nThe Solidity type name, as a <code>String</code>.\nTokenize this value into a <code>DynToken</code>.\nTokenizes the given value into this type’s token.\nGet the selector for this event, if any.\nReturns an error if the given token cannot be detokenized …\nReturns <code>true</code> if the given token can be detokenized with …\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nThe contents of the dynamic sequence.\nThe actual type.\nThe actual length.\nThe actual length.\nThe actual selector.\nThe actual signature.\nThe expected type.\nThe expected length.\nThe expected length.\nThe expected selector.\nThe expected signature.\nTrue if the token represents a dynamically-sized type.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nThe ABI encoding of an empty byte array (<code>bytes</code> or <code>string</code>).\nAn ABI encoder.\nTrue for tuples only.\nThe decoder recursion limit. This is currently hardcoded, …\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nABI-decodes a token by wrapping it in a single-element …\nDecode a token from a decoder.\nABI-decodes top-level function args.\nDecodes ABI compliant vector of bytes into vector of …\nABI-decode the token sequence from the encoder.\nABI-encodes a single token.\nABI-encodes a tuple as ABI function params, suitable for …\nABI-encodes a token sequence.\nABI-encode the token sequence into the encoder.\nAppend head words to the encoder.\nCalculate the number of head words.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nAppend head words to the encoder.\nCalculate the number of head words.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\n<code>calldata</code>\nContains the error value\nParser error.\nThe regular expression for a Solidity identifier.\n<code>memory</code>\nContains the success value\nRepresents a function parameter.\nRepresents a list of function parameters.\nParser result\nRoot type.\nA root type, with no array suffixes. Corresponds to a …\nStorage specifier.\n<code>storage</code>\nTuple type.\nA tuple specifier, with no array suffixes. Corresponds to …\nRepresents a type-name. Consists of an identifier and …\nA stem of a Solidity array type. It is either a root type, …\nWhether the parameter indexed.\nReturns <code>true</code> if the given character is valid in a Solidity …\nReturns <code>true</code> if the given character is valid at the start …\nReturns <code>true</code> if the given string is a valid Solidity …\nThe name of the parameter.\nThe parameters.\nArray sizes, in innermost-to-outermost order. If the size …\nThe full span of the tuple specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe type stem, which is either a root type or a tuple type.\nThe storage specifier.\nThe type of the parameter.\nThe internal types.\nGeneric <code>winnow</code> parsing utilities.\nParses a Solidity identifier.\nA JSON ABI item.\nAddress payable.\nA JSON ABI constructor function.\nA JSON ABI <code>Constructor</code>.\nContract.\nRepresents a generic contract’s ABI, bytecode and …\nEnum. Possibly of the form <code>contract.enum</code>.\nA JSON ABI error.\nA JSON ABI <code>Error</code>.\nA JSON ABI event.\nA JSON ABI <code>Event</code>.\nA Solidity Event parameter.\nA JSON ABI fallback function.\nA JSON ABI <code>Fallback</code>.\nA JSON ABI function.\nA JSON ABI <code>Function</code>.\nThe contract internal type. This could be a regular …\nAn iterator over items in an ABI.\nAn iterator over immutable references of items in an ABI.\nThe JSON contract ABI, as specified in the Solidity ABI …\nNonpayable functions promise not to receive Ether.\nOther. Possible of the form <code>contract.other</code>.\nJSON specification of a parameter.\nPayable functions make no promises.\nPure functions promise not to read from or modify the …\nA JSON ABI receive function.\nA JSON ABI <code>Receive</code>.\nA JSON ABI function’s state mutability.\nStruct. Possibly of the form <code>contract.struct</code>.\nConfiguration for <code>JsonAbi::to_sol</code>.\nView functions promise not to modify the state.\nThe contract ABI.\nWhether the event is anonymous. Anonymous events do not …\nFallible conversion to a variant.\nFallible conversion to a variant.\nReturns the string representation of the state mutability …\nFallible conversion to a variant.\nReturns the string representation of the state mutability.\nFallible conversion to a variant.\nThe contract bytecode.\nIf the paramaeter is a compound type (a struct or tuple), …\nIf the paramaeter is a compound type (a struct or tuple), …\nReturns an immutable reference to the constructor.\nThe constructor function.\nReturns a mutable reference to the constructor.\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nReturn a <code>TypeSpecifier</code> describing the contract if this …\nReturns the debug name of the item.\nDeduplicates all functions, errors, and events which have …\nThe contract deployed bytecode.\nThe enum specifier is a <code>TypeSpecifier</code> containing the enum …\nThe enum specifier is a <code>TypeSpecifier</code> containing the enum …\nReturn a <code>TypeSpecifier</code> describing the enum if this type is …\nReturns an immutable reference to the list of all the …\nReturns a mutable reference to the list of all the errors …\nReturns an iterator over immutable references to the …\nThe errors, indexed by the error name.\nReturns an iterator over mutable references to the errors.\nReturns an immutable reference to the list of all the …\nReturns an immutable reference to the event inputs of the …\nReturns a mutable reference to the event inputs of the …\nReturns a mutable reference to the list of all the events …\nReturns an iterator over immutable references to the …\nThe events, indexed by the event name.\nReturns an iterator over mutable references to the events.\nThe fallback function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFormats the canonical type of this parameter into the …\nFormats the canonical type of this parameter into the …\nReturns this function’s full signature including names …\nReturns this event’s full signature …\nReturns an immutable reference to the list of all the …\nReturns a mutable reference to the list of all the …\nReturns an iterator over immutable references to the …\nThe functions, indexed by the function name.\nReturns an iterator over mutable references to the …\nWhether the parameter is indexed. Indexed parameters have …\nReturns an immutable reference to the inputs of the item.\nThe input types of the constructor. May be empty.\nThe input types of the function. May be empty.\nA list of the event’s inputs, in order.\nA list of the error’s components, in order.\nReturns a mutable reference to the inputs of the item.\nThe internal type of the parameter.\nThe internal type of the parameter.\nThe internal type of the parameter. This type represents …\nThe internal type of the parameter. This type represents …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all of the items in the ABI.\nTrue if the instance is a <code>address payable</code> variant.\nTrue if the type is complex (tuple or struct)\nTrue if the type is complex (tuple or struct)\nTrue if the parameter is a contract.\nTrue if the parameter is a contract.\nTrue if the instance is a <code>contract</code> variant.\nReturns true if the ABI contains no items.\nTrue if the parameter is an enum.\nTrue if the parameter is an enum.\nTrue if the instance is a <code>enum</code> variant.\nTrue if the instance is a <code>other</code> variant.\nTrue if the type is simple\nTrue if the type is simple\nTrue if the parameter is a struct.\nTrue if the parameter is a struct.\nTrue if the instance is a <code>struct</code> variant.\nTrue if the parameter is a UDT (user-defined type).\nTrue if the parameter is a UDT (user-defined type).\nReturns an iterator over all of the items in the ABI.\nReturns the total number of items (of any type).\nReturns an immutable reference to the name of the item.\nThe name of the function.\nThe name of the event.\nThe name of the error.\nReturns a mutable reference to the name of the item.\nCreates an empty ABI object.\nValidate and create new instance of Param.\nValidate and create new instance of EventParam\nCreates a new configuration with default settings.\nComputes the number of this event’s indexed topics.\nReturn a <code>TypeSpecifier</code> describing the other if this type …\nReturns an immutable reference to the outputs of the item.\nThe output types of the function. May be empty.\nReturns an immutable reference to the outputs of the item.\nParse a Human-Readable ABI string into a JSON object.\nParses a Solidity constructor string: …\nParses a Solidity function signature string: …\nParses a Solidity event signature string: …\nParses a Solidity error signature string: …\nParses a single Human-Readable ABI string into an ABI item.\nParse a parameter from a Solidity parameter string.\nParse an event parameter from a Solidity parameter string.\nParse a string into an instance, taking ownership of data\nSets whether to print constructors. Default: <code>false</code>.\nThe receive function.\nComputes this error’s selector: …\nComputes this event’s selector: …\nComputes this error’s selector: …\nReturns the canonical type of this parameter.\nReturns the canonical type of this parameter.\nFormats the canonical type of this parameter into the …\nFormats the canonical type of this parameter into the …\n<code>serde</code> implementation for <code>StateMutability</code> for backwards …\nReturns this function’s signature: <code>$name($($inputs),*)</code>.\nReturns this event’s signature: <code>$name($($inputs),*)</code>.\nComputes this error’s signature: <code>$name($($inputs),*)</code>.\nReturns this function’s full signature: …\nReturns the state mutability of the item.\nThe state mutability of the constructor.\nThe state mutability of the fallback function.\nThe state mutability of the receive function.\nThe state mutability of the function.\nReturns a mutable reference to the state mutability of the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nThe struct specifier is a <code>TypeSpecifier</code> containing the …\nReturn a <code>TypeSpecifier</code> describing the struct if this type …\nFormats this JSON ABI as a Solidity interface.\nFormats this JSON ABI as a Solidity interface into the …\nThe UDT specifier is a <code>TypeSpecifier</code> containing the UDT …\nThe UDT specifier is a <code>TypeSpecifier</code> containing the UDT …\nContract qualifier, if any\nContract qualifier, if any\nContract qualifier, if any\nEnum name\nStruct name\nStruct name\n<code>calldata</code>\nContains the error value\nParser error.\nThe regular expression for a Solidity identifier.\n<code>memory</code>\nContains the success value\nRepresents a function parameter.\nRepresents a list of function parameters.\nParser result\nRoot type.\nA root type, with no array suffixes. Corresponds to a …\nStorage specifier.\n<code>storage</code>\nTuple type.\nA tuple specifier, with no array suffixes. Corresponds to …\nRepresents a type-name. Consists of an identifier and …\nA stem of a Solidity array type. It is either a root type, …\nFallible conversion to a root type\nReturns a string representation of the storage specifier.\nFallible conversion to a tuple type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the parameter indexed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate an invalid identifier string error. Invalid …\nInstantiate an invalid size error. Invalid size errors are …\nInstantiate an invalid type string error. Invalid type …\nReturns true if this type is an array.\nReturns <code>true</code> if the given character is valid in a Solidity …\nReturns <code>true</code> if the given character is valid at the start …\nReturns <code>true</code> if the given string is a valid Solidity …\nThe name of the parameter.\nInstantiate a new error.\nCreate a new root type from a string without checking if it…\nThe parameters.\nParse a root type from a string.\nParse a type stem from a string.\nParse a tuple specifier from a string.\nParse a type specifier from a string.\nParse a parameter from a string.\nParse a parameter list from a string.\nParse a string storage specifier.\nInstantiate a new parser error.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\n<code>winnow</code> parser for this type.\nArray sizes, in innermost-to-outermost order. If the size …\nThe string underlying this type. The type name.\nReturns the type stem as a string.\nReturns the tuple specifier as a string.\nReturns the type stem as a string.\nThe full span of the tuple specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nThe full span of the specifier.\nReturns the type stem.\nThe type stem, which is either a root type or a tuple type.\nThe storage specifier.\nReturns <code>Ok(())</code> if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nReturns true if the type is a basic Solidity type.\nThe type of the parameter.\nThe internal types.\nGeneric <code>winnow</code> parsing utilities.\nParses a Solidity identifier.\nDeserializes a <code>StateMutability</code>, compatible with older JSON …\nSerializes a <code>StateMutability</code> as a single-field struct (…\nAn Ethereum address, 20 bytes in length.\nStack-allocated buffer for efficiently computing address …\nError type for address checksum validation.\n16-byte fixed byte-array type.\n20-byte fixed byte-array type.\n32-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\nThe size of this integer type in bits.\nNumber of bits.\nNumber of bits to set per input in Ethereum bloom filter.\nSize of the bloom filter in bits\nSize of the bloom filter in bytes.\nThe size of this integer type in bytes. Note that some …\nThe size of this integer type in bytes. Note that some …\nThe error type that is returned when conversion to or from …\nA block hash.\nA block number.\nEthereum 256 byte bloom filter.\nInput to the <code>Bloom::accrue</code> method.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nChain identifier type (introduced in EIP-155).\nA transaction that creates a contract.\nExplicit V value. May be EIP-155 modified.\nA byte array of fixed length (<code>[u8; N]</code>).\nError converting from bytes.\nError converting hex to bytes.\nAn Ethereum ABI function pointer, 24 bytes in length.\nAlready hashed input.\nError while decoding hex.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nError that occurs when the number is too large or too …\nInvalid ERC-55 checksum.\nInvalid parity.\nk256 error\nSimple <code>Keccak-256</code> hasher.\nThe size of this integer type in 64-bit limbs.\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nBit mask for the last limb.\nThe largest value that can be represented by this integer …\nThe maximum value.\nThe smallest value that can be represented by this integer …\nThe minimum value.\nMinus one (multiplicative inverse) of this type.\nLess than zero.\nNon-EIP155. 27 or 28.\nOne (multiplicative identity) of this type.\nThe parity of the signature, stored as either a V value …\nParity flag. True for odd.\nThe error type that is returned when parsing a signed …\nGreater than or equal to zero.\nRaw input to be hashed.\nError that occurs when an invalid digit is encountered …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nSolidity contract functions are addressed using the first …\nEnum to represent the sign of a 256-bit signed integer.\nAn ECDSA Signature, consisting of V, R, and S.\nErrors in signature parsing or verification.\nSigned integer wrapping a <code>ruint::Uint</code>.\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe <code>to</code> field of a transaction. Either a target address, or …\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\nArray of Zero bytes.\nArray of Zero bytes.\nArray of Zero bytes.\nThe value zero. This is the only value that exists in all …\nArray of Zero bytes.\nZero (additive identity) of this type.\nComputes the absolute value of <code>self</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nAccrues the input into the bloom filter.\nAccrues the input into the bloom filter.\nIngests a log into the bloom filter.\nIngests a raw log into the bloom filter.\nCompute $\\mod{\\mathtt{self} + \\mathtt{rhs}}_…\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nType aliases for common primitive types.\nDouble precision logarithm.\nDouble precision decimal logarithm.\nDouble precision binary logarithm.\nConstruct from double precision binary logarithm.\nArithmetic shift right by <code>rhs</code> bits.\nReturns references to the address and selector of the …\nReturns the sign character.\nConversion to i16 with overflow checking.\nConversion to i32 with overflow checking.\nConversion to i64 with overflow checking.\nConversion to i8 with overflow checking.\nConversion to isize with overflow checking.\nAccess the underlying store as a little-endian bytes.\nAccess the underlying store as a little-endian bytes with …\nAccess the underlying store as a little-endian slice of …\nAccess the underlying store as a mutable little-endian …\nView the array of limbs.\nView the array of limbs.\nAccess the array of limbs.\nReturns a mutable slice containing the entire array. …\nReturns the checksum of a formatted address.\nReturns a slice containing the entire array. Equivalent to …\nReturns the checksum of a formatted address.\nConversion to u16 with overflow checking.\nConversion to u32 with overflow checking.\nConversion to u64 with overflow checking.\nConversion to u8 with overflow checking.\nConversion to usize with overflow checking.\nArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, …\nArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nReturns whether a specific bit is set.\nReturns whether a specific bit is set.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nLength of the number in bits ignoring leading zeros.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nReturn the least number of bits needed to represent the …\nConverts a sequence of string literals containing …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nReturns a specific byte. The byte at index <code>0</code> is the least …\nLength of the number in bytes ignoring leading zeros.\nConverts a sequence of string literals containing …\nGet the chain_id of the V value, if any.\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nComputes <code>self + rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nConstruct a new integer from little-endian a slice of …\nCreates a <code>Signed</code> from an absolute value and a negative …\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nComputes <code>self * rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nCalculates the smallest value greater than or equal to <code>self</code>…\nReturns the smallest power of two greater than or equal to …\nRaises self to the power of <code>exp</code>.\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nComputes <code>self % rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked left shift by <code>rhs</code> bits.\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked right shift by <code>rhs</code> bits.\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nComputes <code>self - rhs</code>, returning <code>None</code> if overflow occurred.\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nConcatenate two <code>FixedBytes</code>.\nCompile-time version of <code>contains</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nEquality at compile-time.\nReturns <code>true</code> if no bits are set.\nReturns true if this bloom filter is a possible superset …\nReturns true if this bloom filter is a possible superset …\nTrue if the bloom filter contains a log with given address …\nTrue if the bloom filter contains a log with given address …\nCreates a new <code>Bytes</code> instance from a slice by copying it.\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nComputes the <code>create</code> address for this address and nonce:\nComputes the <code>CREATE2</code> address of a smart contract as …\nComputes the <code>CREATE2</code> address of a smart contract as …\nReturns a reference to the underlying data.\nThe plain data.\nThe log data.\nReturns a mutable reference to the underlying data.\nComputes <code>self / rhs</code> rounding up.\nCalculates the quotient of Euclidean division of <code>self</code> by …\nComputes <code>self / rhs</code> and <code>self % rhs</code>.\nHash a message according to EIP-191 (version <code>0x01</code>).\nCreates a new empty log.\nCreates a new empty log.\nCreate <code>10**n</code> as this type.\nPad and squeeze the state.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nPad and squeeze the state into <code>output</code>.\nConverts a sequence of string literals containing …\nCalculates the checksum of an address into the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConstruct a new <code>Uint</code> from the value.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> …\nCreates a <code>TxKind::Call</code> with the given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nConverts a fixed byte array into a fixed-width unsigned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Ethereum function from an address and selector.\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConstructs the <code>Signed</code> from digits in the base <code>base</code> in …\nConstructs the <code>Uint</code> from digits in the base <code>base</code> in …\nConverts a big-endian byte array of size exactly …\nConverts a big-endian byte array of size exactly …\nCreates a new integer from a big endian slice of bytes.\nConvert from a decimal string.\nConvert from a hex string.\nConverts a little-endian byte array of size exactly …\nConvert from an array in LE format\nCreates a new integer from a little endian slice of bytes.\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a array of …\nConstruct a new integer from little-endian a slice of …\nConverts an ECDSA signing key to its corresponding …\nConverts an ECDSA verifying key to its corresponding …\nCoerces an unsigned integer into a signed one. If the …\nInstantiate by hashing public key bytes.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>.\nCreate a new byte array from the given slice <code>src</code>.\nCreates a new <code>Bytes</code> from a static slice.\nParse a string into a <code>Uint</code>.\nCreates an Ethereum address from an EVM word’s upper 20 …\nCreates an Ethereum function from an EVM word’s lower 24 …\nCompute the greatest common divisor of two <code>Uint</code>s.\n⚠️ Compute the greatest common divisor and the Bézout …\nCalculate the seal hash, this may be slow.\nMacro for converting sequence of string literals …\nGet the inner item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nConsume the input, converting it to the hash.\nReturns the backing buffer.\nUnseal the inner item, discarding the hash.\nConvert to a array of limbs.\nConvert to a array of limbs.\nDecompose into parts.\nReturns the signed integer as a unsigned integer. If the …\nSplits a Signed into its absolute value and negative flag.\nLeft-pads the address to 32 bytes (EVM word size).\nRight-pads the function to 32 bytes (EVM word size).\nCompute $\\mod{\\mathtt{self}^{-1}}_{\\mathtt{modulus}}$.\nComputes the inverse modulo $2^{\\mathtt{BITS}}$ of <code>self</code>, …\nInverts the parity.\nReturns true if the transaction is a contract call.\nReturns true if the transaction is a contract creation.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns whether the sign is negative.\nDetermines if the integer is odd.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns whether the sign is positive.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nTrue if valid, false otherwise.\nReturns <code>true</code> if no bits are set.\nReturns true if the value is zero.\nReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is …\nSimple interface to the <code>Keccak-256</code> hash function.\nCompute the least common multiple of two <code>Uint</code>s or <code>None</code> if …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nReturns the size of this array in bytes.\nReturns the size of this array in bytes.\nReturns the size of this byte array (<code>N</code>).\nReturns the size of this array in bytes.\nReturns the logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nSpecialised Bloom filter that sets three bits out of 2048, …\n<code>m3_2048</code> but with a pre-hashed input.\nReturns the most significant 64 bits of the number and the …\nCompute $\\mod{\\mathtt{self} ⋅ \\mathtt{rhs}}_…\nMontgomery multiplication.\nWraps the given byte array in this type.\nCreates a new buffer.\nWraps the given byte array in this type.\nWraps the given byte array in <code>FixedBytes</code>.\nWraps the given byte array in this type.\nCreates a new empty <code>Bytes</code>.\nCreates a new log.\nCreates a new log.\nCreates a new <code>Keccak256</code> hasher.\nCreates a new log from an deserialized event.\nCreates a new log.\nCreates a new log, without length-checking. This allows …\nCreates a new log.\nInstantiate without performing the hash. This should be …\nCalculates the smallest value greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nComputes the absolute value of <code>self</code>.\nCalculates $\\mod{\\mathtt{self} + \\mathtt{rhs}}_{2^{BITS}}$.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> / <code>rhs</code>\nCalculates the quotient of Euclidean division …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nCreates a <code>Signed</code> from a sign and an absolute value. …\nCalculates the multiplication of self and rhs.\nCalculates <code>self</code> * <code>rhs</code>\nCalculates $\\mod{-\\mathtt{self}}_{2^{BITS}}$.\nNegates self, overflowing if this is equal to the minimum …\nRaises self to the power of <code>exp</code> and if the result would …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates <code>self</code> % <code>rhs</code>\nOverflowing Euclidean remainder. Calculates …\nLeft shift by <code>rhs</code> bits with overflow detection.\nShifts self left by <code>rhs</code> bits.\nRight shift by <code>rhs</code> bits with underflow detection.\nShifts self right by <code>rhs</code> bits.\nCalculates $\\mod{\\mathtt{self} - \\mathtt{rhs}}_{2^{BITS}}$.\nCalculates <code>self</code> - <code>rhs</code>\nParse an Ethereum address, verifying its EIP-55 checksum.\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCompute $\\mod{\\mathtt{self}^{\\mathtt{rhs}}}_…\nDetermines the recovery ID.\n⚠️ Compute $\\mod{\\mathtt{self}}_{\\mathtt{modulus}}$.\nCalculates the least nonnegative remainder of …\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new <code>FixedBytes</code> where all bytes are set to <code>byte</code>.\nCreates a new byte array where all bytes are set to <code>byte</code>.\nReserialize the data.\nReverses the order of bits in the integer. The least …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nCreate a new byte array from the given slice <code>src</code>, …\nComputes the floor of the <code>degree</code>-th root of the number.\nShifts the bits to the left by a specified amount, <code>rhs</code>, …\nShifts the bits to the right by a specified amount, <code>rhs</code>, …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nComputes <code>self + rhs</code>, saturating at the numeric bounds …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, saturating at the numeric bounds …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nRaises self to the power of <code>exp</code>, saturating on overflow.\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating left shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, saturating at the numeric bounds …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nExamples\nGet the hash.\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nSets a specific bit to a value.\nSet the topic list, truncating to 4 topics.\nSet the topic list, without length-checking. This allows …\nReturns the sign of self.\nCalculates a heuristic for the in-memory size of this …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nConsumes the log data, returning the topic list and the …\nDecompose into parts. Alias for <code>Self::into_parts</code>.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nConverts an EIP-155 V value to a non-EIP-155 V value.\nPanics\nReturns the address of the contract that will be called or …\nReturns the address and selector of the function.\nReturns an iterator over the base <code>base</code> digits of the …\nReturns an iterator over the base <code>base</code> digits of the …\nConverts the <code>Uint</code> to a big-endian byte array of size …\nConverts <code>self</code> to a big-endian byte array of size exactly …\nConverts the <code>Uint</code> to a big-endian byte vector with leading …\nConverts the <code>Uint</code> to a big-endian byte vector of size …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into …\nConvert to a decimal string.\nApplies EIP-155.\nConvert to a hex string.\nConverts the <code>Uint</code> to a little-endian byte array of size …\nConverts <code>self</code> to a little-endian byte array of size exactly\nConverts the <code>Uint</code> to a little-endian byte vector with …\nConverts the <code>Uint</code> to a little-endian byte vector of size …\nConvert to a parity bool, dropping any V information.\nReturns the checksum of a formatted address.\nReturn the corresponding u64 V value.\nGet the topic list.\nGet the topic list, mutably. This gives access to the …\nGet a mutable reference to the topic list. This allows …\nReturns the number of trailing ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of leading zeros in the binary …\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nTries to create a <code>Vec</code> of <code>n</code> elements, each initialized to …\nCompute the two’s complement of this number.\nShortcut for <code>val.try_into().unwrap()</code>.\nShortcut for <code>self.try_into().unwrap()</code>.\nUnseal the inner item, discarding the hash. Alias for …\nComputes the absolute value of <code>self</code> without any wrapping …\nAbsorbs additional input. Can be called multiple times.\nCommon Ethereum utilities.\nCalculates the complete product <code>self * rhs</code> without the …\nApplies EIP-155 with the given chain ID.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nWrap a fixed-size byte array in a newtype, delegating all …\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nComputes <code>self + rhs</code>, wrapping around at the boundary of …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nComputes <code>self / rhs</code> rounding down.\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, wrapping around at the boundary of …\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, wrapping around at the boundary of the …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nComputes <code>self % rhs</code>.\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nLeft shift by <code>rhs</code> bits.\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nRight shift by <code>rhs</code> bits.\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nComputes <code>self - rhs</code>, wrapping around at the boundary of …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nExamples\nReturn the y-parity as a boolean.\nReturn the y-parity as 0 or 1\nReturn the y-parity byte as 27 or 28, in the case of a …\n128-byte fixed byte-array type.\n16-byte fixed byte-array type.\n2-byte fixed byte-array type.\n24-byte fixed byte-array type.\n256-byte fixed byte-array type.\n28-byte fixed byte-array type.\n32-byte fixed byte-array type.\n4-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\n1-byte fixed byte-array type.\n12-byte fixed byte-array type.\nA block hash.\nA block number.\nChain identifier type (introduced in EIP-155).\nThe 0-bit signed integer type, capable of representing 0.\nThe 1-bit signed integer type, capable of representing 0 …\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n192-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n512-bit signed integer type, consisting of 8, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nSolidity contract functions are addressed using the first …\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nA correctly sized stack allocation for the formatted bytes …\nThe associated error which can be returned from parsing.\nTypes that can be decoded from a hex string.\nThe error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …\nThe table of lowercase characters used for hex encoding.\nThe table of uppercase characters used for hex encoding.\nThe lookup table of hex byte to value, used for hex …\nAn invalid character was found. Valid ones are: <code>0...9</code>, …\nIf the hex string is decoded into a fixed sized container, …\nThe length of the buffer in bytes.\nRepresents an invalid value in the <code>HEX_DECODE_LUT</code> table.\nA hex string’s length needs to be even, as two digits …\nEncoding values as hex string.\nEncoding values as hex string.\nReturns a reference the underlying stack-allocated byte …\nReturns a reference to the underlying bytes.\nReturns a mutable reference the underlying stack-allocated …\nReturns a mutable reference to the underlying bytes.\nReturns an unsafe mutable pointer to the slice’s buffer.\nReturns a mutable reference to the underlying bytes casted …\nReturns a raw pointer to the buffer.\nReturns a reference to the underlying bytes casted to a …\nReturns a mutable reference to the underlying buffer, …\nReturns <code>true</code> if the input is a valid hex string and can be …\nReturns <code>true</code> if the input is a valid hex string.\nReturns <code>true</code> if the input is a valid hex string and can be …\nReturns <code>true</code> if the input is a valid hex string.\nDecode a hex string into a fixed-length byte-array.\nEncodes <code>input</code> as a hex string into a <code>Buffer</code>.\nPrint an array of bytes into this buffer.\nPrint an array of bytes into this buffer.\nDecodes a hex string into raw bytes.\nDecode a hex string into a fixed-length byte-array.\nDecode a hex string into a mutable bytes slice.\nDeserializes a hex string into raw bytes.\nEncodes <code>data</code> as a hex string using lowercase characters.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result …\nEncode the hex strict representing <code>self</code> into the result …\nEncodes <code>data</code> as a prefixed hex string using lowercase …\nEncodes <code>input</code> as a hex string using lowercase characters …\nEncodes <code>input</code> as a hex string using uppercase characters …\nEncodes <code>data</code> as a hex string using uppercase characters.\nEncodes <code>data</code> as a prefixed hex string using uppercase …\nPrint an array of bytes into this buffer and return a …\nPrint a slice of bytes into this buffer and return a …\nPrint a slice of bytes into this buffer and return a …\nPrint an array of bytes into this buffer and return a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance of type <code>Self</code> from the given hex …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a cheap operation; you don’t need to worry about …\nHex encoding with <code>serde</code>.\nSerializes <code>data</code> as hex string using lowercase characters.\nSerializes <code>data</code> as hex string using uppercase characters.\nCopies <code>self</code> into a new owned <code>String</code>.\nCopies <code>self</code> into a new <code>Vec</code>.\nModified from <code>hex</code>.\nDeserializes a hex string into raw bytes.\nSerializes <code>data</code> as hex string using lowercase characters.\nSerializes <code>data</code> as hex string using uppercase characters.\nThe associated error which can be returned from parsing.\nTypes that can be decoded from a hex string.\nEncoding values as hex string.\nEncoding values as hex string.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result …\nEncode the hex strict representing <code>self</code> into the result …\nCreates an instance of type <code>Self</code> from the given hex …\nMacro for converting sequence of string literals …\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nError for <code>from_base_le</code> and <code>from_base_be</code>.\nError from <code>Uint::from_base_be</code>.\nA newtype wrapper around <code>Uint</code> that restricts operations to …\nError for <code>TryFrom&lt;Uint&gt;</code>.\nThe requested number base <code>.0</code> is less than two.\nThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>…\nInvalid digit in string.\nInvalid radix, up to base 64 is supported.\nThe size of this integer type in 64-bit limbs.\n‘Not a number’ (NaN) can not be represented as Uint\nNumber is equal or larger than the target field modulus.\nThe value is too large to fit the target type.\nThe Uint value is too large for the target type.\nError for <code>from_str_radix</code>.\nError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.\nError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\nNegative values can not be represented as Uint.\nValue is too large to fit the Uint.\nThe value zero. This is the only value that exists in all …\n⚠️ Collection of bignum algorithms.\nType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.\nSee <code>Uint::as_le_bytes</code> for documentation.\nSee <code>Uint::as_limbs</code> for documentation.\nSee <code>Uint::as_limbs_mut</code> for documentation.\nReturns a reference to the inner Uint.\nReturns a mutable reference to the inner Uint.\nSee <code>Uint::checked_shl</code> for documentation.\nSee <code>Uint::checked_shr</code> for documentation.\nCompile time for loops with a <code>const</code> variable for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>Uint::from_be_bytes</code> for documentation.\nSee <code>Uint::from_le_bytes</code> for documentation.\nSee <code>Uint::from_limbs</code> for documentation.\nSee <code>Uint::from_str_radix</code> for documentation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner Uint.\nSee <code>Uint::leading_ones</code> for documentation.\nSee <code>Uint::leading_zeros</code> for documentation.\nMask to apply to the highest limb to get the correct …\nNumber of bytes required to represent the given number of …\nNumber of <code>u64</code> limbs required to represent the given number …\nSee <code>Uint::overflowing_shl</code> for documentation.\nSee <code>Uint::overflowing_shr</code> for documentation.\nSee <code>Uint::reverse_bits</code> for documentation.\nSee <code>Uint::rotate_left</code> for documentation.\nSee <code>Uint::rotate_right</code> for documentation.\nSupport for external crates.\nSee <code>Uint::to_be_bytes</code> for documentation.\nSee <code>Uint::to_be_bytes_vec</code> for documentation.\nSee <code>Uint::to_le_bytes</code> for documentation.\nSee <code>Uint::trailing_ones</code> for documentation.\nSee <code>Uint::trailing_zeros</code> for documentation.\nSee <code>Uint::try_from_be_slice</code> for documentation.\nSee <code>Uint::try_from_le_slice</code> for documentation.\nSee <code>Uint::wrapping_shl</code> for documentation.\nSee <code>Uint::wrapping_shr</code> for documentation.\n⚠️ Lehmer update matrix\n<code>lhs += rhs + carry</code>\nComputes <code>lhs += a</code> and returns the carry.\n⚠️ Computes <code>result += a * b</code> and checks for overflow.\nComputes wrapping <code>lhs += a * b</code> when all arguments are the …\nComputes <code>lhs += a * b</code> and returns the carry.\nApplies the matrix to a <code>Uint</code>.\nApplies the matrix to a <code>u128</code>.\nCompare two <code>u64</code> slices in reverse order.\nReturns the matrix product <code>self * other</code>.\n⚠️ Collection of division algorithms.\n⚠️ Division with remainder.\nReturns the argument unchanged.\nCompute a Lehmer update matrix from two <code>Uint</code>s.\nCompute the Lehmer update matrix in full 64 bit precision.\nCompute the Lehmer update matrix for small values.\nCompute the largest valid Lehmer update matrix for a …\n⚠️ Lehmer’s GCD algorithms.\n⚠️ Lehmer’s extended GCD.\nCalls <code>U::from(self)</code>.\n⚠️ Modular inversion using extended GCD.\nComputes <code>lhs *= a</code> and returns the carry.\nSee Handbook of Applied Cryptography, Algorithm 14.32, p. …\n<code>lhs -= rhs - borrow</code>\nComputes <code>lhs -= a * b</code> and returns the borrow.\n⚠️ Division with remainder.\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Computes the quotient of a 192 bits divided by a …\nTODO: This implementation is off by one.\n⚠️ Compute single limb division.\n⚠️ Compute single limb normalized division.\n⚠️ Compute double limb division.\n⚠️ Compute double limb normalized division.\n⚠️ In-place Knuth long division with implicit …\n⚠️ In-place Knuth normalized long division with …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - …\n<code>Bits</code> for <code>0</code> bits.\n<code>Bits</code> for <code>1</code> bits.\n<code>Bits</code> for <code>1024</code> bits.\n<code>Bits</code> for <code>128</code> bits.\n<code>Bits</code> for <code>16</code> bits.\n<code>Bits</code> for <code>160</code> bits.\n<code>Bits</code> for <code>192</code> bits.\n<code>Bits</code> for <code>2048</code> bits.\n<code>Bits</code> for <code>256</code> bits.\n<code>Bits</code> for <code>32</code> bits.\n<code>Bits</code> for <code>320</code> bits.\n<code>Bits</code> for <code>384</code> bits.\n<code>Bits</code> for <code>4096</code> bits.\n<code>Bits</code> for <code>448</code> bits.\n<code>Bits</code> for <code>512</code> bits.\n<code>Bits</code> for <code>64</code> bits.\n<code>Bits</code> for <code>768</code> bits.\n<code>Bits</code> for <code>8</code> bits.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>768</code> bits.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nThe prefix used for hashing messages according to EIP-191.\nEther is equivalent to 1e18 wei.\nGwei is equivalent to 1e9 wei.\nSigned 256-bit integer.\nThe provided units are not recognized.\nKwei is equivalent to 1e3 wei.\nSimple <code>Keccak-256</code> hasher.\nThe largest unit.\nThe smallest unit.\nMwei is equivalent to 1e6 wei.\nPwei is equivalent to 1e15 wei.\nOverflow when parsing a signed number.\nThis enum holds the numeric types that a possible to be …\nTwei is equivalent to 1e12 wei.\nUnsigned 256-bit integer.\nEthereum unit. Always less than <code>77</code>.\nError type for <code>Unit</code>-related operations.\nWei is equivalent to 1 wei.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric value of the unit.\nReturns the absolute value of the number.\nReturns the signed value of the number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is negative.\nReturns <code>true</code> if the number is positive.\nReturns <code>true</code> if the number is signed.\nReturns <code>true</code> if the number is unsigned.\nReturns <code>true</code> if the number is zero.\nSimple interface to the <code>Keccak-256</code> hash function.\nCreates a new <code>Unit</code> instance, checking for overflow.\nCreates a new <code>Unit</code> instance.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nParses a decimal number and multiplies it with 10^units.\nTries to collect the elements of an iterator into a <code>Vec</code>.\nTries to create a <code>Vec</code> with the given capacity.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nWhether the event is anonymous.\nThe ABI representation of this type.\nArray out of bounds access.\nUsed by the <code>assert()</code> builtin.\nTrailing bytes in deserialization buffer.\nThe number of variants in the enum.\nThe number of topics.\nThe number of variants.\nThe number of variants.\nA generic contract error.\nA contract’s custom error.\nA contract’s custom error.\nWhether the ABI-encoded size is dynamic.\nThe <code>TokenSeq</code> type corresponding to the tuple.\nThe underlying tuple type which represents this event’s …\nDivision or modulo by zero.\nThe statically-known ABI-encoded size of the type.\nEIP-712 domain attributes used in determining the domain …\nEmpty array pop.\nEnum conversion error.\nContains the error value\nABI Encoding and Decoding errors.\nA Solidity event topic.\nHex error.\nGeneric / unspecified error.\nA generic contract error.\nRepresents the reason for a revert in a generic contract …\nInvalid enum value.\nCalling invalid internal function.\nCould not decode an event from log topics.\nExtension trait for ABI representation.\nThe minimum length of the data for this type.\nThe name of this type.\nThe name of this type.\nThe struct name.\nThe name of the struct.\nContains the success value\nOther errors.\nOverran deserialization buffer.\nA Solidity panic.\nA panic. See <code>Panic</code> for more information.\nA panic. See <code>Panic</code> for more information.\nRepresents a Solidity panic. Same as the Solidity …\nThe underlying tuple type which represents the error’s …\nThe underlying tuple type which represents this type’s …\nThe underlying tuple type which represents this type’s …\nABI Decoding recursion limit exceeded.\nValidation reserialization did not match input.\nAllocation failed.\nResource error (too large allocation or too large array).\nABI result type.\nThe function’s return struct.\nThe returns’ corresponding TokenSeq type.\nThe underlying tuple type which represents this type’s …\nRepresents a standard Solidity revert. These are thrown by …\nA generic revert. See <code>Revert</code> for more information.\nA generic revert. See <code>Revert</code> for more information.\nThe corresponding Rust type.\nThe error selector: <code>keccak256(SIGNATURE)[0..4]</code>\nThe function selector: <code>keccak256(SIGNATURE)[0..4]</code>\nThe error’s ABI signature.\nThe event’s ABI signature.\nThe function’s ABI signature.\nThe event’s ABI signature hash, or selector: …\nThe name of this type in Solidity.\nIterator over the function or error selectors of a …\nA Solidity function call.\nA Solidity constructor.\nA Solidity enum. This is always a wrapper around a <code>u8</code>.\nA Solidity custom error.\nSolidity event.\nA collection of <code>SolEvent</code>s.\nA collection of ABI-encodable call-like types. This …\nA Solidity struct.\nA Solidity type.\nThe Solidity type that this type corresponds to.\nA Solidity value.\nInvalid encoding in storage.\nThe corresponding <code>TokenSeq</code> type.\nThe arguments’ corresponding TokenSeq type.\nThe arguments’ corresponding TokenSeq type.\nThe corresponding ABI token type.\nA list of Solidity event topics.\nThe underlying tuple type which represents this event’s …\nA typecheck detected a word that does not match the data …\nArithmetic underflow or overflow.\nUnknown selector.\nThe ABI word type.\nEthereum ABI codec implementation.\nReturns the ABI representation of this type.\nABI decode the enum from the given buffer.\nABI decode this error’s arguments from the given slice, …\nABI decode this call’s arguments from the given slice, …\nABI-decodes the given data into one of the variants of <code>self</code>…\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI-decodes the dynamic data of this event from the given …\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI-decodes the given data into one of the variants of <code>self</code>…\nABI decode this call’s arguments from the given slice, …\nABI decode this call’s arguments from the given slice, …\nABI decode this call’s return values from the given …\nABI-decode this type from the given data.\nDecodes this type’s value from an ABI blob by …\nABI encode the enum.\nABI encode the error to the given buffer <strong>with</strong> its selector.\nABI encode the call to the given buffer <strong>with</strong> its selector.\nABI encode the call to the given buffer.\nABI-encodes <code>self</code> into the given buffer.\nABI-encodes the value.\nTokenizes and ABI-encodes the given value by wrapping it …\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nNon-standard Packed Mode ABI encoding.\nEncodes an ABI sequence suitable for function parameters.\nTokenizes and ABI-encodes the given value as function …\nABI-encodes <code>self</code> into the given buffer, <em>without</em> any …\nABI encode the enum into the given buffer.\nABI encode the error to the given buffer <strong>without</strong> its …\nABI encode the call to the given buffer <strong>without</strong> its …\nABI encode the call’s return values.\nEncodes an ABI sequence.\nTokenizes and ABI-encodes the given value as a sequence.\nThe size of the encoded data, <em>without</em> any selectors.\nThe size of the error params when encoded in bytes, <strong>without</strong>…\nThe size of the ABI-encoded dynamic data in bytes.\nThe size of the encoded data in bytes, <strong>without</strong> its …\nThe size of the encoded data in bytes.\nCalculate the ABI-encoded size of the data.\nCalculate the ABI-encoded size of the data, counting both …\nReturns the number of bytes that will be used to encode …\nReturns an immutable reference to the inner custom error …\nReturns a mutable reference to the inner custom error if …\nReturns an immutable reference to the inner <code>Panic</code> if <code>self</code> …\nReturns a mutable reference to the inner <code>Panic</code> if <code>self</code> …\nReturns an immutable reference to the inner <code>Revert</code> if <code>self</code> …\nReturns a mutable reference to the inner <code>Revert</code> if <code>self</code> …\nReturns the panic code’s string representation.\nThe EIP-155 chain ID. The user-agent should refuse signing …\nThe Solidity panic code.\nInstantiates a new error with a static str.\nDecode the event from the given log object.\nDecode the events from the given log object.\nDecode the event from the given log object.\nDecode the events from the given log info.\nDecode the event from the given log info.\nDecodes and retrieves the reason for a revert from the …\nDecode the topics of this event from the given data.\nDetokenize the topics into a tuple of rust types.\nDetokenize this type’s value from the given token.\nDetokenize a value from the given token.\nReturns component EIP-712 types. These types are used to …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nEncode this data according to EIP-712 <code>encodeData</code> rules, …\nConvenience macro to instantiate an EIP-712 domain.\nEncodes this domain using EIP-712 <code>encodeData</code>.\nThe EIP-712-encoded type string.\nHashes this struct according to EIP-712 <code>hashStruct</code>.\nReturn the root EIP-712 type. This type is used to …\nDoes something.\nCalculates the EIP-712 <code>typeHash</code> for this struct.\nABI-encode the dynamic data of this event.\nEncodes this domain using EIP-712 <code>encodeData</code>.\nABI-encode the dynamic data of this event into the given …\nEncodes this domain using EIP-712 <code>encodeData</code> into the …\nIndexed event parameter encoding.\nEncodes this type as preimage bytes which are then hashed …\nEncode the topics of this event.\nEncode the topics of this event into a fixed-size array.\nEncode the topics of this event into the given buffer.\nThe EIP-712-encoded type string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the panic code for the given number if it is a …\nHashes this domain according to EIP-712 <code>hashStruct</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> matches <code>CustomError</code>.\nReturns <code>true</code> if <code>self</code> matches <code>Panic</code>.\nReturns <code>true</code> if <code>self</code> matches <code>Revert</code>.\nReturns the PanicKind if this panic code is a known …\nThe user readable name of signing domain, i.e. the name of …\nConvert from the tuple type used for ABI encoding and …\nConvert decoded rust data to the event type.\nConvert from the tuple type used for ABI encoding and …\nConvert from the tuple type used for ABI encoding and …\nInstantiate a new EIP-712 domain.\nReturns the number of ABI words (32 bytes) that will be …\nReturns the revert reason string, or <code>&quot;&lt;empty&gt;&quot;</code> if empty.\nThe reason string, provided by the Solidity contract.\nA disambiguating salt for the protocol. This can be used …\nThe selector of this instance.\nThe selector of this type at the given index, used in …\nReturns an iterator over the selectors of this type.\nCalculate the domain separator for the domain object.\nGenerate types that implement <code>linera-alloy-sol-types</code> …\nSolidity types.\nThe name of the associated Solidity type.\nThe name of the associated Solidity type.\nReturns the name of this type in Solidity.\nConvert to the token type used for EIP-712 encoding and …\nTokenize the call’s arguments.\nTokenize the call’s arguments.\nTokenize the enum.\nTokenizes the given value into this type’s token.\nTokenizes the given value into this type’s token.\nTokenize the event’s non-indexed parameters.\nThe number of bytes this type occupies in another topic’…\nThe event’s topics.\nReturns an error if the given selector is not known to …\nReturns an error if the given token cannot be detokenized …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nInstantiates a new <code>Error::TypeCheckFail</code> with the provided …\nCalculates the EIP-712 <code>typeHash</code> for this domain.\nInstantiates a new <code>Error::UnknownSelector</code> with the …\nUtilities used by different modules.\nReturns <code>true</code> if the given selector is known to this type.\nReturns <code>true</code> if the given token can be detokenized with …\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nHex-encoded data.\nThe Solidity type we failed to produce.\nThe invalid log.\nThe maximum valid value.\nThe name of the enum.\nThe name of the enum or event.\nThe type name.\nThe unknown selector.\nThe invalid value.\nTrue if the token represents a dynamically-sized type.\nThe <code>Decoder</code> wraps a byte slice with necessary info to …\nThe ABI encoding of an empty byte array (<code>bytes</code> or <code>string</code>).\nAn ABI encoder.\nTrue for tuples only.\nThe decoder recursion limit. This is currently hardcoded, …\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nShortcut for appending a token sequence.\nAppend a pointer to the current suffix offset.\nAppend a sequence of bytes as a packed sequence with a …\nAppend a sequence length.\nAppend a word to the encoder.\nBump the suffix offset by a given number of words.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nABI-decodes a token by wrapping it in a single-element …\nDecodes a single token from the underlying buffer.\nDecode a token from a decoder.\nABI-decodes top-level function args.\nDecodes ABI compliant vector of bytes into vector of …\nABI-decode the token sequence from the encoder.\nDecodes a sequence of tokens from the underlying buffer.\nABI-encodes a single token.\nABI-encodes a tuple as ABI function params, suitable for …\nABI-encodes a token sequence.\nABI-encode the token sequence into the encoder.\nFinish the encoding process, returning the encoded words.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinish the encoding process, returning the encoded bytes.\nReturns whether the remaining buffer is empty.\nInstantiate a new empty encoder.\nInstantiate a new decoder from a byte slice and a …\nReturns the current offset in the buffer.\nPeek into the buffer.\nPeek a slice of size <code>len</code> from the buffer without advancing …\nPeek a slice of size <code>len</code> from the buffer at a specific …\nPeek a <code>usize</code> from the buffer, without advancing the offset.\nPeek a <code>usize</code> from the buffer at a specific offset, without …\nPeek the next word from the buffer without advancing the …\nPeek a word from the buffer at a specific offset, without …\nRemoves the last offset and returns it.\nAppends a suffix offset.\nCreate a child decoder, starting at <code>offset</code> bytes from the …\nReturns the number of bytes in the remaining buffer.\nReturns a reference to the remaining bytes in the buffer.\nReturns the number of words in the remaining buffer.\nSets the current offset in the buffer.\nSet whether to validate type correctness.\nDetermine the current suffix offset.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nReturn a child decoder by consuming a word, interpreting …\nTakes a <code>usize</code> offset from the buffer by consuming a word.\nTakes the offset from the child decoder and sets it as the …\nTakes a slice of bytes of the given length by consuming up …\nTakes a slice of bytes of the given length.\nTake a word from the buffer, advancing the offset.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nReturns <code>true</code> if this decoder is validating type …\nInstantiate a new encoder with a given capacity in words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nReturns a reference to the array.\nReturns a reference to the word as a slice.\nReturns a reference to the array as a slice.\nReturns a reference to the backing slice.\nReturns a reference to the slice.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the backing array, consuming the token.\nInstantiate a new <code>Bytes</code> by copying the underlying slice.\nInstantiate a new <code>Vec</code> by copying the underlying slice.\nCreate a new word token from a word.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\nAddress - <code>address</code>\nArray - <code>T[]</code>\nThe number of bits in the integer: <code>BITS</code>\nThe number of bytes in the integer: <code>BITS / 8</code>\nBool - <code>bool</code>\nSpecifies the number of bytes in a <code>FixedBytes</code> array as a …\nBytes - <code>bytes</code>\nFixedArray - <code>T[M]</code>\nFixedBytes - <code>bytesX</code>\nFunction - <code>function</code>\nThe name of the <code>Int</code> type: <code>int&lt;N&gt;</code>\nInt - <code>intX</code>\nThe signed integer Rust representation.\nSpecifies the number of bits in an <code>Int</code> or <code>Uint</code> as a type.\nThe name of the <code>FixedBytes</code> type: <code>bytes&lt;N&gt;</code>\nThe difference between the representation’s and this …\nString - <code>string</code>\nStatically guarantees that a <code>FixedBytes</code> byte count is …\nStatically guarantees that a <code>Int</code> or <code>Uint</code> bit count is …\nThe name of the <code>Uint</code> type: <code>uint&lt;N&gt;</code>\nUint - <code>uintX</code>\nThe unsigned integer Rust representation.\nThe index of the most significant byte in the Word type.\nDetokenizes a signed integer.\nDetokenizes an unsigned integer.\nABI-encode a signed integer in packed mode.\nABI-encode an unsigned integer in packed mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTokenizes a signed integer.\nTokenizes an unsigned integer.\nSee <code>usize::next_multiple_of</code>.\nCalculates the padded length of a slice by rounding its …\nCalculates the padded length of a slice of a specific …")
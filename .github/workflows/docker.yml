name: Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - "**"
    paths:
      - 'docker/Dockerfile'
      - 'docker/compose.sh'
      - 'Cargo.toml'
      - '.github/workflows/docker.yml'
      - 'linera-*'
  workflow_dispatch:

# This allows a subsequently queued workflow run to interrupt previous runs on pull-requests
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.run_id }}'
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  # We allow redundant explicit links because `cargo rdme` doesn't know how to resolve implicit intra-crate links.
  RUSTDOCFLAGS: -A rustdoc::redundant_explicit_links -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  RUST_LOG: warn

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest-16-cores
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build client binary
        run: |
          cargo install --path linera-service --bin linera --bin linera-server --debug --features benchmark
      - name: Build Docker image
        run: docker build . -f docker/Dockerfile -t linera
      - name: Run Compose
        run: cd docker && ./compose.sh &
      - name: Sync
        uses: nick-fields/retry@v2
        with:
          # Docker compose can take some time to start
          max_attempts: 5
          timeout_minutes: 2
          command: sleep 60 && linera --wallet docker/wallet.json --storage rocksdb:docker/linera.db sync-balance
      - name: Run benchmarks
        run: |
          ./scripts/bench.sh docker/wallet.json rocksdb:docker/linera.db > benchmark_results.txt
      - name: Read benchmark results
        id: read_results
        run: |
          results=$(cat benchmark_results.txt)
          echo "::set-output name=results::$results"
      - name: Post benchmark results as a PR comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Benchmark Results
            ```
            ${{ steps.read_results.outputs.results }}
            ```

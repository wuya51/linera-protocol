searchState.loadedDescShard("cranelift_wasm", 0, "Performs translation from a wasm module in binary format …\nThis is a constant global with a value known at compile …\nThis is a global variable that needs to be handled by the …\nIndex type of a passive data segment inside the …\nIndex type of a defined function inside the WebAssembly …\nIndex type of a defined global inside the WebAssembly …\nIndex type of a defined memory inside the WebAssembly …\nIndex type of a defined table inside the WebAssembly …\nThis <code>ModuleEnvironment</code> implementation is a “naïve” …\nIndex type of a passive element segment inside the …\nAn index of an entity.\nA type of an item in a wasm module where an item is …\nContains the error value\nExternRef type\nF32 type\nAn <code>f32.const</code>.\nF64 type\nAn <code>f64.const</code>.\nA function.\nEnvironment affecting the translation of a single …\nIndex type of a function (imported or defined) inside the …\nFuncRef type\nContains information passed along during a function’s …\nWebAssembly to Cranelift IR function translator.\nFunction index.\nA function type where the index points to the type section …\nTemporary object used to build a single Cranelift IR …\nA <code>global.get</code> of another global.\nA WebAssembly global.\nGlobal index.\nA global variable with the specified content type\nIndex type of a global variable (imported or defined) …\nGlobals are initialized via the <code>const</code> operators or by …\nThe value of a WebAssembly global variable.\nI32 type\nAn <code>i32.const</code>.\nI64 type\nAn <code>i64.const</code>.\nAn implementation limit was exceeded.\n&lt; The global is imported from, and thus initialized by, a …\nThe input WebAssembly code is invalid.\nWebAssembly linear memory.\nThis is a variable in memory that should be referenced …\nMemory index.\nA linear memory with the specified limits\nIndex type of a linear memory (imported or defined) inside …\nAn object satisfying the <code>ModuleEnvironment</code> trait can be …\nContains information decoded from the Wasm module that …\nContains the success value\nIndex type of a defined memory inside the WebAssembly …\nA <code>ref.func &lt;index&gt;</code>.\nA <code>ref.null</code>.\nIndex type of a signature (imported or defined) inside the …\nWebAssembly table.\nTable index.\nA table with the specified element type and limits\nWebAssembly table element. Can be a function or a scalar …\nIndex type of a table (imported or defined) inside the …\nWebAssembly event.\nAn event definition.\nIndex type of an event inside the WebAssembly module.\nEnvironment affecting the translation of a WebAssembly.\nIndex type of a type inside the WebAssembly module.\nA feature used by the WebAssembly code is not supported by …\nAny user-defined error.\nV128 type\nA <code>vconst</code>.\nVersion number of this crate.\nA scalar type.\nA WebAssembly translation error.\nWebAssembly function type – equivalent of <code>wasmparser</code>’s …\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nWebAssembly value type – equivalent of <code>wasmparser</code>’s …\nCalled after the locals for a function have been parsed, …\nCalled after the locals for a function have been parsed, …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nCreates a parameter for a specific <code>Block</code> by appending it …\nAppend parameters to the given <code>Block</code> corresponding to the …\nAppend parameters to the given <code>Block</code> corresponding to the …\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nOptional callback for the <code>FunctionEnvironment</code> performing …\nRetrieves all the parameters for a <code>Block</code> currently …\nCreate a <code>Block</code> with the given Wasm parameters.\nGet the parameter and result types for the given Wasm …\nCalls libc.memcmp\nCalls libc.memcpy\nCalls libc.memmove\nCalls libc.memset\nChanges the destination of a jump instruction after …\nReturns the underlying <code>FunctionBuilderContext</code> that this …\nCreates a new <code>Block</code> and returns its reference.\nCreates a dynamic stack slot in the function, to be used …\nDeclares a global value accessible to the function.\nDeclares a heap accessible to the function.\nCreates a jump table in the function, to be used by …\nCreates a sized stack slot in the function, to be used by …\nGet the block that this builder is currently at.\nReturns a <code>FuncCursor</code> pointed at the current position ready …\nIndicates that a custom section has been found in the wasm …\nIndicates that a custom section has been found in the wasm …\nFills a declared memory with bytes at module instantiation.\nIndicates that a declarative element segment was seen in …\nIndicates that a declarative element segment was seen in …\nDeclares a function export to the environment.\nDeclares a function import to the environment.\nDeclares the name of a function to the environment.\nDeclares the name of a function to the environment.\nDeclares the type (signature) of a local function in the …\nDeclares a global to the environment.\nDeclares a global export to the environment.\nDeclares a global import to the environment.\nDeclares the name of a function’s local to the …\nDeclares the name of a function’s local to the …\nDeclares a memory to the environment\nDeclares a memory export to the environment.\nDeclares a memory import to the environment.\nDeclares the name of a module to the environment.\nDeclares the name of a module to the environment.\nDeclare a passive data segment.\nDeclare a passive element segment.\nDeclares the optional start function.\nDeclares a table to the environment.\nFills a declared table with references to functions in the …\nDeclares a table export to the environment.\nDeclares a table import to the environment.\nDeclares an tag to the environment\nDeclares an tag to the environment\nDeclares an tag export to the environment.\nDeclares an tag export to the environment.\nDeclares an tag import to the environment.\nDeclares an tag import to the environment.\nDeclares a function signature to the environment.\nIn order to use a variable (by calling …\nRegister a new definition of a user variable. The type of …\nProvides the contents of a function body.\nOptimised <code>Self::call_memcmp</code> for small copies.\nOptimised memcpy or memmove for small copies.\nCalls libc.memset\nMake sure that the current block is inserted in the layout.\nHow many <code>externref</code>s are in this function’s params?\nHow many <code>externref</code>s are in this function’s returns?\nTurns a <code>wasmparser</code> <code>f32</code> into a <code>Cranelift</code> one.\nTurns a <code>wasmparser</code> <code>f64</code> into a <code>Cranelift</code> one.\nDeclare that translation of the current function is …\nNotifies the implementation that all exports have been …\nNotifies the implementation that all exports have been …\nNotifies the implementation that all imports have been …\nNotifies the implementation that all imports have been …\nConvert from a <code>BinaryReaderError</code> to a <code>WasmError</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new ModuleTranslationState with the given …\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nThe function currently being built. This field is public …\nVector of wasm bytecode size for each function.\nReturn a <code>DummyFuncEnvironment</code> for translating functions …\nReturn the name of the function, if a name for the …\nReturn the number of imported functions within this …\nSpecial VMContext value label. It is tracked as …\nDeclare an external function import.\nAdds a signature which can later be used to declare an …\nModule information.\nThe source of the initial value.\nReturns an object with the <code>InstBuilder</code> trait that allows …\nInsert <code>block</code> in the layout <em>after</em> the existing block <code>after</code>.\nReturns the result values of an instruction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if and only if a terminator instruction has …\nReturns <code>true</code> if and only if no instructions have been …\nReturns <code>true</code> if and only if the current <code>Block</code> is sealed …\nIs the given parameter of the given function a wasm-level …\nIs the given parameter of the given function a wasm-level …\nIs the given return of the given function a wasm-level …\nIs the given return of the given function a wasm-level …\nSet up an external function definition in the preamble of …\nSet up the necessary preamble definitions in <code>func</code> to …\nSet up the necessary preamble definitions in <code>func</code> to …\nSet up a signature definition in the preamble of <code>func</code> that …\nSet up the necessary preamble definitions in <code>func</code> to …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nWhether or not this is a 64-bit memory\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nName of the module from the wasm file.\nA flag indicating whether the value may change at runtime.\nCreates a new FunctionBuilder structure that will operate …\nCreates a new <code>DummyEnvironment</code> instance.\nCreate a new translator.\nCreates a new empty ModuleTranslationState.\nCreates a new <code>Global</code> type from wasmparser’s …\nFunction params types.\nGet the size of a native pointer, in bytes.\nGet the size of a native pointer, in bytes.\nGet the Cranelift integer type to use for native pointers.\nGet the Cranelift integer type to use for native pointers.\nTrue if the current translation state expresses reachable …\nGet the Cranelift reference type to use for the given Wasm …\nGet the Cranelift reference type to use for the given Wasm …\nProvides the number of data initializers up front. By …\nProvides the number of data initializers up front. By …\nProvides the number of exports up front. By default this …\nProvides the number of exports up front. By default this …\nProvides the number of defined functions up front. By …\nProvides the number of defined functions up front. By …\nIndicates how many functions the code section reports and …\nIndicates how many functions the code section reports and …\nProvides the number of defined globals up front. By …\nProvides the number of defined globals up front. By …\nProvides the number of imports up front. By default this …\nProvides the number of imports up front. By default this …\nProvides the number of defined memories up front. By …\nProvides the number of defined memories up front. By …\nProvides the number of passive data segments up front.\nProvides the number of passive data segments up front.\nProvides the number of element initializers up front. By …\nProvides the number of element initializers up front. By …\nProvides the number of defined tables up front. By default …\nProvides the number of defined tables up front. By default …\nProvides the number of defined tags up front. By default …\nProvides the number of defined tags up front. By default …\nProvides the number of types up front. By default this …\nProvides the number of types up front. By default this …\nReturns params types.\nEffectively calls seal_block on all unsealed blocks in the …\nDeclares that all the predecessors of this block are known.\nMark a block as “cold”.\nSet the source location that should be assigned to all new …\nSet label for Value\nWhether the memory may be shared between multiple threads.\nRetrieves the signature with reference <code>sigref</code> previously …\nAfter the call to this function, new instructions will be …\nHelper function translating wasmparser possible table …\nGet the information needed to produce Cranelift IR for the …\nTest reachability bits before and after every opcode …\nTranslate a binary WebAssembly function.\nTranslate an <code>atomic.notify</code> WebAssembly instruction. The …\nTranslate an <code>i32.atomic.wait</code> or <code>i64.atomic.wait</code> …\nTranslate a binary WebAssembly function from a <code>FunctionBody</code>…\nTranslate a <code>call</code> WebAssembly instruction at <code>pos</code>.\nTranslate a <code>call</code> WebAssembly instruction at <code>pos</code>.\nTranslate a <code>call_indirect</code> WebAssembly instruction at <code>pos</code>.\nTranslate a <code>global.get</code> WebAssembly instruction at <code>pos</code> for …\nTranslate a <code>global.set</code> WebAssembly instruction at <code>pos</code> for …\nTranslate a <code>data.drop</code> WebAssembly instruction.\nTranslate a <code>elem.drop</code> WebAssembly instruction.\nEmit code at the beginning of every wasm loop.\nEmit code at the beginning of every wasm loop.\nTranslate a <code>memory.copy</code> WebAssembly instruction.\nTranslate a <code>memory.fill</code> WebAssembly instruction.\nTranslate a <code>memory.grow</code> WebAssembly instruction.\nTranslate a <code>memory.init</code> WebAssembly instruction.\nTranslates a <code>memory.size</code> WebAssembly instruction.\nTranslate a sequence of bytes forming a valid Wasm binary …\nTranslate a <code>ref.func</code> WebAssembly instruction.\nTranslate a <code>ref.is_null</code> WebAssembly instruction.\nTranslate a <code>ref.is_null</code> WebAssembly instruction.\nTranslate a <code>ref.null T</code> WebAssembly instruction.\nTranslate a <code>ref.null T</code> WebAssembly instruction.\nTranslate a <code>table.copy</code> WebAssembly instruction.\nTranslate a <code>table.fill</code> WebAssembly instruction.\nTranslate a <code>table.get</code> WebAssembly instruction.\nTranslate a <code>table.grow</code> WebAssembly instruction.\nTranslate a <code>table.init</code> WebAssembly instruction.\nTranslate a <code>table.set</code> WebAssembly instruction.\nTranslate a <code>table.size</code> WebAssembly instruction.\nDeclares the type of a variable, so that it can be used …\nRegisters a new definition of a user variable. This …\nReturns the Cranelift IR necessary to use a previously …\nThe event signature type.\nTranslates a type index to its signature index, only …\nTranslates a type index to its signature index, only …\nHelper function translating wasmparser types to Cranelift …\nReturns the target ISA’s condition to check for unsigned …\nReturns the Cranelift IR value corresponding to the …\nReturns the list of enabled wasm features this translation …\nReturns the list of enabled wasm features this translation …\nThe Wasm type of the value stored in the global.\nThe table elements’ Wasm type.\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nThe address of the global variable storage.\nAn offset to add to the address.\nThe global variable’s type.\nA string describing the validation error.\nThe bytecode offset where the error occurred.\nThe data segment is active.\nThe element segment is active.\nRepresents a core alias for a WebAssembly module.\nThe module type declaration is for an alias.\nThe component type declaration is for an alias.\nThe instance type declaration is for an alias.\nA core alias section was received and the provided parser …\nA reader for the core alias section of a WebAssembly …\nA binary reader of the WebAssembly structures and types.\nA binary reader for WebAssembly modules.\nRepresents a block type.\nThe type is a boolean.\nA br_table entries representation.\nRepresents a canonical function in a WebAssembly component.\nRepresents options for component functions.\nThe type is a Unicode character.\nA successful return payload from <code>Parser::parse</code>.\nThe code section.\nAn entry of the code section, a function, was parsed from …\nA reader for the code section of a WebAssembly module.\nIndicator of the start of the code section of a …\nThe string types in the function signature are compact …\nThe encoding format is a WebAssembly component.\nThe alias is to a component.\nThe external kind is a component.\nThe reference is to a component type.\nThe type is a component type.\nRepresents an alias in a WebAssembly component.\nA component alias section was received and the provided …\nA reader for the alias section of a WebAssembly component.\nA component canonical section was received and the …\nA reader for the canonical section of a WebAssembly …\nRepresents a defined type in a WebAssembly component.\nRepresents an export in a WebAssembly component.\nA component export section was received, and the provided …\nA reader for the export section of a WebAssembly component.\nRepresents the kind of an external items of a WebAssembly …\nRepresents a type of a function in a WebAssembly component.\nRepresents an import in a WebAssembly component\nA component import section was received and the provided …\nA reader for the import section of a WebAssembly component.\nRepresents an instance in a WebAssembly component.\nA component instance section was received and the provided …\nA reader for the component instance section of a …\nRepresents an argument to instantiating a WebAssembly …\nRepresents the kind of an outer alias in a WebAssembly …\nA component section from a WebAssembly component was …\nRepresents the start function in a WebAssembly component.\nA component start section was received, and the provided …\nA reader for the start section of a WebAssembly component.\nRepresents a type in a WebAssembly component.\nRepresents part of a component type declaration in a …\nRepresents a reference to a component type.\nA component type section was received and the provided …\nA reader for the type section of a WebAssembly component.\nRepresents a value type in a WebAssembly component.\nRepresents an initialization expression.\nThe alias is to a core module.\nRepresents a core type in a WebAssembly component.\nThe alias is to a core type.\nThe component type declaration is for a core type.\nThe component type declaration is for a core type.\nA core type section was received and the provided parser …\nA reader for the core type section of a WebAssembly …\nThe custom section.\nA module or component custom section was received.\nRepresents known custom section kinds.\nA reader for custom sections of a WebAssembly module.\nRepresents a data segment in a core WebAssembly module.\nThe name is for a data segment.\nThe name is for the data segments.\nThe data section.\nThe passive data count section.\nA module data count section was received.\nThe kind of data segment.\nA module data section was received and the provided reader …\nA reader for the data section of a WebAssembly module.\nThe element segment is declared.\nThe type is a component defined type.\nRepresents a core WebAssembly element segment.\nThe name is for an element segment.\nThe name is for the element segments.\nThe element section.\nRepresents an individual item of an element segment.\nRepresents the items of an element segment.\nAn iterator over element items in an element segment.\nA reader for element items in an element segment.\nThe kind of element segment.\nA module element section was received and the provided …\nA reader for the element section of a WebAssembly module.\nThe block produces consumes nor produces any values.\nThe supported encoding formats for the parser.\nThe end of the WebAssembly module or component was reached.\nThe end payload was validated and the types known to the …\nThe type is an enum with the given tags.\nThe type is bounded by equality.\nContains the error value\nThe tag is an exception type.\nRepresents an export in a WebAssembly module.\nThe module type definition is for an export.\nThe component type declaration is for an export.\nThe instance type declaration is for an export.\nThe export section.\nA module export section was received, and the provided …\nA reader for the export section of a WebAssembly module.\nThe item is an initialization expression.\nThe value type is an extern reference.\nExternal types as defined here.\nThe value type is f32.\nThe value type is f64.\nThe type is flags with the given names.\nThe type is a 32-bit floating point number.\nThe type is a 64-bit floating point number.\nThe instance is a from exporting local items.\nThe instance is a from exporting local items.\nA function was found to be validate.\nThe external kind is a function.\nThe reference is to a function type.\nThe type is for a core function.\nThe type is a function type.\nThe item is a function index.\nThe external kind is a function.\nThe type is a function.\nThe type is for a function.\nThe value type is a function reference.\nRepresents a type of a function in a WebAssembly module.\nThe block is described by a function type.\nThe function type used for validation.\nValidation context for a WebAssembly function.\nThe name is for a function.\nThe name is for the functions.\nThe function section.\nRepresents a WebAssembly function body.\nA module function section was received and the provided …\nA reader for the function section of a WebAssembly module.\nRepresents a core WebAssembly global.\nThe external kind is a global.\nThe type is a global.\nThe name is for a global.\nThe name is for the globals.\nThe global section.\nA module global section was received and the provided …\nA reader for the global section of a WebAssembly module.\nRepresents a global’s type.\nThe value type is i32.\nThe value type is i64.\nAn IEEE binary32 immediate floating point value, …\nAn IEEE binary64 immediate floating point value, …\nRepresents an import in a WebAssembly module.\nThe module type definition is for an import.\nThe component type declaration is for an import.\nThe import section.\nA module import section was received and the provided …\nA reader for the import section of a WebAssembly module.\nRepresents an indirect name map.\nRepresents an indirect name in the names custom section.\nRepresents a reader for indirect names from the names …\nRepresents an instance of a WebAssembly module.\nThe external kind is an instance.\nThe reference is to an instance type.\nThe instantiation argument is a core instance.\nThe type is an instance type.\nThe alias is to an export of a module instance.\nThe alias is to an export of a component instance.\nA core instance section was received and the provided …\nA reader for the core instance section of a WebAssembly …\nRepresents an instance type declaration in a WebAssembly …\nThe instance is from instantiating a WebAssembly module.\nThe instance is from instantiating a WebAssembly component.\nRepresents an argument to instantiating a WebAssembly …\nRepresents the kind of an instantiation argument for a …\nThe item returned by the reader.\nThe name is for a label.\nThe name is for the function labels.\nThe function lifts a core WebAssembly function to the …\nThe linking custom section.\nA reader for the linking custom section of a WebAssembly …\nRepresents a linking type.\nThe type is a list of the given value type.\nThe name is for a local.\nThe name is for the function locals.\nAn iterator over locals in a function body.\nA reader for a function body’s locals.\nThe function lowers a canonical ABI function to a core …\nThe memory to use if the lifting or lowering of a function …\nThe external kind is a memory.\nThe type is a memory.\nThe name is for a memory.\nThe name is for the memories.\nThe memory section.\nRepresents a memory immediate in a WebAssembly memory …\nA module memory section was received and the provided …\nA reader for the memory section of a WebAssembly module.\nRepresents a memory’s type.\nThe encoding format is a WebAssembly module.\nThe external kind is a core module.\nThe reference is to a core module type.\nThe type is for a core module.\nThe name is for a module.\nThe name is for the module.\nA core module section was received and the provided parser …\nRepresents a module type declaration in a WebAssembly …\nRepresents a name read from the names custom section.\nThe name custom section.\nRepresents a name map from the names custom section.\nA reader for the name custom section of a WebAssembly …\nRepresents the type of name.\nThe type vector contains zero or more named types.\nRepresents a name for an index from the names section.\nA reader for direct names in the names custom section.\nThis can be returned at any time and indicates that more …\nContains the success value\nThe payload validated, no further action need be taken.\nInstructions as defined here.\nAn iterator over a function’s operators.\nAn iterator over a function’s operators with offsets.\nA reader for a core WebAssembly function’s operators.\nThe type is an option of the given value type.\nThe alias is to an outer item.\nThe alias is to an outer item.\nRepresents the kind of an outer core alias in a …\nThe result type of the visitor.\nA chunk was successfully parsed.\nAn incremental parser of a binary WebAssembly module or …\nThe payload validated, but it started a nested module or …\nThe data segment is passive.\nThe element segment is passive.\nValues that can be parsed from a WebAssembly module or …\nThe post-return function to use if the lifting of a …\nThe value type is a primitive type.\nThe type is one of the primitive value types.\nRepresents a primitive value type.\nThe producers custom section.\nA field from the producers custom section.\nRepresents a field value in the producers custom section.\nAn iterator over fields in the producers custom section.\nA reader for fields in the producers custom section.\nA reader for the producers custom section of a WebAssembly …\nThe realloc function to use if the lifting or lowering of …\nThe type is a record with the given fields.\nRepresents a relocation entry.\nThe reloc custom section.\nA reader for the relocations custom section of a …\nRepresents a relocation type.\nThe result for <code>BinaryReader</code> operations.\nThe type is a result type.\nThe type is a signed 16-bit integer.\nThe type is a signed 32-bit integer.\nThe type is a signed 64-bit integer.\nThe type is a signed 8-bit integer.\nRepresents a SIMD lane index.\nSection code as defined here.\nAn iterator over items in a section.\nAn iterator over a limited section iterator.\nA trait implemented by section readers.\nImplemented by sections with a limited number of items.\nRepresents a single name in the names custom section.\nThe source mapping URL custom section.\nThe linking uses a stack pointer.\nThe start section.\nA module start section was received.\nThe type is a string.\nThe external kind if a table.\nThe type is a table.\nThe name is for a table.\nThe name is for the tables.\nThe table section.\nA module table section was received and the provided …\nA reader for the table section of a WebAssembly module.\nRepresents a table’s type.\nThe external kind is a tag.\nThe type is a tag.\nThe tag section.\nRepresents a tag kind.\nA module tag section was received, and the provided reader …\nA reader for the tags section of a WebAssembly module.\nA tag’s type.\nThe type is a tuple of the given value types.\nRepresents a type in a WebAssembly module.\nThe alias is to a core type.\nThe alias is to a component type.\nThe external kind is a type.\nThe reference is to a bounded type.\nThe module type definition is for a type.\nThe value type is a reference to a defined type.\nThe component type declaration is for a type.\nThe instance type declaration is for a type.\nThe name is for a type.\nThe name is for the types.\nThe block produces a singular value of the given type ([] …\nThe type section.\nRepresents the type bounds for imports and exports.\nRepresents a reference to a type definition in a …\nA module type section was received and the provided reader …\nA reader for the type section of a WebAssembly module.\nRepresents the vector of types in a component function’s …\nThe type is an unsigned 16-bit integer.\nThe type is an unsigned 32-bit integer.\nThe type is an unsigned 64-bit integer.\nThe type is an unsigned 8-bit integer.\nThe string types in the function signature are UTF-16 …\nThe string types in the function signature are UTF-8 …\nThe type is a union of the given value types.\nThe name is unknown.\nAn unknown name subsection.\nThe custom section is not known.\nAn unknown section was found.\nThe type vector contains a single, unnamed type.\nRepresents a 128-bit vector value.\nThe value type is v128.\nRepresents the types of values in a WebAssembly module.\nPossible return values from <code>Validator::payload</code>.\nValidator for a WebAssembly binary module or component.\nThe implementation of <code>WasmModuleResources</code> used by <code>Validator</code>…\nThe external kind is a value.\nThe reference is to a value type.\nThe type is a variant with the given cases.\nRepresents a case in a variant type.\nIndicates the header of a WebAssembly module or component.\nTrait implemented by types that can visit all <code>Operator</code> …\nFlags for features that are enabled for validation.\nTypes that qualify as Wasm function types for validation …\nIterator over the inputs of a Wasm function type.\nIterator over the outputs of a Wasm function type.\nTypes that qualify as Wasm validation database.\nThe relocation addend.\nValidates <code>Payload::AliasSection</code>.\nAlignment, stored as <code>n</code> where the actual alignment is <code>2^n</code>\nWhether or not to allow 64-bit memory arguments in …\nWhether or not to allow 64-bit memory arguments in the …\nWhether or not to allow 64-bit memory arguments in the the …\nThe start function arguments.\nGets the underlying bits of the 32-bit float.\nGets the underlying bits of the 64-bit float.\nThe WebAssembly bulk memory operations proposal (enabled …\nGets the bytes of the vector value.\nReturns the number of bytes remaining in the <code>BinaryReader</code>.\nValidates <code>Payload::CodeSectionEntry</code>.\nValidates <code>Payload::CodeSectionStart</code>.\nValidates <code>Payload::ComponentAliasSection</code>.\nValidates <code>Payload::ComponentCanonicalSection</code>.\nValidates <code>Payload::ComponentExportSection</code>.\nValidates <code>Payload::ComponentImportSection</code>.\nValidates <code>Payload::ComponentInstanceSection</code>.\nThe WebAssembly component model proposal.\nValidates <code>Payload::ComponentSection</code>.\nValidates <code>Payload::ComponentStartSection</code>.\nValidates <code>Payload::ComponentTypeSection</code>.\nThe global’s type.\nValidates <code>Payload::CoreTypeSection</code>.\nReturns the <code>BinaryReader</code>’s current position.\nThe actual contents of the custom section.\nThe data of the data segment.\nReturns the number of bytes in the Wasm data section.\nValidates <code>Payload::DataCountSection</code>.\nThe offset, relative to the start of the original module …\nValidates <code>Payload::DataSection</code>.\nReturns the default target of this <code>br_table</code> instruction.\nDefines locals into this validator.\nWhether or not only deterministic instructions are allowed\nReturns the number of elements.\nValidates <code>Payload::ElementSection</code>.\nThe table’s element type.\nReturns the element type at the given index.\nValidates <code>Payload::End</code>.\nEnsures the reader is at the end of the section.\nEnsures the reader is at the end.\nDetermines if the reader is at end-of-section.\nDetermines if the reader is at the end of the section.\nReturns whether the <code>BinaryReader</code> has reached the end of …\nDetermines if the reader is at the end of the operators.\nThe WebAssembly exception handling proposal\nValidates <code>Payload::ExportSection</code>.\nThe WebAssembly extended_const proposal\nReturns the wasm features used for this validator.\nFunction that must be called after the last opcode has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index to the start function.\nReturns the <code>FuncType</code> associated with the given type index.\nThe function type this tag uses.\nValidates <code>Payload::FunctionSection</code>.\nGets a binary reader for this function body.\nGets a binary reader for the initialization expression.\nGets a binary reader from this operators reader.\nGets the count of the items in the section.\nGets the count of locals in the function body.\nGets the count of items in the section.\nGets the count of element items in the segment.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the reader.\nGets the count of items in the reader.\nGets a count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets a count of items in the section.\nGets a count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets the count of items in the section.\nGets a count of items in the section.\nGets the count of indirect names.\nGets an indirect naming reader for the map.\nGets an items reader for the items in an element segment.\nGets the locals reader for this function body.\nGets a naming reader for the map.\nGets the naming reader for the indirect name.\nGets the name as a string.\nGets the operators reader for this function body.\nGets an operators reader for the initialization expression.\nGets a reader of values for the field.\nGets the section code from the section.\nReturns the global variable at given index.\nValidates <code>Payload::GlobalSection</code>.\nGets a signed 128-bit integer value from the vector’s …\nValidates <code>Payload::ImportSection</code>.\nThe index of the function within the module’s function …\nThe index of the exported item.\nThe index of the argument item.\nThe index of the argument item.\nThe index of the exported item.\nThe index being named.\nThe relocation index.\nGets the index type for the memory.\nThe indirect index of the name.\nThe global’s initialization expression.\nInitial size of this table, in elements.\nInitial size of this memory, in wasm pages.\nReturns the type at given index if any.\nReturns the list of inputs as an iterator.\nValidates <code>Payload::InstanceSection</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements iterator over the code section.\nImplements iterator over the instance section.\nImplements iterator over the instance section.\nImplements iterator over the type section.\nImplements iterator over the type section.\nReads content of the code section.\nImplements iterator over the type section.\nConverts to an iterator of operators paired with offsets.\nDetermines if the type vector is empty.\nReturns whether <code>BrTable</code> doesn’t have any labels apart …\nReturns whether the function index is referenced in the …\nReturns whether this value type is a “reference type”.\nDetermines if primitive value type <code>a</code> is a subtype of <code>b</code>.\nThe initial elements of the element segment.\nIterates over the types in the type vector.\nThe kind of the export.\nThe kind of the module argument.\nThe kind of the component argument.\nThe kind of data segment.\nThe kind of the element segment.\nThe kind of the export.\nThe kind of tag\nGets the type vector’s length.\nReturns the number of <code>br_table</code> entries, not including the …\nReturns the number of input types.\nReturns the number of output types.\nOptional maximum size of the table, in elements.\nOptional maximum size of this memory, in wasm pages.\nThe index of the memory this immediate points to.\nWhether or not this is a 64-bit memory, using i64 as an …\nThe WebAssembly memory64 proposal\nReturns the linear memory at given index.\nValidates <code>Payload::MemorySection</code>.\nGet this error’s message.\nThe module being imported from.\nValidates <code>Payload::ModuleSection</code>.\nThe WebAssembly multi memory proposal\nThe WebAssembly multi-value proposal (enabled by default)\nWhether or not the global is mutable.\nThe WebAssembly <code>mutable-global</code> proposal (enabled by …\nThe name of the custom section.\nThe name of the exported item.\nThe name of the imported item.\nThe name of the module argument.\nThe name of the component argument.\nThe name of the variant case.\nThe name of the exported item.\nThe name of the imported item.\nThe name for the index.\nThe field name.\nThe name of the field.\nConstructs a new <code>CodeSectionReader</code> for the given data and …\nConstructs a new <code>ElementItemsReader</code> for the given data and …\nConstructs a new <code>LinkingSectionReader</code> for the given data …\nConstructs a new <code>NameSectionReader</code> from the given data and …\nCreates reader for the producers section.\nConstructs a new <code>RelocSectionReader</code> for the given data and …\nConstructs a new <code>SectionIterator</code> for the given section …\nConstructs a new <code>SectionIteratorLimited</code> for the given …\nCreates a new <code>FuncValidator</code>.\nConstructs <code>BinaryReader</code> type.\nCreates a new parser.\nConstructs a new <code>AliasSectionReader</code> for the given data and …\nConstructs a new <code>ComponentAliasSectionReader</code> for the given …\nConstructs a new <code>ComponentFunctionSectionReader</code> for the …\nConstructs a new <code>ComponentExportSectionReader</code> for the …\nConstructs a new <code>ComponentImportSectionReader</code> for the …\nConstructs a new <code>InstanceSectionReader</code> for the given data …\nConstructs a new <code>ComponentInstanceSectionReader</code> for the …\nConstructs a new <code>ComponentStartSectionReader</code> for the given …\nConstructs a new <code>CoreTypeSectionReader</code> for the given data …\nConstructs a new <code>ComponentTypeSectionReader</code> for the given …\nConstructs a new <code>FunctionBody</code> for the given data and …\nConstructs a new <code>CustomSectionReader</code> for the given data …\nConstructs a new <code>DataSectionReader</code> for the given data and …\nConstructs a new <code>ElementSectionReader</code> for the given data …\nConstructs a new <code>ExportSectionReader</code> for the given data …\nConstructs a new <code>FunctionSectionReader</code> for the given data …\nConstructs a new <code>GlobalSectionReader</code> for the given data …\nConstructs a new <code>ImportSectionReader</code> for the given data …\nConstructs a new <code>ConstExpr</code> from the given data and offset.\nConstructs a new <code>MemorySectionReader</code> for the given data …\nConstructs a new <code>TableSectionReader</code> for the given data and …\nConstructs a new <code>TagSectionReader</code> for the given data and …\nConstructs a new <code>TypeSectionReader</code> for the given data and …\nCreates a new <code>Validator</code> ready to validate a WebAssembly …\nCreates a new <code>Validator</code> which has the specified set of wasm\nConstructs a <code>BinaryReader</code> with an explicit starting offset.\nReads content of the code section with offsets.\nGet the offset within the Wasm binary where the error …\nA fixed byte-offset that this memory immediate specifies.\nThe relocation offset.\nValidates the next operator in a function.\nGet the current height of the operand stack.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the section reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the binary reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the reader.\nGets the original position of the reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the name.\nGets the original position of the map.\nGets the original position of the indirect name.\nGets an original position of the map.\nGets the original position of the reader.\nGets the original position of the section reader.\nGets the original position of the section reader.\nGets the original position of the reader.\nReturns the type at given index if any.\nReturns the list of outputs as an iterator.\nThe function parameters.\nThe function parameter types.\nAttempts to parse a chunk of data.\nConvenience function that can be used to parse a module or …\nConvenience function to validate a single <code>Payload</code>.\nGets the range of the reader.\nReturns a range from the starting offset to the end of the …\nGets the range of the function body.\nThe range of bytes that specify this whole custom section …\nThe range of the data segment.\nThe range of the the element segment.\nReads an item from the section.\nReads an item from the reader.\nReads content of the code section.\nReads an element item from the segment.\nReads an item from the section.\nReads a name from the names custom section.\nReads an indirect name from the reader.\nReads a name from the section.\nReads a field from the reader.\nReads an item from the reader.\nReads an item from the reader.\nReads content of the core alias section.\nReads content of the alias section.\nReads function type index from the function section.\nReads content of the export section.\nReads content of the import section.\nReads content of the instance section.\nReads content of the instance section.\nReads the start function from the section.\nReads content of the type section.\nReads content of the type section.\nReads content of the data section.\nReads content of the element section.\nReads content of the export section.\nReads function type index from the function section.\nReads content of the global section.\nReads content of the import section.\nReads content of the memory section.\nReads an operator from the reader.\nReads content of the table section.\nReads content of the tag section.\nReads content of the type section.\nAdvances the <code>BinaryReader</code> <code>size</code> bytes, and returns a slice …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads the local defintions from the given <code>BinaryReader</code>, …\nReads the next available <code>Operator</code>.\nReads a WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> four bytes and returns a <code>u32</code>.\nAdvances the <code>BinaryReader</code> eight bytes and returns a <code>u64</code>.\nAdvances the <code>BinaryReader</code> a single byte.\nReads a core WebAssembly value type from the binary reader.\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to eight bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads an operator with its offset.\nThe WebAssembly reference types proposal (enabled by …\nThe index of the variant case that is refined by this one.\nThe WebAssembly Relaxed SIMD proposal\nReturns the underlying module resources that this …\nThe function results.\nThe function result types.\nThe WebAssembly <code>nontrapping-float-to-int-conversions</code> …\nWhether or not this is a “shared” memory, indicating …\nThe WebAssembly <code>sign-extension-ops</code> proposal (enabled by …\nThe WebAssembly SIMD proposal\nAdvances the <code>BinaryReader</code> <code>len</code> bytes, skipping the result.\nSkip parsing the code section entirely.\nAdvances the <code>BinaryReader</code> past a WebAssembly string. This …\nValidates <code>Payload::StartSection</code>.\nReturns the table at given index if any.\nValidates <code>Payload::TableSection</code>.\nReturns the tag at given index.\nValidates <code>Payload::TagSection</code>.\nThe WebAssembly tail-call proposal\nReturns the list of targets that this <code>br_table</code> instruction …\nThe WebAssembly threads proposal\nThe type reference for the import.\nThe value type of the variant case.\nThe type of the elements.\nThe global’s type.\nThe type of the imported item.\nThe relocation type.\nReturns the <code>FuncType</code> associated with the given function …\nValidates <code>Payload::TypeSection</code>.\nTypes relating to type information provided by validation.\nGets the types known by the validator so far within the …\nValidates <code>Payload::UnknownSection</code>.\nWhether or not initialization expressions are used.\nTest whether the given buffer contains a valid WebAssembly …\nConvenience function to validate an entire function’s …\nValidates an entire in-memory module or component with …\nValidates <code>Payload::Version</code>.\nThe field version.\nVisits the <code>Operator</code> <code>op</code> using the given <code>offset</code>.\nReads the next available <code>Operator</code> and calls the respective …\nVisits an operator with its offset.\nThe outward count, starting at zero for the current …\nThe index of the item within the outer component.\nThe instance index.\nThe alias kind.\nThe alias kind.\nThe export name.\nThe index of the core WebAssembly function to lift.\nThe index of the function to lower.\nThe canonical options for the function.\nThe canonical options for the function.\nThe index of the lifted function’s type.\nThis many bytes of the <code>data</code> input to <code>Parser::parse</code> were …\nThe value that we actually parsed.\nThe outward count, starting at zero for the current …\nThe index of the item within the outer component.\nThe instance index.\nThe alias kind.\nThe alias kind.\nThe export name.\nThe type returned for failure.\nThe type returned for success.\nThe component’s instantiation arguments.\nThe component index.\nThe name of the export.\nThe type reference for the export.\nThe memory index for the data segment.\nThe initialization expression for the data segment.\nThe initial expression of the element segment.\nThe index of the table being initialized.\nThe module’s instantiation arguments.\nThe module index.\nThe name of the export.\nThe type reference for the export.\nThe name of the exported item.\nThe type reference of the export.\nThe contents of this subsection.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe contents of this section.\nThe number of data segments.\nThe number of functions in this section.\nThe encoding format being parsed.\nThe start function index\nThe 8-bit identifier for this section.\nThe version number found in the header.\nThe parser for the nested module.\nThe parser for the nested component.\nThe range of bytes that were parsed to consume the header …\nThe range of bytes that specify the <code>func</code> field, specified …\nThe range of bytes that specify the <code>count</code> field, specified …\nThe range of bytes that represent this section, specified …\nThe range of bytes that represent the nested module in the …\nThe range of bytes that represent the nested component in …\nThe range of bytes, relative to the start of the original …\nThe size, in bytes, of the remaining contents of this …\nThe kind of the custom section.\nThe name of the custom section.\nThe definition is for a component type.\nThe entity is a component.\nRepresents a component defined type.\nThe entity type for imports and exports of a component.\nThe definition is for a component function type.\nRepresents a type of a component function.\nThe definition is for a component instance type.\nRepresents a type of a component instance.\nRepresents the kind of a component instance.\nRepresents a type of a component.\nA component value type.\nThe definition is for a component defined type.\nThe instance type is from a definition.\nThe entity type for imports and exports of a module.\nThe type is an enumeration.\nThe instance type is the result of instantiating from …\nThe instance type is the result of instantiating from …\nThe type is a set of flags.\nThe definition is for a core function type.\nThe entity is a function.\nThe entity is a function.\nThe entity is a global.\nThe definition is for a core module instance type.\nThe entity is a component instance.\nRepresents a module instance type.\nRepresents the kind of module instance type.\nThe instance type is the result of instantiating a module …\nThe instance type is the result of instantiating a …\nThe type is a list.\nThe entity is a memory.\nThe definition is for a core module type.\nThe entity is a core module.\nRepresents a core module type.\nThe type is an <code>option</code>.\nThe value type is one of the primitive types.\nThe type is a primitive value type.\nThe type is a record.\nRepresents a record type.\nThe type is a <code>result</code>.\nThe entity is a table.\nThe entity is a tag.\nThe type is a tuple.\nRepresents a tuple type.\nA unified type definition for validating WebAssembly …\nThe type is represented with the given type identifier.\nThe entity is a type.\nRepresents a unique identifier for a type known to a …\nRepresents the types known to a <code>crate::Validator</code> once …\nRepresents the types known to a <code>crate::Validator</code> during …\nThe type is a union.\nRepresents a union type.\nThe entity is a value.\nThe type is a variant.\nRepresents a variant case.\nRepresents a variant type.\nConverts the type to a component function type.\nConverts the type to a component instance type.\nConverts the type to a component type.\nConverts the type to a component defined type.\nConverts the type to a core function type.\nConverts the type to a core module instance type.\nConverts the type to a core module type.\nGets a reference to this validation type information.\nThe map of variant cases.\nGets the type of a component at the given component index.\nGets the type of a component at the given component index.\nGets the count of imported, exported, or aliased …\nGets the component entity type from the given component …\nGets the component entity type from the given component …\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nGets the type of a component function at the given …\nGets the type of a component function at the given …\nGets the count of imported, exported, or aliased component …\nGets the type of an component instance at the given …\nGets the type of an component instance at the given …\nGets the count of imported, exported, or aliased component …\nGets the type of an element segment at the given element …\nGets the type of an element segment at the given element …\nGets the count of element segments.\nGets the entity type from the given export.\nGets the entity type from the given export.\nGets the entity type from the given import.\nGets the entity type for the given import.\nGets the exports of the instance type.\nGets the exports of the instance type.\nThe exports of the module type.\nThe exports of the component type.\nThe map of record fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a defined core function type at the given type index.\nGets a defined core function type at the given type index.\nGets the type of a core function at the given function …\nGets the type of a core function at the given function …\nGets the count of imported and defined core functions.\nGets the type of a global at the given global index.\nGets the type of a global at the given global index.\nGets the count of imported and defined globals.\nGets a type id from a type index.\nGets a type id from a type index.\nThe imports of the module type.\nThe imports of the component type.\nGets the type of a module instance at the given module …\nGets the type of a module instance at the given module …\nGets the count of imported, exported, or aliased core …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if component value type <code>a</code> is a subtype of <code>b</code>.\nDetermines if entity type <code>a</code> is a subtype of <code>b</code>.\nDetermines if module type <code>a</code> is a subtype of <code>b</code>.\nDetermines if component entity type <code>a</code> is a subtype of <code>b</code>.\nDetermines if component type <code>a</code> is a subtype of <code>b</code>.\nDetermines if component instance type <code>a</code> is a subtype of <code>b</code>.\nDetermines if component function type <code>a</code> is a subtype of <code>b</code>.\nDetermines if component defined type <code>a</code> is a subtype of <code>b</code>.\nThe kind of module instance type.\nThe kind of instance type.\nLooks up an import by its module and name.\nGets the type of a memory at the given memory index.\nGets the type of a memory at the given memory index.\nGets the count of imported and defined memories.\nGets the type of a module at the given module index.\nGets the type of a module at the given module index.\nGets the count of imported, exported, or aliased modules.\nThe function parameters.\nThe name of the variant case refined by this one.\nThe function’s results.\nGets the type of a table at the given table index.\nGets the type of a table at the given table index.\nGets the count of imported and defined tables.\nGets the type of a tag at the given tag index.\nGets the type of a tag at the given tag index.\nGets the count of imported and defined tags.\nThe variant case type.\nGets a type at the given type index.\nGets a type at the given type index.\nGets the count of core types.\nGets a type based on its type id.\nGets a type based on its type id.\nThe types of the tuple.\nThe types of the union.\nGets the type of a value at the given value index.\nGets the type of a value at the given value index.\nGets the count of imported, exported, or aliased values.\nThe <code>error</code> type.\nThe <code>ok</code> type.")
searchState.loadedDescShard("scylla", 0, "Async Rust driver for the Scylla database written in Rust. …\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nProvides auto caching while executing queries\nThis trait defines a way to convert CQL Row into some rust …\n#[derive(FromRow)] derives FromRow for struct\n#[derive(FromUserType)] allows to parse struct as a User …\n#[derive(IntoUserType)] allows to pass struct a User …\nDerive macro for the <code>SerializeCql</code> trait which serializes …\nDerive macro for the <code>SerializeRow</code> trait which serializes …\n#[derive(ValueList)] allows to pass struct as a list of …\nAdds a prepared statement to the cache\nAdvance the internal cursor of the BufMut\nDoes the same thing as <code>Session::batch</code> but uses the …\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nCreates an adapter which will chain this buffer with …\nReturns a mutable slice starting at the current BufMut …\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nCreates <code>Bytes</code> instance from slice, by copying it.\nDoes the same thing as <code>Session::execute</code> but uses the …\nDoes the same thing as <code>Session::execute_iter</code> but uses the …\nDoes the same thing as <code>Session::execute_paged</code> but uses the …\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nConvert self into <code>BytesMut</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Bytes</code> from a static slice.\nReturns counter for errors occurred in paged queries\nReturns counter for errors occurred in nonpaged queries\nReturns average latency in milliseconds\nReturns latency from histogram for a given percentile\nReturns counter for pages requested in paged queries\nReturns counter for nonpaged queries\nReturns counter measuring how many times a retry policy …\nReturns true if there is space in <code>self</code> for more bytes.\nCollecting history of query executions - retries, …\nThis macro implements FromCqlVal given a type and method …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nPrepares all statements within the batch and returns a new …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nReturns the number of bytes that can be written from the …\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nTypes and traits related to serialization of values to the …\nSets the length of the buffer.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nAttempts to cheaply reclaim already allocated capacity for …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nCreates a new <code>BytesMut</code> with the specified capacity.\nBuilds a <code>CachingSession</code> from a <code>Session</code>, a cache size, and …\nCreates an adaptor which implements the <code>Write</code> trait for …\nCreates a new <code>BytesMut</code> containing <code>len</code> zeros.\nType to represent an authentication error message.\nTrait used to represent a factory of <code>AuthenticatorSession</code> …\nTrait used to represent a user-defined custom …\nDefault authenticator provider that requires username and …\nTo handle an authentication challenge initiated by the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new <code>PlainTextAuthenticator</code> instance with provided …\nA pair of initial response and boxed <code>AuthenticatorSession</code> …\nTo handle the success phase of exchange. The token …\nThis trait defines a way to convert CqlValue or …\nThis trait defines a way to convert CQL Row into some rust …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe wire protocol compression algorithm.\nLZ4 compression algorithm.\nSnappy compression algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCQL binary protocol in-wire types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNot intended for driver’s direct usage (as driver has no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves consistency from request frame, if present.\nRetrieves serial consistency from request frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of a batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis trait defines a way to convert CqlValue or …\nThis trait defines a way to convert CQL Row into some rust …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDays since -5877641-06-23 i.e. 2^31 days before unix epoch …\nNanoseconds since midnight\nMilliseconds since unix epoch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nindex in the serialized values\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows converting Row into tuple of rust types or custom …\npk_indexes are sorted by <code>index</code> and can be reordered in …\nsequence number in partition key\nOriginal size of the serialized rows.\nOrder of <code>fields</code> vector must match the order of fields as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an counter value\nNative CQL date representation that allows for a bigger …\nNative CQL <code>decimal</code> representation.\nRepresents a CQL Duration value\nNative CQL time representation.\nNative CQL timestamp representation that allows full …\nRepresents timeuuid (uuid V1) value\nNative CQL <code>varint</code> representation.\nA const empty instance, useful for taking references\nContains the error value\nRepresents List of ValueList for Batch statement\nAllows reusing already-serialized first value\nImplements <code>BatchValues</code> from an <code>Iterator</code> over references to …\nFor some unknown reason, this type, when not resolved to a …\nAn iterator-like for <code>ValueList</code>\nImplements <code>BatchValuesIterator</code> from an <code>Iterator</code> over …\nKeeps a buffer with serialized Values Allows adding new …\nEnum providing a way to represent a value that might be …\nContains the success value\nRepresents an unset value\nEvery value being sent in a query must implement this trait\nRepresents list of values to be sent in a query gets …\nSerializes value and appends it to the list\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>CqlDecimal</code> from an array of bytes representing …\nCreates a <code>CqlDecimal</code> from a slice of bytes representing …\nCreates a <code>CqlVarint</code> from an array of bytes in two’s …\nCreates a <code>CqlVarint</code> from a slice of bytes in two’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>CqlDecimal</code> to an array of bytes in two’s …\nConverts <code>CqlVarint</code> to an array of bytes in two’s …\nCreates empty value list\nCreates value list from the request frame\nProvides a view of ValueList as LegacySerializedValues …\nId of a single attempt within a query, a single request …\nHistoryCollector can be used as HistoryListener to collect …\nAny type implementing this trait can be passed to Session …\nId of a single query, i.e. a single call to …\nId of a speculative execution fiber. When speculative …\nStructured representation of queries history. …\nClones the data collected by the collector.\nClone the collected events and convert them to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog that an attempt ended with an error. The error and …\nLog that an attempt has started - request has been sent on …\nLog that an attempt succeeded.\nLog that a new speculative fiber has started.\nLog that query ended with an error - called right before …\nLog that a query has started on query start - right after …\nLog that query was successful - called right before …\nCreates a new HistoryCollector with empty data.\nTakes the data out of the collector. The collected events …\nTake the collected events out, just like in <code>take_collected</code> …\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\n#[derive(FromRow)] derives FromRow for struct\n#[derive(FromUserType)] allows to parse struct as a User …\n#[derive(IntoUserType)] allows to pass struct a User …\nDerive macro for the <code>SerializeCql</code> trait which serializes …\nDerive macro for the <code>SerializeRow</code> trait which serializes …\n#[derive(ValueList)] allows to pass struct as a list of …\nAdvance the internal cursor of the BufMut\nCreates an adapter which will chain this buffer with …\nReturns a mutable slice starting at the current BufMut …\nReturns true if there is space in <code>self</code> for more bytes.\nThis macro implements FromCqlVal given a type and method …\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nReturns the number of bytes that can be written from the …\nCreates an adaptor which implements the <code>Write</code> trait for …\nRandomly choose a source port <code>p</code> such that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns iterator over source ports <code>p</code> such that …\nIf we connect to Scylla using Scylla’s shard aware port, …\nAllows appending bytes to a non-null, non-unset cell.\nRepresents a handle to a CQL value that needs to be …\nAn interface that facilitates writing values for a CQL …\nAn error indicating that a failure happened during …\nAppends raw bytes to this cell.\nAppends the values from an existing <code>SerializedValues</code> …\nContains the <code>BatchValues</code> and <code>BatchValuesIterator</code> trait and …\nFinishes serializing the value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns this writter into a <code>CellValueBuilder</code> which can be …\nAppends a new value to the sequence and returns an object …\nAppends a sub-value to the end of the current contents of …\nCreates a new row writer based on an existing Vec.\nCreates a new cell writer based on an existing Vec.\nConstructs a new <code>SerializationError</code>.\nContains the <code>RawBatchValues</code> and <code>RawBatchValuesIterator</code> …\nContains the <code>SerializeRow</code> trait and its implementations.\nSets this value to be null, consuming this object.\nSets this value to represent an unset value, consuming …\nSets this value to a non-zero, non-unset value with given …\nContains the <code>SerializeCql</code> trait and its implementations.\nReturns the number of values that were written so far.\nContains types and traits used for safe serialization of …\nRepresents a list of sets of values for a batch statement.\nImplements <code>BatchValues</code> from an <code>Iterator</code> over references to …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nImplements <code>BatchValuesIterator</code> from an <code>Iterator</code> over …\nA newtype wrapper which adjusts an existing types that …\nA newtype wrapper which adjusts an existing types that …\nA <code>BatchValuesIterator</code> over a tuple.\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new `BatchValuesFromIter`` object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nRepresents a list of sets of values for a batch statement.\nTakes <code>BatchValues</code> and an iterator over contexts, and turns …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nTakes <code>BatchValuesIterator</code> and an iterator over contexts, …\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new <code>RawBatchValuesAdapter</code> object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nFailed to serialize values for a statement, represented by …\nDescribes why serializing values for a statement failed.\nFailed to type check values for a statement, represented …\nDescribes why type checking values for a statement failed.\nA different column name was expected at given position.\nOne of the columns failed to serialize.\nA const empty instance, useful for taking references\nThe values generated by the <code>ValueList</code> trait were provided …\nThe Rust type provides a value for some column, but that …\nContains information needed to serialize a row.\nRepresents a set of values that can be sent along a CQL …\nA buffer containing already serialized values.\nAn iterator over raw values in some <code>SerializedValues</code>.\nImplements <code>SerializeRow</code> if the type wrapped over …\nDescribes a failure to translate the output of the …\nThe values generated by the <code>ValueList</code> trait were provided …\nA value required by the statement is not provided by the …\nThe Rust type expects <code>actual</code> column, but the statement …\nSerializes value and appends it to the list\nReturns the total serialized size of the values written so …\nLooks up and returns a column/bind marker by name.\nReturns column/bind marker specifications for given query.\nReturns the number of values written so far.\nConstructs an empty <code>RowSerializationContext</code>, as if for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>SerializedValues</code> via given closure.\nCreates the serialization context from prepared statement …\nConstructs <code>SerializedValues</code> from given <code>SerializeRow</code> object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this row contains any values or not.\nReturns <code>true</code> if the row contains no elements.\nReturns an iterator over the values serialized into the …\nDetailed information about the failure.\nDetailed information about the failure.\nConstructs a new, empty <code>SerializedValues</code>.\nName of the Rust type used to represent the values.\nName of the Rust type used to represent the values.\nSerializes the row according to the information in the …\nSerializes an object implementing <code>ValueList</code> by using the …\nThe error that caused the column serialization to fail.\nName of the column that failed to serialize.\nThe number of values that the Rust type provides.\nThe number of columns that the statement requires.\nName of the column for which the DB requested a value.\nName of the column that is missing in the statement.\nName of the column for which the Rust type doesn’t …\nName of the column, as expected by the Rust type.\nName of the bind marker for which there is no value.\nName of the value that does not match to any of the bind …\nSerialization of one of the built-in types failed.\nDescribes why serialization of some of the built-in types …\nType checking of one of the built-in types failed.\nDescribes why type checking some of the built-in types has …\nCustom CQL type - unsupported\nMismatch between the value size written at the beginning …\nOne of the elements of the set/list failed to serialize.\nOne of the tuple elements failed to serialize.\nA different field name was expected at given position.\nOne of the fields failed to serialize.\nThe value size written at the beginning is invalid (it is …\nOne of the keys in the map failed to serialize.\nA type check failure specific to a CQL map.\nA serialization failure specific to a CQL map.\nDescribes why serialization of a map type failed.\nDescribes why type checking of a map type failed.\nExpected one from a list of particular types.\nThe name of the UDT being serialized to does not match.\nThe Rust data contains a field that is not present in the …\nExpected a type that can be empty.\nThe CQL type is not a map.\nThe CQL type is neither a set not a list.\nThe CQL type is not a tuple.\nThe CQL type is not a user defined type.\nA type that can be serialized and sent along with a CQL …\nA type check failure specific to a CQL set or list.\nA serialization failure specific to a CQL set or list.\nDescribes why serialization of a set or list type failed.\nDescribes why type checking of a set or list type failed.\nThe size of the Rust value is too large to fit in the CQL …\nThe value is too bit to be serialized as it exceeds the …\nThe many contains too many items, exceeding the protocol …\nThe set/list contains too many items, exceeding the …\nOutput produced by the Value trait is less than 4 bytes in …\nA type check failure specific to a CQL tuple.\nA serialization failure specific to a CQL tuple.\nDescribes why serialize of a tuple failed.\nDescribes why type checking of a tuple failed.\nA type check failure specific to a CQL UDT.\nA serialization failure specific to a CQL UDT.\nDescribes why serialization of a user defined type failed.\nDescribes why type checking of a user defined type failed.\nImplements <code>SerializeCql</code> if the type wrapped over …\nThe Rust data does not have a field that is required in …\nThe Rust value is out of range supported by the CQL type.\nOne of the values in the map failed to serialize.\nDescribes a failure to translate the output of the <code>Value</code> …\nThe tuple has the wrong element count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe CQL type that the Rust type was being serialized to.\nThe CQL type that the Rust type was being serialized to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nName of the Rust type being serialized.\nName of the Rust type being serialized.\nSerializes the value to given CQL type.\nSerializes a value implementing <code>Value</code> by using the …\nThe list of types that the Rust type can serialize as.\nThe error that caused the tuple field serialization to …\nIndex of the tuple element that failed to serialize.\nThe number of elements that the Rust tuple has.\nThe number of elements that the CQL tuple type has.\nThe error that caused the UDT field serialization to fail.\nName of the field which failed to serialize.\nThe name of the CQL UDT field.\nName of field that the CQL UDT requires but is missing in …\nName of the Rust struct field that is missing in the UDT.\nKeyspace in which the UDT was defined.\nThe name of the Rust field.\nName of the UDT.\nThe actual size of the output.\nThe declared size of the output.\nSize of the produced data.\nDeclared size of the output.\nThere was an attempt to produce a CQL value over the …\nAllows appending bytes to a non-null, non-unset cell.\nRepresents a handle to a CQL value that needs to be …\nAn interface that facilitates writing values for a CQL …\nAn object that indicates a type-level proof that something …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCQL batch statement.\nThis enum represents a CQL statement, that can be part of …\nThe type of a batch.\nAppends a new statement to the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the consistency to be used when executing this batch …\nBorrows the execution profile handle associated with this …\nGets the idempotence of this batch\nGet the retry policy set for the batch.\nGets the serial consistency to be used when executing this …\nGets the default timestamp for this batch in microseconds.\nGets whether tracing is enabled for this batch\nGets type of batch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new, empty <code>Batch</code> of <code>batch_type</code> type.\nCreates a new, empty <code>Batch</code> of <code>batch_type</code> type with the …\nRemoves the listener set by <code>set_history_listener</code>.\nSets the consistency to be used when executing this batch.\nAssociates the batch with execution profile referred by …\nSets the listener capable of listening what happens during …\nSets the idempotence of this batch A query is idempotent …\nSet the retry policy for this batch, overriding the one …\nSets the serial consistency to be used when executing this …\nSets the default timestamp for this batch in microseconds. …\nEnable or disable CQL Tracing for this batch If enabled …\nRepresents a statement prepared on the server.\nCalculates the token for given prepared statement and …\nComputes the partition key of the target table from given …\nDisables paging for this CQL query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the consistency to be used when executing this …\nBorrows the execution profile handle associated with this …\nGets the idempotence of this statement\nReturns the name of the keyspace this statement is …\nReturns the page size for this CQL query.\nGets tracing ids of queries used to prepare this statement\nAccess metadata about this prepared statement as returned …\nGets client timeout associated with this query\nGet the retry policy set for the statement.\nGets the serial consistency to be used when executing this …\nReturns the name of the table this statement is operating …\nGets the default timestamp for this statement in …\nGets whether tracing is enabled for this statement\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is known that the prepared statement …\nReturns true if the prepared statement has necessary …\nRemoves the listener set by <code>set_history_listener</code>.\nSets the consistency to be used when executing this …\nAssociates the query with execution profile referred by …\nSets the listener capable of listening what happens during …\nSets the idempotence of this statement A query is …\nSets the page size for this CQL query.\nSets the client-side timeout for this statement. If not …\nSet the retry policy for this statement, overriding the …\nSets the serial consistency to be used when executing this …\nSets the default timestamp for this statement in …\nEnable or disable CQL Tracing for this statement If …\nCQL query statement.\nDisables paging for this CQL query.\nReturns the argument unchanged.\nGets the consistency to be used when executing this query …\nBorrows the execution profile handle associated with this …\nGets the idempotence of this statement\nReturns the page size for this CQL query.\nGets client timeout associated with this query\nGet the retry policy set for the statement.\nGets the serial consistency to be used when executing this …\nGets the default timestamp for this statement in …\nGets whether tracing is enabled for this statement\nCalls <code>U::from(self)</code>.\nCreates a new <code>Query</code> from a CQL query string.\nRemoves the listener set by <code>set_history_listener</code>.\nSets the consistency to be used when executing this …\nAssociates the query with execution profile referred by …\nSets the listener capable of listening what happens during …\nSets the idempotence of this statement A query is …\nSets the page size for this CQL query.\nSets the client-side timeout for this statement. If not …\nSet the retry policy for this statement, overriding the …\nSets the serial consistency to be used when executing this …\nSets the default timestamp for this statement in …\nEnable or disable CQL Tracing for this statement If …\nReturns self with page size set to the given value\nA single event happening during a traced query\nTracing info retrieved from <code>system_traces.sessions</code> with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of unique nodes involved in the query\nstarted_at is a timestamp - time since unix epoch\nThe wire protocol compression algorithm.\nDescribes a database server known on <code>Session</code> startup.\nLZ4 compression algorithm.\nNode represents a cluster node along with it’s data and …\nThis enum is introduced to support address translation …\nA way that Nodes are often passed and accessed in the …\nSnappy compression algorithm.\nFetched in Metadata with <code>query_peers()</code> (broadcast by a …\nBuilt from control connection’s address upon …\nCompute token of a table partition key\nThis module contains various errors which can be returned …\n<code>ExecutionProfile</code> is a grouping of configurable options …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess datacenter details collected by the driver Returned …\nAccess to replicas owning a given partition key (similar …\nAccess keyspaces details collected by the driver Driver …\nAccess details about nodes known to the driver\nAccess to replicas owning a given token\nHost filters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boolean which indicates whether this node was is …\nIterators over rows returned by paged queries\nLoad balancing configurations <code>Session</code> can use any load …\nAccess replica location info\nQuery retries configurations To decide when to retry a …\n<code>Session</code> is the main object used in the driver. It manages …\nSessionBuilder provides an easy way to create new Sessions\nDowngrading consistency retry policy - retries with lower …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempted to create a keyspace or a table that was already …\nAuthentication failed - bad credentials\nInvalid keyspace name given to <code>Session::use_keyspace()</code>\nPassed invalid keyspace name to use\nError caused by caller creating an invalid query\nCaller passed an invalid query\nCaller passed an invalid query\nLogged batch write. If this type is received, it means the …\nTimeout occurred during the write to the batch log when a …\nTimeout occurred during Compare And Set write/update\nTimeout occurred  when a cdc_total_space_in_mb is exceeded …\nThe query is invalid because of some configuration issue\nCounter write (batched or not)\nAn error sent from the database in response to a query as …\nDatabase sent a response containing some error with a …\nDatabase sent a response containing some error with a …\nKeyspace name is empty\nList of known nodes passed to Session constructor is empty …\nFailed to resolve hostname passed in Session creation\nUser defined function failed during execution\nIllegal character - only alphanumeric and underscores …\nThe query is syntactically correct but invalid\nInvalid message received\nInvalid message received\nInput/Output error has occurred, connection broken etc.\nInput/Output error has occurred, connection broken etc.\nThe coordinator node is still bootstrapping\nError that occurred during session creation\nType of the operation rejected by rate limiting\nOther error code not specified in the specification\nOther type not specified in the specification\nOther reasons of bad query\nThe request cannot be processed because the coordinator …\nUnexpected message received\nInvalid protocol message received from the driver\nUnexpected message received\nError that occurred during query execution\nRate limit was exceeded for a partition affected by the …\nA non-timeout error during a read request\nNot enough nodes responded to the read request in time to …\nClient timeout occurred before any response arrived\nClient timeout occurred before a response arrived for some …\nFailed to serialize values passed to a query - values too …\nInternal server error. This indicates a server-side bug\nNon-batched non-counter write\nThe submitted query has a syntax error\nTimeout error has occurred, function didn’t complete in …\nTimeout error has occurred, couldn’t connect to node in …\nKeyspace name too long, must be up to 48 characters\nToo many queries in the batch statement\nError caused by failed address translation done before …\nAddress translation failed\nAddress translation failed\nError during truncate operation\nThe logged user doesn’t have the right to perform the …\nNot enough nodes are alive to satisfy required consistency …\nUnlogged batch. No batch log write has been attempted.\nTried to execute a prepared statement that is not …\nSerialized values are too long to compute partition key\nWrite involves VIEW update and failure to acquire local …\nA non-timeout error during a write request\nNot enough nodes responded to the write request in time to …\nType of write operation requested\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this error indicates that a chosen source …\nFound number of active nodes\nTypes of arguments passed to the function\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nReplica that was asked for data has responded\nReplica that was asked for data has responded\nName of the failed function\nCreated keyspace name or name of the keyspace in which …\nKeyspace of the failed function\nNumber of nodes that experience a failure while executing …\nNumber of nodes that experience a failure while executing …\nType of the operation rejected by rate limiting.\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the write request\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the read request\nWhether the operation was rate limited on the coordinator …\nNumber of nodes required to be alive to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nStatement id of the requested prepared query\nName of the table created, in case of keyspace creation it…\nType of write operation requested\nType of write operation requested\nA profile that groups configurable options regarding query …\n<code>ExecutionProfileBuilder</code> is used to create new …\nA handle that points to an ExecutionProfile.\nBuilds the ExecutionProfile after setting all the options.\nCreates a blank builder that can be used to construct new …\nSpecify a default consistency to be used for queries. It’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new handle to this ExecutionProfile.\nReturns a new handle to this ExecutionProfile, tagging the …\nSets the load balancing policy. The default is …\nMakes the handle point to a new execution profile. All …\nCreates a builder having all options set to the same as …\nChanges client-side timeout. The default is 30 seconds.\nSets the <code>RetryPolicy</code> to use by default on queries. The …\nSpecify a default serial consistency to be used for …\nSets the speculative execution policy. The default is None.\nCreates a builder having all options set to the same as …\nUnconditionally accepts all nodes.\nAccepts nodes whose addresses are present in the allow …\nAccepts nodes from given DC.\nThe <code>HostFilter</code> trait.\nReturns whether a peer should be accepted or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AllowListHostFilter</code> which only accepts nodes …\nCreates a new <code>DcHostFilter</code> that accepts nodes only from the\nParsing values in row as given types failed\nCouldn’t get next typed row from the iterator\nQuery to fetch next page has failed\nIterator over rows returned by paged queries Allows to …\nIterator over rows returned by paged queries where each …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns specification of row columns\nReturns specification of row columns\nIf tracing was enabled returns tracing ids of all finished …\nIf tracing was enabled returns tracing ids of all finished …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this iterator into an iterator over rows parsed …\nThe default load balancing policy.\nThe intended way to instantiate the DefaultPolicy.\nThe fallback list of nodes in the query plan.\nThe builder of LatencyAwareness module of DefaultPolicy.\nPolicy that decides which nodes to contact for each query.\nThe list of nodes constituting the query plan.\nRepresents info about statement that can be used by load …\nBuilds a new DefaultPolicy with the previously set …\nCreates a builder used to customise configuration of a new …\nRequested consistency information allows to route queries …\nSets whether this policy should shuffle replicas when …\nSets exclusion threshold for latency awareness (a …\nReturns all contact-appropriate nodes for a given query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf, while preparing, we received from the cluster …\nLatency awareness is a mechanism that penalises nodes …\nSets minimum measurements for latency awareness (if there …\nReturns the name of load balancing policy.\nCreates a builder used to customise configuration of a new …\nCreates a builder of LatencyAwareness module of …\nInvoked each time a query fails.\nInvoked each time a query succeeds.\nSets whether this policy permits datacenter failover, i.e. …\nReturns the first node to contact for a given query.\nSets the datacenter to be preferred by this policy.\nSets the datacenter and rack to be preferred by this …\nSets retry period for latency awareness (max time that a …\nSets the scale to use for the resulting latency aware …\nInformation about token and keyspace is the basis of …\nSets whether this policy is token-aware (balances load …\nSets update rate for latency awareness (how often is the …\n<code>ReplicaLocator</code> provides a way to find the set of owning …\nRepresents a set of replicas for a given token and …\nIterator that returns replicas from some replica set.\nRepresents a sequence of replicas for a given token and …\nIterator that returns replicas from some replica sequence, …\nA token ring is a continuous hash ring. It defines …\nChooses a random replica that satisfies the given …\nGives a list of all known datacenters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTraverses the ring starting at the given token and returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the replica set into iterator. Order defined by …\nReturns <code>true</code> if the token ring contains no elements.\nReturns <code>true</code> if the replica set contains no elements.\nIterates over all members of the ring starting at the …\nGet the total number of members in the ring.\nGets the size of the set.\nReturns a set of nodes that are considered to be replicas …\nGives access to the token ring, based on which all token …\nProvides an iterator over the ring’s elements starting …\nProvides an iterator over the ring members starting at the …\nGives a list of all nodes in a specified datacenter ring …\nGives a list of all nodes in the token ring.\nA trait for creating instances of <code>PartitionHasher</code>, which …\nA trait for hashing a stream of serialized CQL values.\nCalculates the token for given partitioner and serialized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpected a single row, found other number of rows\nExpected a single row, found other number of rows\nParsing row as the given type failed\nParsing row as the given type failed\nParsing row as the given type failed\nResult of a single query Contains all rows returned by the …\nRows in <code>QueryResult</code> are empty\nRows in <code>QueryResult</code> are empty\n<code>QueryResult::first_row()</code> called on a bad QueryResult. …\n<code>QueryResult::first_row_typed()</code> called on a bad QueryResult.\n<code>QueryResult::maybe_first_row_typed()</code> called on a bad …\n<code>QueryResult::single_row()</code> called on a bad QueryResult. …\n<code>QueryResult::single_row_typed()</code> called on a bad …\n<code>QueryResult::rows()</code> or a similar function called on a bad …\n<code>QueryResult::result_not_rows()</code> called on a bad QueryResult.\nColumn specification returned from the server\nReturns first row from the received rows. When the first …\nReturns first row from the received rows parsed as the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a column specification for a column with given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Option&lt;RowT&gt;</code> containing the first of a result. …\nReturns <code>Option&lt;RowT&gt;</code> containing the first of a result. …\nPaging state returned from the server\nReturns <code>Ok</code> for a result of a query that shouldn’t …\nReturns the received rows when present. If <code>QueryResult.rows</code>…\nRows returned by the database. Queries like <code>SELECT</code> will …\nReturns the number of received rows. Fails when the query …\nReturns rows when <code>QueryResult.rows</code> is <code>Some</code>, otherwise an …\nReturns the received rows parsed as the given type. Equal …\nReturns rows parsed as the given type. When …\nThe original size of the serialized rows in request\nReturns the only received row. Fails if the result is …\nReturns the only received row parsed as the given type. …\nCQL Tracing uuid - can only be Some if tracing is enabled …\nWarnings returned by the database\nDefault retry policy - retries when there is a high chance …\nForwards all errors directly to the user, never retries\nInformation about a failed query\nSpecifies a policy used to decide when to retry a query\nUsed throughout a single query to decide when to retry it …\nUsed to clone this RetryPolicy\nConsistency with which the query failed\nCalled after the query failed - decide what to do next\nThe error with which the query failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA query is idempotent if it can be applied multiple times …\nCalled for each new query, starts a session of deciding …\nReset before using for a new query\nTranslates IP addresses received from ScyllaDB nodes into …\nTrait used to implement <code>Vec&lt;result::Row&gt;::into_typed&lt;RowT&gt;</code>\nIndicates that the pool should establish given number of …\nIndicates that the pool should establish given number of …\nThe target size of a per-node connection pool.\n<code>Session</code> manages connections to the cluster and allows to …\nConfiguration options for <code>Session</code>. Can be created …\nError caused by failed address translation done before …\nIterator over rows parsed as the given type Returned by …\nAdds a known database server with a hostname. If the port …\nAdds a known database server with an IP address\nAdds a list of known database server with hostnames. If …\nAdds a list of known database servers with IP addresses\nThe address translator is used to translate addresses …\nPerform a batch query Batch contains many <code>simple</code> or …\nInterval between refreshing cluster metadata. This can be …\nPreferred compression algorithm to use on connections. If …\nEstablishes a CQL session with the database\nSize of the per-node connection pool, i.e. how many …\nIf true, prevents the driver from connecting to the …\nIf true, the driver will inject a small delay before …\nExecute a prepared query. Requires a PreparedStatement …\nRun a prepared query with paging This method will query …\nExecutes a previously prepared statement with previously …\nIf true, full schema is fetched with every metadata …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess cluster data collected by the driver Driver …\nRetrieves the handle to execution profile that is used by …\nGets the name of the keyspace that is currently set, or …\nAccess metrics collected by the driver Driver collects …\nGet <code>TracingInfo</code> of a traced query performed earlier\nThe host filter decides whether any connections should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterval of sending keepalive requests. If <code>None</code>, …\nControls after what time of not receiving response to …\nIf empty, fetch all keyspaces\nList of database servers known on Session startup. Session …\nCreates a <code>SessionConfig</code> with default configuration\nPrepares a statement on the server side and returns a …\nPrepares all statements within the batch and returns a new …\nSends a query to the database and receives a response. …\nRun a simple query with paging This method will query all …\nQueries the database with a custom paging state.\nManually trigger a metadata refresh The driver will fetch …\nIf true, full schema metadata is fetched after …\nControls whether schema agreement is automatically awaited …\nHow often the driver should ask if schema is in agreement.\nControls the timeout for waiting for schema agreement. …\nNumber of attempts to fetch <code>TracingInfo</code> in …\nConsistency level of fetching <code>TracingInfo</code> in …\nDelay between attempts to fetch <code>TracingInfo</code> in …\nSends <code>USE &lt;keyspace_name&gt;</code> request on all connections This …\nSessionBuilder is used to create new Session instances\nUses a custom address translator for peer addresses …\nSet custom authenticator provider to create an …\nControls automatic waiting for schema agreement after a …\nBuilds the Session after setting all the options\nSet the interval at which the driver refreshes the cluster …\nSet preferred Compression algorithm. The default is no …\nChanges connection timeout The default is 5 seconds. If it…\nSet the default execution profile using its handle\nIf true, prevents the driver from connecting to the …\nSet the fetch schema metadata flag. The default is true.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the host filter. The host filter decides whether any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the keepalive interval. The default is …\nSet the keepalive timeout. The default is …\nSet the keyspaces to be fetched, to retrieve their …\nAdd a known node with a hostname\nAdd a known node with an IP address\nAdd a list of known nodes with hostnames\nAdd a list of known nodes with IP addresses\nCreates new SessionBuilder with default configuration\nSets the per-node connection pool size. The default is one …\nSet the refresh metadata on schema agreement flag. The …\nSet the delay for schema agreement check. How often driver …\nSets the timeout for waiting for schema agreement. By …\nSet the TCP keepalive interval. The default is <code>None</code>, which …\nSet the nodelay TCP flag. The default is true.\nSet the number of attempts to fetch TracingInfo in …\nSet the consistency level of fetching TracingInfo in …\nSet the delay between attempts to fetch TracingInfo in …\nSet keyspace to be used on all connections. Each …\nSet username and password for plain text authentication. …\nIf true, the driver will inject a small delay before …\nContext is passed as an argument to …\nA policy that triggers speculative executions when the …\nA SpeculativeExecutionPolicy that schedules a given number …\nThe policy that decides if the driver will send …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of speculative executions that will be …\nThe maximum number of speculative executions that will be …\nThe maximum number of speculative executions that will be …\nThe percentile that a request’s latency must fall into …\nThe delay between each speculative execution\nThe delay between each speculative execution\nProvided by user in SessionConfig (initial contact points).\nRepresents a user defined type whose definition is missing …\nFetched in Metadata with <code>query_peers()</code>\nData used to issue connections to a node.\nAn endpoint for a node that the driver is to issue …\nData used to issue connections to a node that is possibly …\nDefinition of a user-defined type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmpty HashMap may as well mean that the client disabled …\nEmpty HashMap may as well mean that the client disabled …\nEmpty HashMap may as well mean that the client disabled …")
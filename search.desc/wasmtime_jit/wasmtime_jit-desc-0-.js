searchState.loadedDescShard("wasmtime_jit", 0, "JIT-style runtime for WebAssembly using Cranelift.\nManagement of executable memory within a <code>MmapVec</code>\nA wasm translation error occurred.\nA compiled wasm module, ready to be instantiated.\nSecondary in-memory results of compilation.\nDebug information generation error occurred.\nSome runtime resource was unavailable or insufficient, or …\nInterface for driving the creation of jitdump files\nDefault agent for unsupported profiling build.\nCommon interface for profiling tools.\nAn error condition while setting up a wasm instance, be it …\nA context which contains dwarf debug information to …\nVersion number of this crate.\nInterface for driving the ittapi for VTune support\nThe module did not pass validation.\nReturns access to the <code>addr2line::Context</code> which can be used …\nReturns the encoded address map section used to pass to …\nReturns the text section of the ELF image for this …\nReturns the offset of the code section in the original …\nDemangles a single function name into a user-readable form.\nDemangles a function name if it’s provided, or returns a …\nFinishes compilation of the <code>translation</code> specified, …\nReturns the map of all finished JIT functions compiled for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>CompiledModule</code> directly from a precompiled …\nLookups a defined function by a program counter value.\nGets the function information for a given function index.\nLooks up the <code>name</code> section name for the function index <code>idx</code>, …\nIndicates whether this module came with n address map such …\nReturns whether the original wasm module had unparsed …\nReturns the bounds, in host memory, of where this module’…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify the profiler about a single dynamically-generated …\nReturns a reference to the underlying <code>MmapVec</code> this memory …\nReturns the underlying memory which contains the compiled …\nCreates a new <code>MmapVec</code> from serializing the specified <code>obj</code>.\nReturn a reference-counting pointer to a module.\nNotify the profiler of a new module loaded into memory\nReturn a reference to a mutable module (if possible).\nCreates a new <code>CodeMemory</code> by taking ownership of the …\nIntialize a JitDumpAgent and write out the header\nInitialize a VTuneAgent.\nPublishes the internal ELF image to be ready for execution.\nReturns the stack map information for all functions …\nReturns the range of <code>inner</code> within <code>outer</code>, such that …\nCreates a new symbolication context which can be used to …\nReturns the per-signature trampolines for this module.\nReturns the encoded trap information for this compiled …\nGet this module’s unique ID. It is unique with respect …\nReturns the concatenated list of all data associated with …")
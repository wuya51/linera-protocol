searchState.loadedDescShard("webc", 0, "A library for reading and writing WEBC files.\nA version-agnostic read-only WEBC container.\nAn error returned by <code>detect()</code>.\nA directory\nThe path segment was empty.\nA file with a specified length.\nFound a path segment that isn’t allowed.\nFound a path segment containing illegal characters.\nThe <code>Magic</code> bytes were invalid.\nThe segment wasn’t valid UTF-8.\nAn error occurred while reading.\nThe identifier for the latest WEBC version.\nFile identification bytes stored at the beginning of the …\nThe type for <code>MAGIC</code>.\nMetadata describing the properties of a file or directory.\nA non-directory was found where a directory was expected.\nA non-file was found where a file was expected.\nThe path wasn’t absolute.\nThe item wasn’t found.\nThe provided path wasn’t valid.\na cheaply cloneable path segment (i.e. the <code>path</code>, <code>to</code>, and …\nAn error that may occur while parsing a <code>PathSegment</code> or …\nA series of <code>PathSegment</code>s specifying the <strong>absolute</strong> path to …\nThe root path (i.e. <code>/</code>).\nRepresents file or directory timestamps.\nConvert something into <code>PathSegments</code>.\nThe identifier for WEBC v1.\nThe identifier for WEBC v2.\nThe identifier for WEBC v3.\nA WEBC file’s version number.\nA WEBC volume.\nErrors that may occur when doing <code>Volume</code> operations.\ntimestamp of the last access time\nGet the <code>PathSegment</code>’s <code>&amp;str</code> representation.\nA compatibility layer for dealing with different versions …\ntimestamp of the creation time\nCheck whether something looks like a valid WEBC file and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the provided item looks like a WEBC file.\nIterate over all the <code>PathSegment</code>s in this path.\nGet a new path by appending a <code>PathSegment</code> to the current …\nPackage metadata.\nContains code for migrating v2 &lt;–&gt; v3\ntimestamp of the latest modification time\nParse a <code>PathSegment</code> from a string.\nRemove the last <code>PathSegment</code> from this path, if one was …\nAdd a <code>PathSegment</code> to this path.\nConvert to <code>PathSegments</code>.\nParsing code for v2 of the WEBC format.\nParsing code for v3 of the WEBC format.\nLoad a Wasmer package from disk.\nThe <code>Magic</code> bytes that were expected.\nThe <code>Magic</code> bytes the file started with.\nThe number of bytes in this file.\nTimestamps fo the directory\nTimestamps of the file\nThe original segment.\nA version-agnostic read-only WEBC container.\nVarious errors that may occur during <code>Container</code> operations.\nUnable to detect the WEBC version.\nA directory\nParsing requires a feature to be enabled.\nA file with a specified length.\nAn IO error\nMetadata describing the properties of a file or directory.\nA non-directory was found where a directory was expected.\nA non-file was found where a file was expected.\nThe item wasn’t found.\nUnable to open a file.\nPath segment parsing failed.\nThe provided path wasn’t valid.\nUnable to read a file’s contents into memory.\nA cheaply cloneable owned buffer that may be backed by a …\nAn unsupported WEBC version was found.\nAn error occurred while parsing a v2 WEBC file.\nAn error occurred while parsing a v3 WEBC file.\nA WEBC volume.\nErrors that may occur when doing <code>Volume</code> operations.\nan error occurred while loading a Wasmer package from disk.\nGet all atoms stored in the container as a map.\nDowncast the <code>Container</code> a concrete implementation, …\nDowncast the <code>Container</code> a concrete implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a <code>Container</code> from bytes in memory.\nLoad a <code>Container</code> from disk.\nGet an atom with the given name.\nGet a volume with the given name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the metadata represents a directory.\nReturns <code>true</code> if the metadata represents a file.\nGet the <code>Container</code>’s manifest.\nGet the metadata of an item at the given path.\nRead the contents of a directory at the given path.\nRead the contents of a file at the given path.\nReturns the timestamps of the directory or file.\nReturnes mutable ref to the timestamps of the directory or …\nUnpack the container into a directory.\nUnpack a subdirectory of this volume into a local …\nValidates an <code>AbstractWebc</code>\nGet the underlying webc version\nGet all volumes stored in the container.\nGet the <code>Container</code>’s webc hash\nThe underlying error.\nThe underlying error.\nThe feature name\nThe file’s path.\nThe file’s path.\nThe number of bytes in this file.\nTimestamps fo the directory\nTimestamps of the file\nAnnotation = free-form metadata to be used by the atom\nRepresents an array of values.\nExecutable file, stored in the <code>.atoms</code> section of the file\nExecutable file, stored in the <code>.atoms</code> section of the file\nRepresents a boolean value.\nRepresents a byte string.\nCommand that can be run by a given implementation\nRepresents a floating point value.\nInteger CBOR numbers.\nManifest of the file, see spec <code>§2.3.1</code>\nInternal dependency (volume name = <code>user/package@version</code>)\nSame as <code>Manifest</code>, but doesn’t require the <code>atom.signature</code>\nRepresents a map.\nRepresents the absence of a value or the value undefined.\nRegistry-dependent dependency in a forma a la “…\nRepresents a tagged value\nRepresents an UTF-8 encoded string.\nExternal dependency\nDependency of this file, encoded as either a URL or a …\nStrongly-typed definitions for the various free-form “…\nUser-defined map of free-form CBOR values that the runner …\nAtoms (executable files) in this container\nAtoms do not require a “.signature” field to be valid …\nBinding descriptions of this manifest\nBinding descriptions of this manifest\nCommands that this container can execute (empty for …\nEntrypoint (default command) to lookup in <code>self.commands</code> …\nThe URI pointing to the exports file exposed by these …\nUse Get the package’s <code>FileSystemMappings</code> annotations …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe URI pointing to the exports file exposed by these …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nURL of the kind of the atom, usually <code>&quot;webc.org/kind/wasm&quot;</code>\nURL of the kind of the atom, usually <code>&quot;webc.org/kind/wasm&quot;</code>\nThe WebAssembly module these bindings annotate.\nIf this manifest was vendored from an external source, …\nPackage version, author, license, etc. information\nUser-defined string specifying the type of runner to use …\nSignature hash of the atom, usually <code>&quot;sha256:xxxxx&quot;</code>\nReturns the manifest with the “atom.signature” field …\nDependencies of this file (internal or external)\nGet the package’s <code>Wapm</code> annotations stored at <code>Wapm::KEY</code>.\nA command annotation which specifies which atom implements …\nThe base URI used by an <code>Emscripten</code> runner.\nAnnotations used by Emscripten runners.\nAn entry used when constructing a filesystem based on a …\nA list of entries used when constructing a filesystem …\nThe name commonly used when storing this in an annotations …\nThe name commonly used when storing this in an annotations …\nThe name commonly used when storing this in an annotations …\nThe name commonly used when storing this in an annotations …\nThe name commonly used when storing this in an annotations …\nThe name commonly used when storing this in an annotations …\nThe path for an item inside a particular volume.\nThe base URI used by a <code>Wasi</code> runner.\nThe base URI used by a WASM4 runner.\nThe base URI used by a <code>Wcgi</code> runner.\nPackage-level annotations specific to the WebAssembly …\nAnnotations used by WASI runners.\nAnnotations used by WCGI runners.\nThe name of the dependency referred to by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe alias of the dependency this filesystem mapping should …\nThe path of the mapped item within its original volume.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere the volume should be mounted in the resulting …\nThe name of the atom (as passed to <code>Container::get_atom()</code>).\nThe name of the volume.\nChecks whether two webcs (one v2 and one v3) are …\nMigrates WebC V2 to V3\nMigrates WebC V3 to V2\nGet an iterator over all the tag variants.\nThe atoms section.\nA tag for the empty checksum (i.e. …\nA tag indicating that the <code>crate::v2::Checksum</code> is …\nMetadata for a directory in the <code>Tag::Volume</code> header.\nMetadata for a file in the <code>Tag::Volume</code> header.\nThe index added to a WEBC file to facilitate <code>O(1)</code> lookups …\nThe index section, containing a CBOR-serialized …\nThe manifest section, containing a CBOR-serialized …\nDon’t create a signature.\nAn unknown error.\nA tagged signature.\nThe algorithm used when signing a WEBC file.\nErrors that may occur when signing a WEBC file.\nA tag for the empty signature (i.e. …\nThe location of something within a larger buffer.\nUnique identifiers used to indicate various components of …\nThe volume section.\nGet the <code>Tag</code>’s <code>u8</code> representation.\nGets a displayable implementation for something that may …\nGet the offset one past the end.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to load a <code>Tag</code> from its <code>u8</code> representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this the empty signature (i.e. <code>Tag::SignatureNone</code>).\nThe number of bytes in this item.\nGet the <code>Tag</code>’s human-friendly name.\nCreate a new <code>Signature</code>.\nCreate a new <code>Span</code>.\nThe empty signature as used by <code>Tag::SignatureNone</code>.\nRead files in the WEBC format.\nThe start of an item, relative to the start of the file.\nWhat type of signature is this? (e.g. <code>Tag::SignatureNone</code>)\nThe signature’s value.\nCreate files in the WEBC format.\nTried to access something outside of the volume header.\nA section containing the atoms volume.\nAn item in a volume.\nErrors that may occur while parsing a <code>DirEntry</code>.\nA directory that contains zero or more <code>DirEntry</code>’s.\nThe contents of a file in the volume.\nA section containing the file’s <code>Index</code>.\nA filename wasn’t valid UTF-8.\nErrors that may occur while looking up an item in a volume.\nA section containing the file’s <code>Manifest</code>.\nFound a directory when one wasn’t expected (e.g. when …\nThe item wasn’t found.\nA reader for owned data that is already in memory.\nErrors that may be emitted by <code>OwnedReader</code>.\nThe different sections in a webc file.\nErrors that may occur while parsing a <code>Section</code>.\nA reader which can parse a WEBC file from an arbitrary <code>Read</code>…\nErrors that may be emitted by <code>StreamingReader</code>.\nEncountered a <code>Tag</code> with an known value.\nEncountered an entry with a tag that isn’t supported.\nErrors that may occur while reading a volume header.\nA volume section containing a directory tree.\nThe file’s data.\nGet a reference to the bytes this section contains.\nA SHA-256 checksum for this file.\nDeserialize the manifest section into a custom type.\nLazily parse the entries in this directory.\nLook up a particular entry by name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to parse a <code>File</code> into an <code>OwnedReader</code>.\nLazily parse the section into an <code>Index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>DirEntry</code> into a <code>Directory</code>, if it is one.\nConvert the <code>DirEntry</code> into a <code>FileEntry</code>, if it is one.\nIs this directory empty?\nIs the file empty?\nIterate over all the atoms in this <code>AtomsSection</code>.\nIterate over all the atoms in this <code>AtomsSection</code>, including …\nThe length of the file.\nDeserialize into the canonical <code>Manifest</code> format.\nIterate over all the sections in this WEBC file.\nIterate over all the sections in this WEBC file, and their …\nThe location of the file, relative to the start of its …\nThe underlying error.\nThe original filename.\nThe tag that was encountered.\nThe raw value.\nBytes borrowed from somewhere else.\nA <code>Directory</code>.\nA single entry in a directory.\nA directory in a volume.\nA <code>FileEntry</code>.\nSome file-like object which can be written to a WEBC file.\nOwned bytes.\nA readable object.\nA serializer for the WEBC format.\nThe <code>Writer</code> is about to write the atoms section.\nThe <code>Writer</code> is about to write the <code>Manifest</code> section.\nThe <code>Writer</code> is writing volumes sections.\nThe items in this directory.\nFinish writing volumes and get the final WEBC file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>FileEntry</code> from a file on disk.\nLoad a <code>Directory</code> from a directory on disk.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Writer</code> in its initial state.\nAdd a volume to the file.\nWrite some atoms to the atoms section of the file, …\nSerialize an arbitrary object to CBOR and write it to the …\nWrite a <code>Manifest</code> to the manifest section, transitioning …\nWrite some bytes to the manifest section.\nWrite a volume to the file.\nGet an iterator over all the tag variants.\nThe atoms section.\nA tag for the empty checksum (i.e. …\nA tag indicating that the <code>crate::v3::Checksum</code> is …\nMetadata for a directory in the <code>Tag::Volume</code> header.\nMetadata for a file in the <code>Tag::Volume</code> header.\nThe index added to a WEBC file to facilitate <code>O(1)</code> lookups …\nThe index section, containing a CBOR-serialized …\nThe manifest section, containing a CBOR-serialized …\nDon’t create a signature.\nAn unknown error.\nA tagged signature.\nThe algorithm used when signing a WEBC file.\nErrors that may occur when signing a WEBC file.\nA tag for the empty signature (i.e. …\nThe location of something within a larger buffer.\nUnique identifiers used to indicate various components of …\nThe volume section.\nGet the <code>Tag</code>’s <code>u8</code> representation.\nGets a displayable implementation for something that may …\nGet the offset one past the end.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to load a <code>Tag</code> from its <code>u8</code> representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this the empty signature (i.e. <code>Tag::SignatureNone</code>).\nThe number of bytes in this item.\nGet the <code>Tag</code>’s human-friendly name.\nCreate a new <code>Signature</code>.\nCreate a new <code>Span</code>.\nThe empty signature as used by <code>Tag::SignatureNone</code>.\nRead files in the WEBC format.\nThe start of an item, relative to the start of the file.\nWhat type of signature is this? (e.g. <code>Tag::SignatureNone</code>)\nThe signature’s value.\nCreate files in the WEBC format.\nTried to access something outside of the volume header.\nA section containing the atoms volume.\nAn item in a volume.\nErrors that may occur while parsing a <code>DirEntry</code>.\nA directory that contains zero or more <code>DirEntry</code>’s.\nThe contents of a file in the volume.\nA section containing the file’s <code>Index</code>.\nA filename wasn’t valid UTF-8.\nErrors that may occur while looking up an item in a volume.\nA section containing the file’s <code>Manifest</code>.\nFound a directory when one wasn’t expected (e.g. when …\nThe item wasn’t found.\nA reader for owned data that is already in memory.\nErrors that may be emitted by <code>OwnedReader</code>.\nThe different sections in a webc file.\nErrors that may occur while parsing a <code>Section</code>.\nA reader which can parse a WEBC file from an arbitrary <code>Read</code>…\nErrors that may be emitted by <code>StreamingReader</code>.\nEncountered a <code>Tag</code> with an known value.\nEncountered an entry with a tag that isn’t supported.\nErrors that may occur while reading a volume header.\nA volume section containing a directory tree.\nThe file’s data.\nGet a reference to the bytes this section contains.\nA SHA-256 checksum for this file.\nDeserialize the manifest section into a custom type.\nLazily parse the entries in this directory.\nLook up a particular entry by name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to parse a <code>File</code> into an <code>OwnedReader</code>.\nLazily parse the section into an <code>Index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>DirEntry</code> into a <code>Directory</code>, if it is one.\nConvert the <code>DirEntry</code> into a <code>FileEntry</code>, if it is one.\nIs this directory empty?\nIs the file empty?\nIterate over all the atoms in this <code>AtomsSection</code>.\nIterate over all the atoms in this <code>AtomsSection</code>, including …\nThe length of the file.\nDeserialize into the canonical <code>Manifest</code> format.\nIterate over all the sections in this WEBC file.\nIterate over all the sections in this WEBC file, and their …\nThe location of the file, relative to the start of its …\nThe underlying error.\nThe original filename.\nThe tag that was encountered.\nThe raw value.\nA <code>Directory</code>.\nA single entry in a directory.\nA directory in a volume.\nA <code>FileEntry</code>.\nA serializer for the WEBC format.\nThe <code>Writer</code> is about to write the atoms section.\nThe <code>Writer</code> is about to write the <code>Manifest</code> section.\nThe <code>Writer</code> is writing volumes sections.\nThe items in this directory.\nFinish writing volumes and get the final WEBC file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a <code>Directory</code> from a directory on disk.\nCreate a new <code>FileEntry</code> from a file on disk.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Writer</code> in its initial state.\nAdd a volume to the file.\nWrite some atoms to the atoms section of the file, …\nSerialize an arbitrary object to CBOR and write it to the …\nWrite a <code>Manifest</code> to the manifest section, transitioning …\nWrite some bytes to the manifest section.\nWrite a volume to the file.\nUnable to canonicalize a path.\nA directory\nA command was specified more than once.\nA module was specified more than once.\nA file\nFile based commands are not supported for in-memory …\nUnable to open a file.\nUnable to read a file.\nA lazily loaded volume in a Wasmer package.\nA dependency specification had a syntax error.\nA command uses a non-existent module.\nGeneric IO error.\nUnable to deserialize a json file.\nPrefer to lose data rather than error out.\nUnexpected path format\nUnable to load the <code>wasmer.toml</code> manifest.\nErrors that may occur when converting from a …\nAn in-memory directory.\nAn in-memory file.\nAn in-memory representation of a filesystem node.\nAn in-memory representation of a volume.\nAn error occurred while merging user-defined annotations …\nThe manifest references a file that doesn’t exist.\nUnable to find the <code>wasmer.toml</code> file.\nThe <code>wasmer.toml</code> file references a file outside of its base …\nA Wasmer package that will be lazily loaded from disk.\nA path in the fs mapping does not exist\nUnable to read a module’s <code>source</code>.\nError when serializing or deserializing\nUnable to serialize an annotation.\nAll package issues should be errors.\nThe strictness to use when working with a …\nUnable to extract the tarball.\nUnable to create a temporary directory.\nUnable to deserialize the <code>wasmer.toml</code> file.\nSpecified an unknown atom kind.\nAn unknown runner kind was specified.\nA manifest validation error.\nAny error happening when populating the volumes tree map …\nErrors that may occur while loading a Wasmer package from …\nAn abstraction over concrete volumes implementation to be …\nUnable to deserialize custom annotations from the …\nTry to return a <code>MemoryDir</code> out of <code>self</code>.\nSerialize the volume as a [<code>webc::v3::write::Directory</code>].  \nTry to return a <code>MemoryFile</code> out of <code>self</code>.\nGet all atoms in this package.\nRaw data  \nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Package</code> from an in-memory representation.\n(Re)loads a package from a manifest.json file which was …\n(Re)loads a package from a manifest.json file which was …\nLoad a package from a <code>wasmer.toml</code> manifest on disk.\nLoad a package from a <code>wasmer.toml</code> manifest on disk.\nLoad a package from a <code>*.tar.gz</code> archive.\nLoad a <code>Package</code> from a <code>*.tar.gz</code> file on disk.\nLoad a <code>Package</code> from a <code>*.tar.gz</code> file on disk.\nLoad a package from a <code>*.tar.gz</code> archive.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the WEBC manifest.\nGet metadata.  \nGet the metadata for a particular item.\nWhen the file was last modified.\nWhen the directory or its contents were last modified.\nReturns the name of the volume\nThe internal node\nList of nodes in the directory\nRead a directory.  \nRead the contents of a directory.\nRead a file.  \nRead a file from the volume.\nSerialize the package to a <code>*.webc</code> v2 file, ignoring errors …\nReturns all volumes in this package\nReturns the Sha256 has of the webc represented by this …\nThe base directory.\nThe base directory.\nThe command annotations were being merged for.\nThe command name.\nThe underlying error.\nThe underlying error.\nThe underlying error.\nWhich annotation was being serialized?\nThe annotation that was being merged.\nThe name of the module.\nThe module name.\nThe path that was read.\nThe file that was referenced.\nThe file that was referenced.\nThe underlying error.\nThe underlying error.\nThe underlying error.\nThe underlying error.\nThe underlying error.\nThe file being opened.\nThe file being opened.\nThe file being deserialized.\nThe file being deserialized.\nThe path being canonicalized.\nPath entry in fs mapping")
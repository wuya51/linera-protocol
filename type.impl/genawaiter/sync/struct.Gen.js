(function() {var type_impls = {
"genawaiter":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Coroutine-for-Gen%3CY,+R,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#77-88\">source</a><a href=\"#impl-Coroutine-for-Gen%3CY,+R,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, R, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt; <a class=\"trait\" href=\"genawaiter/trait.Coroutine.html\" title=\"trait genawaiter::Coroutine\">Coroutine</a> for <a class=\"struct\" href=\"genawaiter/sync/struct.Gen.html\" title=\"struct genawaiter::sync::Gen\">Gen</a>&lt;Y, R, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"genawaiter/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = Y</h4></section></summary><div class='docblock'>The type of value this generator yields.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Resume\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Resume\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"genawaiter/trait.Coroutine.html#associatedtype.Resume\" class=\"associatedtype\">Resume</a> = R</h4></section></summary><div class='docblock'>The type of value this generator accepts as a resume argument.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"genawaiter/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;F as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a></h4></section></summary><div class='docblock'>The type of value this generator returns upon completion.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#82-87\">source</a><a href=\"#method.resume_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"genawaiter/trait.Coroutine.html#tymethod.resume_with\" class=\"fn\">resume_with</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;mut Self</a>&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"genawaiter/enum.GeneratorState.html\" title=\"enum genawaiter::GeneratorState\">GeneratorState</a>&lt;Self::<a class=\"associatedtype\" href=\"genawaiter/trait.Coroutine.html#associatedtype.Yield\" title=\"type genawaiter::Coroutine::Yield\">Yield</a>, Self::<a class=\"associatedtype\" href=\"genawaiter/trait.Coroutine.html#associatedtype.Return\" title=\"type genawaiter::Coroutine::Return\">Return</a>&gt;</h4></section></summary><div class='docblock'>Resumes the execution of this generator. <a href=\"genawaiter/trait.Coroutine.html#tymethod.resume_with\">Read more</a></div></details></div></details>","Coroutine","genawaiter::sync::boxed::GenBoxed"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Gen%3CY,+(),+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#51-75\">source</a><a href=\"#impl-Gen%3CY,+(),+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt; <a class=\"struct\" href=\"genawaiter/sync/struct.Gen.html\" title=\"struct genawaiter::sync::Gen\">Gen</a>&lt;Y, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.unit.html\">()</a>, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume\" class=\"method\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#58-60\">source</a><h4 class=\"code-header\">pub fn <a href=\"genawaiter/sync/struct.Gen.html#tymethod.resume\" class=\"fn\">resume</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"genawaiter/enum.GeneratorState.html\" title=\"enum genawaiter::GeneratorState\">GeneratorState</a>&lt;Y, F::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Resumes execution of the generator.</p>\n<p>If the generator yields a value, <code>Yielded</code> is returned. Otherwise,\n<code>Completed</code> is returned.</p>\n<p><a href=\".\"><em>See the module-level docs for examples.</em></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.async_resume\" class=\"method\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#69-74\">source</a><h4 class=\"code-header\">pub fn <a href=\"genawaiter/sync/struct.Gen.html#tymethod.async_resume\" class=\"fn\">async_resume</a>(\n    &amp;mut self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"genawaiter/enum.GeneratorState.html\" title=\"enum genawaiter::GeneratorState\">GeneratorState</a>&lt;Y, F::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a>&gt;&gt; + '_</h4></section></summary><div class=\"docblock\"><p>Resumes execution of the generator.</p>\n<p>If the generator pauses without yielding, <code>Poll::Pending</code> is returned.\nIf the generator yields a value, <code>Poll::Ready(Yielded)</code> is returned.\nOtherwise, <code>Poll::Ready(Completed)</code> is returned.</p>\n<p><a href=\".\"><em>See the module-level docs for examples.</em></a></p>\n</div></details></div></details>",0,"genawaiter::sync::boxed::GenBoxed"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Gen%3CY,+R,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#16-49\">source</a><a href=\"#impl-Gen%3CY,+R,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, R, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt; <a class=\"struct\" href=\"genawaiter/sync/struct.Gen.html\" title=\"struct genawaiter::sync::Gen\">Gen</a>&lt;Y, R, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#29-33\">source</a><h4 class=\"code-header\">pub fn <a href=\"genawaiter/sync/struct.Gen.html#tymethod.new\" class=\"fn\">new</a>(producer: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"type\" href=\"genawaiter/sync/type.Co.html\" title=\"type genawaiter::sync::Co\">Co</a>&lt;Y, R&gt;) -&gt; F) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new generator from a function.</p>\n<p>The function accepts a <a href=\"genawaiter/sync/type.Co.html\" title=\"type genawaiter::sync::Co\"><code>Co</code></a> object, and returns a future. Every time\nthe generator is resumed, the future is polled. Each time the future is\npolled, it should do one of two things:</p>\n<ul>\n<li>Call <code>co.yield_()</code>, and then return <code>Poll::Pending</code>.</li>\n<li>Drop the <code>Co</code>, and then return <code>Poll::Ready</code>.</li>\n</ul>\n<p>Typically this exchange will happen in the context of an <code>async fn</code>.</p>\n<p><a href=\".\"><em>See the module-level docs for examples.</em></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume_with\" class=\"method\"><a class=\"src rightside\" href=\"src/genawaiter/sync/generator.rs.html#45-48\">source</a><h4 class=\"code-header\">pub fn <a href=\"genawaiter/sync/struct.Gen.html#tymethod.resume_with\" class=\"fn\">resume_with</a>(&amp;mut self, arg: R) -&gt; <a class=\"enum\" href=\"genawaiter/enum.GeneratorState.html\" title=\"enum genawaiter::GeneratorState\">GeneratorState</a>&lt;Y, F::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Resumes execution of the generator.</p>\n<p><code>arg</code> is the resume argument. If the generator was previously paused by\nawaiting a future returned from <code>co.yield()</code>, that future will complete,\nand return <code>arg</code>.</p>\n<p>If the generator yields a value, <code>Yielded</code> is returned. Otherwise,\n<code>Completed</code> is returned.</p>\n<p><a href=\".\"><em>See the module-level docs for examples.</em></a></p>\n</div></details></div></details>",0,"genawaiter::sync::boxed::GenBoxed"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Gen%3CY,+(),+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genawaiter/sync/iterator.rs.html#4-12\">source</a><a href=\"#impl-IntoIterator-for-Gen%3CY,+(),+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.unit.html\">()</a>&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"genawaiter/sync/struct.Gen.html\" title=\"struct genawaiter::sync::Gen\">Gen</a>&lt;Y, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.unit.html\">()</a>, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = Y</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;Y, F&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genawaiter/sync/iterator.rs.html#9-11\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","genawaiter::sync::boxed::GenBoxed"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
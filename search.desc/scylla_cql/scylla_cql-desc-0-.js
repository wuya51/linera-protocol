searchState.loadedDescShard("scylla_cql", 0, "This module contains various errors which can be returned …\nThis macro implements FromCqlVal given a type and method …\nImplements the <code>SerializeCql</code> trait for a type, provided …\nImplements the <code>SerializeRow</code> trait for a type, provided …\nAttempted to create a keyspace or a table that was already …\nAuthentication failed - bad credentials\nInvalid keyspace name given to <code>Session::use_keyspace()</code>\nPassed invalid keyspace name to use\nError caused by caller creating an invalid query\nCaller passed an invalid query\nCaller passed an invalid query\nLogged batch write. If this type is received, it means the …\nTimeout occurred during the write to the batch log when a …\nTimeout occurred during Compare And Set write/update\nTimeout occurred  when a cdc_total_space_in_mb is exceeded …\nThe query is invalid because of some configuration issue\nCounter write (batched or not)\nAn error sent from the database in response to a query as …\nDatabase sent a response containing some error with a …\nDatabase sent a response containing some error with a …\nKeyspace name is empty\nList of known nodes passed to Session constructor is empty …\nFailed to resolve hostname passed in Session creation\nUser defined function failed during execution\nIllegal character - only alphanumeric and underscores …\nThe query is syntactically correct but invalid\nInvalid message received\nInvalid message received\nInput/Output error has occurred, connection broken etc.\nInput/Output error has occurred, connection broken etc.\nThe coordinator node is still bootstrapping\nError that occurred during session creation\nType of the operation rejected by rate limiting\nOther error code not specified in the specification\nOther type not specified in the specification\nOther reasons of bad query\nThe request cannot be processed because the coordinator …\nUnexpected message received\nInvalid protocol message received from the driver\nUnexpected message received\nError that occurred during query execution\nRate limit was exceeded for a partition affected by the …\nA non-timeout error during a read request\nNot enough nodes responded to the read request in time to …\nClient timeout occurred before any response arrived\nClient timeout occurred before a response arrived for some …\nFailed to serialize values passed to a query - values too …\nInternal server error. This indicates a server-side bug\nNon-batched non-counter write\nThe submitted query has a syntax error\nTimeout error has occurred, function didn’t complete in …\nTimeout error has occurred, couldn’t connect to node in …\nKeyspace name too long, must be up to 48 characters\nToo many queries in the batch statement\nError caused by failed address translation done before …\nAddress translation failed\nAddress translation failed\nError during truncate operation\nThe logged user doesn’t have the right to perform the …\nNot enough nodes are alive to satisfy required consistency …\nUnlogged batch. No batch log write has been attempted.\nTried to execute a prepared statement that is not …\nSerialized values are too long to compute partition key\nWrite involves VIEW update and failure to acquire local …\nA non-timeout error during a write request\nNot enough nodes responded to the write request in time to …\nType of write operation requested\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this error indicates that a chosen source …\nFound number of active nodes\nTypes of arguments passed to the function\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nConsistency level of the query\nReplica that was asked for data has responded\nReplica that was asked for data has responded\nName of the failed function\nCreated keyspace name or name of the keyspace in which …\nKeyspace of the failed function\nNumber of nodes that experience a failure while executing …\nNumber of nodes that experience a failure while executing …\nType of the operation rejected by rate limiting.\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the write request\nNumber of nodes that responded to the read request\nNumber of nodes that responded to the read request\nWhether the operation was rate limited on the coordinator …\nNumber of nodes required to be alive to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nNumber of nodes required to respond to satisfy required …\nStatement id of the requested prepared query\nName of the table created, in case of keyspace creation it…\nType of write operation requested\nType of write operation requested\nThe wire protocol compression algorithm.\nLZ4 compression algorithm.\nSnappy compression algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCQL binary protocol in-wire types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNot intended for driver’s direct usage (as driver has no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves consistency from request frame, if present.\nRetrieves serial consistency from request frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe type of a batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis trait defines a way to convert CqlValue or …\nThis trait defines a way to convert CQL Row into some rust …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDays since -5877641-06-23 i.e. 2^31 days before unix epoch …\nNanoseconds since midnight\nMilliseconds since unix epoch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nindex in the serialized values\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows converting Row into tuple of rust types or custom …\npk_indexes are sorted by <code>index</code> and can be reordered in …\nsequence number in partition key\nOriginal size of the serialized rows.\nOrder of <code>fields</code> vector must match the order of fields as …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an counter value\nNative CQL date representation that allows for a bigger …\nNative CQL <code>decimal</code> representation.\nRepresents a CQL Duration value\nNative CQL time representation.\nNative CQL timestamp representation that allows full …\nRepresents timeuuid (uuid V1) value\nNative CQL <code>varint</code> representation.\nA const empty instance, useful for taking references\nContains the error value\nRepresents List of ValueList for Batch statement\nAllows reusing already-serialized first value\nImplements <code>BatchValues</code> from an <code>Iterator</code> over references to …\nFor some unknown reason, this type, when not resolved to a …\nAn iterator-like for <code>ValueList</code>\nImplements <code>BatchValuesIterator</code> from an <code>Iterator</code> over …\nKeeps a buffer with serialized Values Allows adding new …\nEnum providing a way to represent a value that might be …\nContains the success value\nRepresents an unset value\nEvery value being sent in a query must implement this trait\nRepresents list of values to be sent in a query gets …\nSerializes value and appends it to the list\nReturns a slice of bytes in two’s complement binary …\nReturns a slice of bytes in two’s complement binary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>CqlDecimal</code> from an array of bytes representing …\nCreates a <code>CqlDecimal</code> from a slice of bytes representing …\nCreates a <code>CqlVarint</code> from an array of bytes in two’s …\nCreates a <code>CqlVarint</code> from a slice of bytes in two’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>CqlDecimal</code> to an array of bytes in two’s …\nConverts <code>CqlVarint</code> to an array of bytes in two’s …\nCreates empty value list\nCreates value list from the request frame\nProvides a view of ValueList as LegacySerializedValues …\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nDocumentation for this macro can only be found in <code>scylla</code> …\nDocumentation for this macro can only be found in <code>scylla</code> …\nDocumentation for this macro can only be found in <code>scylla</code> …\nDocumentation for this macro can only be found in <code>scylla</code> …\nDocumentation for this macro can only be found in <code>scylla</code> …\nDocumentation for this macro can only be found in <code>scylla</code> …\nAdvance the internal cursor of the BufMut\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nCreates an adapter which will chain this buffer with …\nReturns a mutable slice starting at the current BufMut …\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nCreates <code>Bytes</code> instance from slice, by copying it.\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nConvert self into <code>BytesMut</code>.\nReturns the argument unchanged.\nCreates a new <code>Bytes</code> from a static slice.\nReturns true if there is space in <code>self</code> for more bytes.\nThis macro implements FromCqlVal given a type and method …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nReturns the number of bytes that can be written from the …\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nSets the length of the buffer.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nAttempts to cheaply reclaim already allocated capacity for …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nCreates a new <code>BytesMut</code> with the specified capacity.\nCreates an adaptor which implements the <code>Write</code> trait for …\nCreates a new <code>BytesMut</code> containing <code>len</code> zeros.\nTypes and traits related to serialization of values to the …\nAn error indicating that a failure happened during …\nContains the <code>BatchValues</code> and <code>BatchValuesIterator</code> trait and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SerializationError</code>.\nContains the <code>RawBatchValues</code> and <code>RawBatchValuesIterator</code> …\nContains the <code>SerializeRow</code> trait and its implementations.\nContains the <code>SerializeCql</code> trait and its implementations.\nContains types and traits used for safe serialization of …\nRepresents a list of sets of values for a batch statement.\nImplements <code>BatchValues</code> from an <code>Iterator</code> over references to …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nImplements <code>BatchValuesIterator</code> from an <code>Iterator</code> over …\nA newtype wrapper which adjusts an existing types that …\nA newtype wrapper which adjusts an existing types that …\nA <code>BatchValuesIterator</code> over a tuple.\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new `BatchValuesFromIter`` object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nRepresents a list of sets of values for a batch statement.\nTakes <code>BatchValues</code> and an iterator over contexts, and turns …\nAn <code>Iterator</code>-like object over the values from the parent …\nAn <code>Iterator</code>-like object over the values from the parent …\nTakes <code>BatchValuesIterator</code> and an iterator over contexts, …\nReturns an iterator over the data contained in this object.\nReturn the number of sets of values, consuming the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the next set of values is empty or not and …\nCreates a new <code>RawBatchValuesAdapter</code> object.\nSerializes the next set of values in the sequence and …\nSkips the next set of values.\nFailed to serialize values for a statement, represented by …\nDescribes why serializing values for a statement failed.\nFailed to type check values for a statement, represented …\nDescribes why type checking values for a statement failed.\nA different column name was expected at given position.\nOne of the columns failed to serialize.\nA const empty instance, useful for taking references\nThe values generated by the <code>ValueList</code> trait were provided …\nThe Rust type provides a value for some column, but that …\nContains information needed to serialize a row.\nRepresents a set of values that can be sent along a CQL …\nA buffer containing already serialized values.\nAn iterator over raw values in some <code>SerializedValues</code>.\nImplements <code>SerializeRow</code> if the type wrapped over …\nDescribes a failure to translate the output of the …\nThe values generated by the <code>ValueList</code> trait were provided …\nA value required by the statement is not provided by the …\nThe Rust type expects <code>actual</code> column, but the statement …\nSerializes value and appends it to the list\nReturns the total serialized size of the values written so …\nLooks up and returns a column/bind marker by name.\nReturns column/bind marker specifications for given query.\nReturns the number of values written so far.\nConstructs an empty <code>RowSerializationContext</code>, as if for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>SerializedValues</code> via given closure.\nCreates the serialization context from prepared statement …\nConstructs <code>SerializedValues</code> from given <code>SerializeRow</code> object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this row contains any values or not.\nReturns <code>true</code> if the row contains no elements.\nReturns an iterator over the values serialized into the …\nDetailed information about the failure.\nDetailed information about the failure.\nConstructs a new, empty <code>SerializedValues</code>.\nName of the Rust type used to represent the values.\nName of the Rust type used to represent the values.\nSerializes the row according to the information in the …\nSerializes an object implementing <code>ValueList</code> by using the …\nThe error that caused the column serialization to fail.\nName of the column that failed to serialize.\nThe number of values that the Rust type provides.\nThe number of columns that the statement requires.\nName of the column for which the DB requested a value.\nName of the column that is missing in the statement.\nName of the column for which the Rust type doesn’t …\nName of the column, as expected by the Rust type.\nName of the bind marker for which there is no value.\nName of the value that does not match to any of the bind …\nSerialization of one of the built-in types failed.\nDescribes why serialization of some of the built-in types …\nType checking of one of the built-in types failed.\nDescribes why type checking some of the built-in types has …\nCustom CQL type - unsupported\nMismatch between the value size written at the beginning …\nOne of the elements of the set/list failed to serialize.\nOne of the tuple elements failed to serialize.\nA different field name was expected at given position.\nOne of the fields failed to serialize.\nThe value size written at the beginning is invalid (it is …\nOne of the keys in the map failed to serialize.\nA type check failure specific to a CQL map.\nA serialization failure specific to a CQL map.\nDescribes why serialization of a map type failed.\nDescribes why type checking of a map type failed.\nExpected one from a list of particular types.\nThe name of the UDT being serialized to does not match.\nThe Rust data contains a field that is not present in the …\nExpected a type that can be empty.\nThe CQL type is not a map.\nThe CQL type is neither a set not a list.\nThe CQL type is not a tuple.\nThe CQL type is not a user defined type.\nA type that can be serialized and sent along with a CQL …\nA type check failure specific to a CQL set or list.\nA serialization failure specific to a CQL set or list.\nDescribes why serialization of a set or list type failed.\nDescribes why type checking of a set or list type failed.\nThe size of the Rust value is too large to fit in the CQL …\nThe value is too bit to be serialized as it exceeds the …\nThe many contains too many items, exceeding the protocol …\nThe set/list contains too many items, exceeding the …\nOutput produced by the Value trait is less than 4 bytes in …\nA type check failure specific to a CQL tuple.\nA serialization failure specific to a CQL tuple.\nDescribes why serialize of a tuple failed.\nDescribes why type checking of a tuple failed.\nA type check failure specific to a CQL UDT.\nA serialization failure specific to a CQL UDT.\nDescribes why serialization of a user defined type failed.\nDescribes why type checking of a user defined type failed.\nImplements <code>SerializeCql</code> if the type wrapped over …\nThe Rust data does not have a field that is required in …\nThe Rust value is out of range supported by the CQL type.\nOne of the values in the map failed to serialize.\nDescribes a failure to translate the output of the <code>Value</code> …\nThe tuple has the wrong element count.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe CQL type that the Rust type was being serialized to.\nThe CQL type that the Rust type was being serialized to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetailed information about the failure.\nDetailed information about the failure.\nName of the Rust type being serialized.\nName of the Rust type being serialized.\nSerializes the value to given CQL type.\nSerializes a value implementing <code>Value</code> by using the …\nThe list of types that the Rust type can serialize as.\nThe error that caused the tuple field serialization to …\nIndex of the tuple element that failed to serialize.\nThe number of elements that the Rust tuple has.\nThe number of elements that the CQL tuple type has.\nThe error that caused the UDT field serialization to fail.\nName of the field which failed to serialize.\nThe name of the CQL UDT field.\nName of field that the CQL UDT requires but is missing in …\nName of the Rust struct field that is missing in the UDT.\nKeyspace in which the UDT was defined.\nThe name of the Rust field.\nName of the UDT.\nThe actual size of the output.\nThe declared size of the output.\nSize of the produced data.\nDeclared size of the output.\nThere was an attempt to produce a CQL value over the …\nAllows appending bytes to a non-null, non-unset cell.\nRepresents a handle to a CQL value that needs to be …\nAn interface that facilitates writing values for a CQL …\nAn object that indicates a type-level proof that something …\nAppends raw bytes to this cell.\nAppends the values from an existing <code>SerializedValues</code> …\nFinishes serializing the value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns this writter into a <code>CellValueBuilder</code> which can be …\nAppends a new value to the sequence and returns an object …\nAppends a sub-value to the end of the current contents of …\nCreates a new row writer based on an existing Vec.\nCreates a new cell writer based on an existing Vec.\nSets this value to be null, consuming this object.\nSets this value to represent an unset value, consuming …\nSets this value to a non-zero, non-unset value with given …\nReturns the number of values that were written so far.")